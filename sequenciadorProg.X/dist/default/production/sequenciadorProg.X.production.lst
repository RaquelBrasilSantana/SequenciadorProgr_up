

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Nov 11 13:59:17 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F887 Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   102                           PORTC equ 07h ;# 
   103  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   104                           PORTD equ 08h ;# 
   105  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   106                           PORTE equ 09h ;# 
   107  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   108                           PCLATH equ 0Ah ;# 
   109  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   110                           INTCON equ 0Bh ;# 
   111  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   112                           PIR1 equ 0Ch ;# 
   113  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   114                           PIR2 equ 0Dh ;# 
   115  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   116                           TMR1 equ 0Eh ;# 
   117  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   118                           TMR1L equ 0Eh ;# 
   119  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   120                           TMR1H equ 0Fh ;# 
   121  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   122                           T1CON equ 010h ;# 
   123  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   124                           TMR2 equ 011h ;# 
   125  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   126                           T2CON equ 012h ;# 
   127  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   128                           SSPBUF equ 013h ;# 
   129  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   130                           SSPCON equ 014h ;# 
   131  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   132                           CCPR1 equ 015h ;# 
   133  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   134                           CCPR1L equ 015h ;# 
   135  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   136                           CCPR1H equ 016h ;# 
   137  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   138                           CCP1CON equ 017h ;# 
   139  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   140                           RCSTA equ 018h ;# 
   141  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   142                           TXREG equ 019h ;# 
   143  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   144                           RCREG equ 01Ah ;# 
   145  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   146                           CCPR2 equ 01Bh ;# 
   147  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   148                           CCPR2L equ 01Bh ;# 
   149  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   150                           CCPR2H equ 01Ch ;# 
   151  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   152                           CCP2CON equ 01Dh ;# 
   153  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   154                           ADRESH equ 01Eh ;# 
   155  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   156                           ADCON0 equ 01Fh ;# 
   157  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   158                           OPTION_REG equ 081h ;# 
   159  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   160                           TRISA equ 085h ;# 
   161  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   162                           TRISB equ 086h ;# 
   163  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   164                           TRISC equ 087h ;# 
   165  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   166                           TRISD equ 088h ;# 
   167  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   168                           TRISE equ 089h ;# 
   169  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   170                           PIE1 equ 08Ch ;# 
   171  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   172                           PIE2 equ 08Dh ;# 
   173  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   174                           PCON equ 08Eh ;# 
   175  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   176                           OSCCON equ 08Fh ;# 
   177  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   178                           OSCTUNE equ 090h ;# 
   179  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   180                           SSPCON2 equ 091h ;# 
   181  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   182                           PR2 equ 092h ;# 
   183  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   184                           SSPADD equ 093h ;# 
   185  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   186                           SSPMSK equ 093h ;# 
   187  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   188                           MSK equ 093h ;# 
   189  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   190                           SSPSTAT equ 094h ;# 
   191  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   192                           WPUB equ 095h ;# 
   193  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   194                           IOCB equ 096h ;# 
   195  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   196                           VRCON equ 097h ;# 
   197  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   198                           TXSTA equ 098h ;# 
   199  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   200                           SPBRG equ 099h ;# 
   201  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   202                           SPBRGH equ 09Ah ;# 
   203  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   204                           PWM1CON equ 09Bh ;# 
   205  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   206                           ECCPAS equ 09Ch ;# 
   207  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   208                           PSTRCON equ 09Dh ;# 
   209  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   210                           ADRESL equ 09Eh ;# 
   211  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   212                           ADCON1 equ 09Fh ;# 
   213  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   214                           WDTCON equ 0105h ;# 
   215  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   216                           CM1CON0 equ 0107h ;# 
   217  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   218                           CM2CON0 equ 0108h ;# 
   219  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   220                           CM2CON1 equ 0109h ;# 
   221  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   222                           EEDATA equ 010Ch ;# 
   223  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   224                           EEDAT equ 010Ch ;# 
   225  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   226                           EEADR equ 010Dh ;# 
   227  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   228                           EEDATH equ 010Eh ;# 
   229  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   230                           EEADRH equ 010Fh ;# 
   231  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   232                           SRCON equ 0185h ;# 
   233  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   234                           BAUDCTL equ 0187h ;# 
   235  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   236                           ANSEL equ 0188h ;# 
   237  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   238                           ANSELH equ 0189h ;# 
   239  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   240                           EECON1 equ 018Ch ;# 
   241  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   242                           EECON2 equ 018Dh ;# 
   243  018D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   244                           INDF equ 00h ;# 
   245  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   246                           TMR0 equ 01h ;# 
   247  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   248                           PCL equ 02h ;# 
   249  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   250                           STATUS equ 03h ;# 
   251  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   252                           FSR equ 04h ;# 
   253  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   254                           PORTA equ 05h ;# 
   255  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   256                           PORTB equ 06h ;# 
   257  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   258                           PORTC equ 07h ;# 
   259  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   260                           PORTD equ 08h ;# 
   261  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   262                           PORTE equ 09h ;# 
   263  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   264                           PCLATH equ 0Ah ;# 
   265  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   266                           INTCON equ 0Bh ;# 
   267  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   268                           PIR1 equ 0Ch ;# 
   269  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   270                           PIR2 equ 0Dh ;# 
   271  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   272                           TMR1 equ 0Eh ;# 
   273  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   274                           TMR1L equ 0Eh ;# 
   275  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   276                           TMR1H equ 0Fh ;# 
   277  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   278                           T1CON equ 010h ;# 
   279  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   280                           TMR2 equ 011h ;# 
   281  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   282                           T2CON equ 012h ;# 
   283  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   284                           SSPBUF equ 013h ;# 
   285  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   286                           SSPCON equ 014h ;# 
   287  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   288                           CCPR1 equ 015h ;# 
   289  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   290                           CCPR1L equ 015h ;# 
   291  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   292                           CCPR1H equ 016h ;# 
   293  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   294                           CCP1CON equ 017h ;# 
   295  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   296                           RCSTA equ 018h ;# 
   297  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   298                           TXREG equ 019h ;# 
   299  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   300                           RCREG equ 01Ah ;# 
   301  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   302                           CCPR2 equ 01Bh ;# 
   303  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   304                           CCPR2L equ 01Bh ;# 
   305  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   306                           CCPR2H equ 01Ch ;# 
   307  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   308                           CCP2CON equ 01Dh ;# 
   309  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   310                           ADRESH equ 01Eh ;# 
   311  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   312                           ADCON0 equ 01Fh ;# 
   313  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   314                           OPTION_REG equ 081h ;# 
   315  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   316                           TRISA equ 085h ;# 
   317  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   318                           TRISB equ 086h ;# 
   319  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   320                           TRISC equ 087h ;# 
   321  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   322                           TRISD equ 088h ;# 
   323  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   324                           TRISE equ 089h ;# 
   325  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   326                           PIE1 equ 08Ch ;# 
   327  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   328                           PIE2 equ 08Dh ;# 
   329  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   330                           PCON equ 08Eh ;# 
   331  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   332                           OSCCON equ 08Fh ;# 
   333  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   334                           OSCTUNE equ 090h ;# 
   335  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   336                           SSPCON2 equ 091h ;# 
   337  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   338                           PR2 equ 092h ;# 
   339  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   340                           SSPADD equ 093h ;# 
   341  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   342                           SSPMSK equ 093h ;# 
   343  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   344                           MSK equ 093h ;# 
   345  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   346                           SSPSTAT equ 094h ;# 
   347  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   348                           WPUB equ 095h ;# 
   349  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   350                           IOCB equ 096h ;# 
   351  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   352                           VRCON equ 097h ;# 
   353  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   354                           TXSTA equ 098h ;# 
   355  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   356                           SPBRG equ 099h ;# 
   357  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   358                           SPBRGH equ 09Ah ;# 
   359  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   360                           PWM1CON equ 09Bh ;# 
   361  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   362                           ECCPAS equ 09Ch ;# 
   363  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   364                           PSTRCON equ 09Dh ;# 
   365  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   366                           ADRESL equ 09Eh ;# 
   367  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   368                           ADCON1 equ 09Fh ;# 
   369  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   370                           WDTCON equ 0105h ;# 
   371  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   372                           CM1CON0 equ 0107h ;# 
   373  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   374                           CM2CON0 equ 0108h ;# 
   375  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   376                           CM2CON1 equ 0109h ;# 
   377  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   378                           EEDATA equ 010Ch ;# 
   379  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   380                           EEDAT equ 010Ch ;# 
   381  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   382                           EEADR equ 010Dh ;# 
   383  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   384                           EEDATH equ 010Eh ;# 
   385  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   386                           EEADRH equ 010Fh ;# 
   387  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   388                           SRCON equ 0185h ;# 
   389  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   390                           BAUDCTL equ 0187h ;# 
   391  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   392                           ANSEL equ 0188h ;# 
   393  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   394                           ANSELH equ 0189h ;# 
   395  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   396                           EECON1 equ 018Ch ;# 
   397  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   398                           EECON2 equ 018Dh ;# 
   399  018D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   400                           INDF equ 00h ;# 
   401  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   402                           TMR0 equ 01h ;# 
   403  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   404                           PCL equ 02h ;# 
   405  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   406                           STATUS equ 03h ;# 
   407  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   408                           FSR equ 04h ;# 
   409  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   410                           PORTA equ 05h ;# 
   411  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   412                           PORTB equ 06h ;# 
   413  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   414                           PORTC equ 07h ;# 
   415  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   416                           PORTD equ 08h ;# 
   417  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   418                           PORTE equ 09h ;# 
   419  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   420                           PCLATH equ 0Ah ;# 
   421  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   422                           INTCON equ 0Bh ;# 
   423  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   424                           PIR1 equ 0Ch ;# 
   425  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   426                           PIR2 equ 0Dh ;# 
   427  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   428                           TMR1 equ 0Eh ;# 
   429  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   430                           TMR1L equ 0Eh ;# 
   431  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   432                           TMR1H equ 0Fh ;# 
   433  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   434                           T1CON equ 010h ;# 
   435  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   436                           TMR2 equ 011h ;# 
   437  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   438                           T2CON equ 012h ;# 
   439  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   440                           SSPBUF equ 013h ;# 
   441  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   442                           SSPCON equ 014h ;# 
   443  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   444                           CCPR1 equ 015h ;# 
   445  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   446                           CCPR1L equ 015h ;# 
   447  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   448                           CCPR1H equ 016h ;# 
   449  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   450                           CCP1CON equ 017h ;# 
   451  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   452                           RCSTA equ 018h ;# 
   453  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   454                           TXREG equ 019h ;# 
   455  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   456                           RCREG equ 01Ah ;# 
   457  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   458                           CCPR2 equ 01Bh ;# 
   459  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   460                           CCPR2L equ 01Bh ;# 
   461  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   462                           CCPR2H equ 01Ch ;# 
   463  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   464                           CCP2CON equ 01Dh ;# 
   465  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   466                           ADRESH equ 01Eh ;# 
   467  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   468                           ADCON0 equ 01Fh ;# 
   469  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   470                           OPTION_REG equ 081h ;# 
   471  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   472                           TRISA equ 085h ;# 
   473  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   474                           TRISB equ 086h ;# 
   475  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   476                           TRISC equ 087h ;# 
   477  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   478                           TRISD equ 088h ;# 
   479  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   480                           TRISE equ 089h ;# 
   481  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   482                           PIE1 equ 08Ch ;# 
   483  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   484                           PIE2 equ 08Dh ;# 
   485  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   486                           PCON equ 08Eh ;# 
   487  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   488                           OSCCON equ 08Fh ;# 
   489  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   490                           OSCTUNE equ 090h ;# 
   491  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   492                           SSPCON2 equ 091h ;# 
   493  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   494                           PR2 equ 092h ;# 
   495  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   496                           SSPADD equ 093h ;# 
   497  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   498                           SSPMSK equ 093h ;# 
   499  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   500                           MSK equ 093h ;# 
   501  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   502                           SSPSTAT equ 094h ;# 
   503  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   504                           WPUB equ 095h ;# 
   505  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   506                           IOCB equ 096h ;# 
   507  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   508                           VRCON equ 097h ;# 
   509  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   510                           TXSTA equ 098h ;# 
   511  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   512                           SPBRG equ 099h ;# 
   513  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   514                           SPBRGH equ 09Ah ;# 
   515  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   516                           PWM1CON equ 09Bh ;# 
   517  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   518                           ECCPAS equ 09Ch ;# 
   519  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   520                           PSTRCON equ 09Dh ;# 
   521  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   522                           ADRESL equ 09Eh ;# 
   523  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   524                           ADCON1 equ 09Fh ;# 
   525  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   526                           WDTCON equ 0105h ;# 
   527  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   528                           CM1CON0 equ 0107h ;# 
   529  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   530                           CM2CON0 equ 0108h ;# 
   531  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   532                           CM2CON1 equ 0109h ;# 
   533  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   534                           EEDATA equ 010Ch ;# 
   535  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   536                           EEDAT equ 010Ch ;# 
   537  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   538                           EEADR equ 010Dh ;# 
   539  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   540                           EEDATH equ 010Eh ;# 
   541  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   542                           EEADRH equ 010Fh ;# 
   543  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   544                           SRCON equ 0185h ;# 
   545  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   546                           BAUDCTL equ 0187h ;# 
   547  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   548                           ANSEL equ 0188h ;# 
   549  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   550                           ANSELH equ 0189h ;# 
   551  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   552                           EECON1 equ 018Ch ;# 
   553  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   554                           EECON2 equ 018Dh ;# 
   555  018D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   556                           INDF equ 00h ;# 
   557  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   558                           TMR0 equ 01h ;# 
   559  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   560                           PCL equ 02h ;# 
   561  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   562                           STATUS equ 03h ;# 
   563  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   564                           FSR equ 04h ;# 
   565  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   566                           PORTA equ 05h ;# 
   567  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   568                           PORTB equ 06h ;# 
   569  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   570                           PORTC equ 07h ;# 
   571  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   572                           PORTD equ 08h ;# 
   573  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   574                           PORTE equ 09h ;# 
   575  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   576                           PCLATH equ 0Ah ;# 
   577  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   578                           INTCON equ 0Bh ;# 
   579  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   580                           PIR1 equ 0Ch ;# 
   581  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   582                           PIR2 equ 0Dh ;# 
   583  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   584                           TMR1 equ 0Eh ;# 
   585  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   586                           TMR1L equ 0Eh ;# 
   587  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   588                           TMR1H equ 0Fh ;# 
   589  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   590                           T1CON equ 010h ;# 
   591  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   592                           TMR2 equ 011h ;# 
   593  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   594                           T2CON equ 012h ;# 
   595  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   596                           SSPBUF equ 013h ;# 
   597  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   598                           SSPCON equ 014h ;# 
   599  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   600                           CCPR1 equ 015h ;# 
   601  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   602                           CCPR1L equ 015h ;# 
   603  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   604                           CCPR1H equ 016h ;# 
   605  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   606                           CCP1CON equ 017h ;# 
   607  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   608                           RCSTA equ 018h ;# 
   609  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   610                           TXREG equ 019h ;# 
   611  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   612                           RCREG equ 01Ah ;# 
   613  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   614                           CCPR2 equ 01Bh ;# 
   615  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   616                           CCPR2L equ 01Bh ;# 
   617  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   618                           CCPR2H equ 01Ch ;# 
   619  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   620                           CCP2CON equ 01Dh ;# 
   621  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   622                           ADRESH equ 01Eh ;# 
   623  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   624                           ADCON0 equ 01Fh ;# 
   625  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   626                           OPTION_REG equ 081h ;# 
   627  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   628                           TRISA equ 085h ;# 
   629  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   630                           TRISB equ 086h ;# 
   631  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   632                           TRISC equ 087h ;# 
   633  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   634                           TRISD equ 088h ;# 
   635  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   636                           TRISE equ 089h ;# 
   637  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   638                           PIE1 equ 08Ch ;# 
   639  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   640                           PIE2 equ 08Dh ;# 
   641  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   642                           PCON equ 08Eh ;# 
   643  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   644                           OSCCON equ 08Fh ;# 
   645  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   646                           OSCTUNE equ 090h ;# 
   647  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   648                           SSPCON2 equ 091h ;# 
   649  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   650                           PR2 equ 092h ;# 
   651  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   652                           SSPADD equ 093h ;# 
   653  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   654                           SSPMSK equ 093h ;# 
   655  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   656                           MSK equ 093h ;# 
   657  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   658                           SSPSTAT equ 094h ;# 
   659  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   660                           WPUB equ 095h ;# 
   661  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   662                           IOCB equ 096h ;# 
   663  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   664                           VRCON equ 097h ;# 
   665  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   666                           TXSTA equ 098h ;# 
   667  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   668                           SPBRG equ 099h ;# 
   669  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   670                           SPBRGH equ 09Ah ;# 
   671  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   672                           PWM1CON equ 09Bh ;# 
   673  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   674                           ECCPAS equ 09Ch ;# 
   675  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   676                           PSTRCON equ 09Dh ;# 
   677  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   678                           ADRESL equ 09Eh ;# 
   679  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   680                           ADCON1 equ 09Fh ;# 
   681  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   682                           WDTCON equ 0105h ;# 
   683  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   684                           CM1CON0 equ 0107h ;# 
   685  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   686                           CM2CON0 equ 0108h ;# 
   687  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   688                           CM2CON1 equ 0109h ;# 
   689  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   690                           EEDATA equ 010Ch ;# 
   691  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   692                           EEDAT equ 010Ch ;# 
   693  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   694                           EEADR equ 010Dh ;# 
   695  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   696                           EEDATH equ 010Eh ;# 
   697  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   698                           EEADRH equ 010Fh ;# 
   699  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   700                           SRCON equ 0185h ;# 
   701  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   702                           BAUDCTL equ 0187h ;# 
   703  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   704                           ANSEL equ 0188h ;# 
   705  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   706                           ANSELH equ 0189h ;# 
   707  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   708                           EECON1 equ 018Ch ;# 
   709  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   710                           EECON2 equ 018Dh ;# 
   711  018D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   712                           INDF equ 00h ;# 
   713  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   714                           TMR0 equ 01h ;# 
   715  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   716                           PCL equ 02h ;# 
   717  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   718                           STATUS equ 03h ;# 
   719  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   720                           FSR equ 04h ;# 
   721  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   722                           PORTA equ 05h ;# 
   723  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   724                           PORTB equ 06h ;# 
   725  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   726                           PORTC equ 07h ;# 
   727  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   728                           PORTD equ 08h ;# 
   729  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   730                           PORTE equ 09h ;# 
   731  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   732                           PCLATH equ 0Ah ;# 
   733  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   734                           INTCON equ 0Bh ;# 
   735  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   736                           PIR1 equ 0Ch ;# 
   737  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   738                           PIR2 equ 0Dh ;# 
   739  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   740                           TMR1 equ 0Eh ;# 
   741  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   742                           TMR1L equ 0Eh ;# 
   743  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   744                           TMR1H equ 0Fh ;# 
   745  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   746                           T1CON equ 010h ;# 
   747  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   748                           TMR2 equ 011h ;# 
   749  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   750                           T2CON equ 012h ;# 
   751  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   752                           SSPBUF equ 013h ;# 
   753  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   754                           SSPCON equ 014h ;# 
   755  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   756                           CCPR1 equ 015h ;# 
   757  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   758                           CCPR1L equ 015h ;# 
   759  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   760                           CCPR1H equ 016h ;# 
   761  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   762                           CCP1CON equ 017h ;# 
   763  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   764                           RCSTA equ 018h ;# 
   765  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   766                           TXREG equ 019h ;# 
   767  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   768                           RCREG equ 01Ah ;# 
   769  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   770                           CCPR2 equ 01Bh ;# 
   771  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   772                           CCPR2L equ 01Bh ;# 
   773  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   774                           CCPR2H equ 01Ch ;# 
   775  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   776                           CCP2CON equ 01Dh ;# 
   777  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   778                           ADRESH equ 01Eh ;# 
   779  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   780                           ADCON0 equ 01Fh ;# 
   781  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   782                           OPTION_REG equ 081h ;# 
   783  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   784                           TRISA equ 085h ;# 
   785  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   786                           TRISB equ 086h ;# 
   787  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   788                           TRISC equ 087h ;# 
   789  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   790                           TRISD equ 088h ;# 
   791  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   792                           TRISE equ 089h ;# 
   793  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   794                           PIE1 equ 08Ch ;# 
   795  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   796                           PIE2 equ 08Dh ;# 
   797  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   798                           PCON equ 08Eh ;# 
   799  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   800                           OSCCON equ 08Fh ;# 
   801  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   802                           OSCTUNE equ 090h ;# 
   803  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   804                           SSPCON2 equ 091h ;# 
   805  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   806                           PR2 equ 092h ;# 
   807  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   808                           SSPADD equ 093h ;# 
   809  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   810                           SSPMSK equ 093h ;# 
   811  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   812                           MSK equ 093h ;# 
   813  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   814                           SSPSTAT equ 094h ;# 
   815  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   816                           WPUB equ 095h ;# 
   817  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   818                           IOCB equ 096h ;# 
   819  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   820                           VRCON equ 097h ;# 
   821  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   822                           TXSTA equ 098h ;# 
   823  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   824                           SPBRG equ 099h ;# 
   825  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   826                           SPBRGH equ 09Ah ;# 
   827  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   828                           PWM1CON equ 09Bh ;# 
   829  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   830                           ECCPAS equ 09Ch ;# 
   831  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   832                           PSTRCON equ 09Dh ;# 
   833  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   834                           ADRESL equ 09Eh ;# 
   835  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   836                           ADCON1 equ 09Fh ;# 
   837  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   838                           WDTCON equ 0105h ;# 
   839  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   840                           CM1CON0 equ 0107h ;# 
   841  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   842                           CM2CON0 equ 0108h ;# 
   843  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   844                           CM2CON1 equ 0109h ;# 
   845  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   846                           EEDATA equ 010Ch ;# 
   847  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   848                           EEDAT equ 010Ch ;# 
   849  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   850                           EEADR equ 010Dh ;# 
   851  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   852                           EEDATH equ 010Eh ;# 
   853  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   854                           EEADRH equ 010Fh ;# 
   855  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   856                           SRCON equ 0185h ;# 
   857  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   858                           BAUDCTL equ 0187h ;# 
   859  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   860                           ANSEL equ 0188h ;# 
   861  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   862                           ANSELH equ 0189h ;# 
   863  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   864                           EECON1 equ 018Ch ;# 
   865  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   866                           EECON2 equ 018Dh ;# 
   867  018D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   868                           INDF equ 00h ;# 
   869  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   870                           TMR0 equ 01h ;# 
   871  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   872                           PCL equ 02h ;# 
   873  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   874                           STATUS equ 03h ;# 
   875  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   876                           FSR equ 04h ;# 
   877  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   878                           PORTA equ 05h ;# 
   879  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   880                           PORTB equ 06h ;# 
   881  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   882                           PORTC equ 07h ;# 
   883  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   884                           PORTD equ 08h ;# 
   885  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   886                           PORTE equ 09h ;# 
   887  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   888                           PCLATH equ 0Ah ;# 
   889  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   890                           INTCON equ 0Bh ;# 
   891  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   892                           PIR1 equ 0Ch ;# 
   893  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   894                           PIR2 equ 0Dh ;# 
   895  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   896                           TMR1 equ 0Eh ;# 
   897  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   898                           TMR1L equ 0Eh ;# 
   899  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   900                           TMR1H equ 0Fh ;# 
   901  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   902                           T1CON equ 010h ;# 
   903  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   904                           TMR2 equ 011h ;# 
   905  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   906                           T2CON equ 012h ;# 
   907  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   908                           SSPBUF equ 013h ;# 
   909  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   910                           SSPCON equ 014h ;# 
   911  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   912                           CCPR1 equ 015h ;# 
   913  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   914                           CCPR1L equ 015h ;# 
   915  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   916                           CCPR1H equ 016h ;# 
   917  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   918                           CCP1CON equ 017h ;# 
   919  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   920                           RCSTA equ 018h ;# 
   921  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   922                           TXREG equ 019h ;# 
   923  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   924                           RCREG equ 01Ah ;# 
   925  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   926                           CCPR2 equ 01Bh ;# 
   927  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   928                           CCPR2L equ 01Bh ;# 
   929  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   930                           CCPR2H equ 01Ch ;# 
   931  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   932                           CCP2CON equ 01Dh ;# 
   933  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   934                           ADRESH equ 01Eh ;# 
   935  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   936                           ADCON0 equ 01Fh ;# 
   937  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   938                           OPTION_REG equ 081h ;# 
   939  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   940                           TRISA equ 085h ;# 
   941  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   942                           TRISB equ 086h ;# 
   943  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   944                           TRISC equ 087h ;# 
   945  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   946                           TRISD equ 088h ;# 
   947  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   948                           TRISE equ 089h ;# 
   949  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   950                           PIE1 equ 08Ch ;# 
   951  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   952                           PIE2 equ 08Dh ;# 
   953  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   954                           PCON equ 08Eh ;# 
   955  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   956                           OSCCON equ 08Fh ;# 
   957  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   958                           OSCTUNE equ 090h ;# 
   959  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   960                           SSPCON2 equ 091h ;# 
   961  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   962                           PR2 equ 092h ;# 
   963  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   964                           SSPADD equ 093h ;# 
   965  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   966                           SSPMSK equ 093h ;# 
   967  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   968                           MSK equ 093h ;# 
   969  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   970                           SSPSTAT equ 094h ;# 
   971  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   972                           WPUB equ 095h ;# 
   973  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   974                           IOCB equ 096h ;# 
   975  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   976                           VRCON equ 097h ;# 
   977  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   978                           TXSTA equ 098h ;# 
   979  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   980                           SPBRG equ 099h ;# 
   981  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   982                           SPBRGH equ 09Ah ;# 
   983  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   984                           PWM1CON equ 09Bh ;# 
   985  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   986                           ECCPAS equ 09Ch ;# 
   987  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   988                           PSTRCON equ 09Dh ;# 
   989  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   990                           ADRESL equ 09Eh ;# 
   991  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   992                           ADCON1 equ 09Fh ;# 
   993  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   994                           WDTCON equ 0105h ;# 
   995  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   996                           CM1CON0 equ 0107h ;# 
   997  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
   998                           CM2CON0 equ 0108h ;# 
   999  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1000                           CM2CON1 equ 0109h ;# 
  1001  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1002                           EEDATA equ 010Ch ;# 
  1003  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1004                           EEDAT equ 010Ch ;# 
  1005  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1006                           EEADR equ 010Dh ;# 
  1007  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1008                           EEDATH equ 010Eh ;# 
  1009  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1010                           EEADRH equ 010Fh ;# 
  1011  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1012                           SRCON equ 0185h ;# 
  1013  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1014                           BAUDCTL equ 0187h ;# 
  1015  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1016                           ANSEL equ 0188h ;# 
  1017  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1018                           ANSELH equ 0189h ;# 
  1019  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1020                           EECON1 equ 018Ch ;# 
  1021  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1022                           EECON2 equ 018Dh ;# 
  1023  018D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1024                           INDF equ 00h ;# 
  1025  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1026                           TMR0 equ 01h ;# 
  1027  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1028                           PCL equ 02h ;# 
  1029  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1030                           STATUS equ 03h ;# 
  1031  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1032                           FSR equ 04h ;# 
  1033  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1034                           PORTA equ 05h ;# 
  1035  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1036                           PORTB equ 06h ;# 
  1037  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1038                           PORTC equ 07h ;# 
  1039  0007                     # 354 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1040                           PORTD equ 08h ;# 
  1041  0008                     # 416 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1042                           PORTE equ 09h ;# 
  1043  0009                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1044                           PCLATH equ 0Ah ;# 
  1045  000A                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1046                           INTCON equ 0Bh ;# 
  1047  000B                     # 539 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1048                           PIR1 equ 0Ch ;# 
  1049  000C                     # 595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1050                           PIR2 equ 0Dh ;# 
  1051  000D                     # 652 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1052                           TMR1 equ 0Eh ;# 
  1053  000E                     # 659 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1054                           TMR1L equ 0Eh ;# 
  1055  000E                     # 666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1056                           TMR1H equ 0Fh ;# 
  1057  000F                     # 673 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1058                           T1CON equ 010h ;# 
  1059  0010                     # 767 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1060                           TMR2 equ 011h ;# 
  1061  0011                     # 774 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1062                           T2CON equ 012h ;# 
  1063  0012                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1064                           SSPBUF equ 013h ;# 
  1065  0013                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1066                           SSPCON equ 014h ;# 
  1067  0014                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1068                           CCPR1 equ 015h ;# 
  1069  0015                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1070                           CCPR1L equ 015h ;# 
  1071  0015                     # 936 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1072                           CCPR1H equ 016h ;# 
  1073  0016                     # 943 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1074                           CCP1CON equ 017h ;# 
  1075  0017                     # 1040 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1076                           RCSTA equ 018h ;# 
  1077  0018                     # 1135 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1078                           TXREG equ 019h ;# 
  1079  0019                     # 1142 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1080                           RCREG equ 01Ah ;# 
  1081  001A                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1082                           CCPR2 equ 01Bh ;# 
  1083  001B                     # 1156 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1084                           CCPR2L equ 01Bh ;# 
  1085  001B                     # 1163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1086                           CCPR2H equ 01Ch ;# 
  1087  001C                     # 1170 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1088                           CCP2CON equ 01Dh ;# 
  1089  001D                     # 1240 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1090                           ADRESH equ 01Eh ;# 
  1091  001E                     # 1247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1092                           ADCON0 equ 01Fh ;# 
  1093  001F                     # 1348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1094                           OPTION_REG equ 081h ;# 
  1095  0081                     # 1418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1096                           TRISA equ 085h ;# 
  1097  0085                     # 1480 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1098                           TRISB equ 086h ;# 
  1099  0086                     # 1542 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1100                           TRISC equ 087h ;# 
  1101  0087                     # 1604 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1102                           TRISD equ 088h ;# 
  1103  0088                     # 1666 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1104                           TRISE equ 089h ;# 
  1105  0089                     # 1704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1106                           PIE1 equ 08Ch ;# 
  1107  008C                     # 1760 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1108                           PIE2 equ 08Dh ;# 
  1109  008D                     # 1817 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1110                           PCON equ 08Eh ;# 
  1111  008E                     # 1864 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1112                           OSCCON equ 08Fh ;# 
  1113  008F                     # 1929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1114                           OSCTUNE equ 090h ;# 
  1115  0090                     # 1981 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1116                           SSPCON2 equ 091h ;# 
  1117  0091                     # 2043 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1118                           PR2 equ 092h ;# 
  1119  0092                     # 2050 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1120                           SSPADD equ 093h ;# 
  1121  0093                     # 2057 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1122                           SSPMSK equ 093h ;# 
  1123  0093                     # 2062 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1124                           MSK equ 093h ;# 
  1125  0093                     # 2179 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1126                           SSPSTAT equ 094h ;# 
  1127  0094                     # 2348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1128                           WPUB equ 095h ;# 
  1129  0095                     # 2418 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1130                           IOCB equ 096h ;# 
  1131  0096                     # 2488 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1132                           VRCON equ 097h ;# 
  1133  0097                     # 2558 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1134                           TXSTA equ 098h ;# 
  1135  0098                     # 2644 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1136                           SPBRG equ 099h ;# 
  1137  0099                     # 2706 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1138                           SPBRGH equ 09Ah ;# 
  1139  009A                     # 2776 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1140                           PWM1CON equ 09Bh ;# 
  1141  009B                     # 2846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1142                           ECCPAS equ 09Ch ;# 
  1143  009C                     # 2928 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1144                           PSTRCON equ 09Dh ;# 
  1145  009D                     # 2972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1146                           ADRESL equ 09Eh ;# 
  1147  009E                     # 2979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1148                           ADCON1 equ 09Fh ;# 
  1149  009F                     # 3013 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1150                           WDTCON equ 0105h ;# 
  1151  0105                     # 3066 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1152                           CM1CON0 equ 0107h ;# 
  1153  0107                     # 3131 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1154                           CM2CON0 equ 0108h ;# 
  1155  0108                     # 3196 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1156                           CM2CON1 equ 0109h ;# 
  1157  0109                     # 3247 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1158                           EEDATA equ 010Ch ;# 
  1159  010C                     # 3252 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1160                           EEDAT equ 010Ch ;# 
  1161  010C                     # 3259 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1162                           EEADR equ 010Dh ;# 
  1163  010D                     # 3266 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1164                           EEDATH equ 010Eh ;# 
  1165  010E                     # 3273 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1166                           EEADRH equ 010Fh ;# 
  1167  010F                     # 3280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1168                           SRCON equ 0185h ;# 
  1169  0185                     # 3337 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1170                           BAUDCTL equ 0187h ;# 
  1171  0187                     # 3389 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1172                           ANSEL equ 0188h ;# 
  1173  0188                     # 3451 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1174                           ANSELH equ 0189h ;# 
  1175  0189                     # 3501 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1176                           EECON1 equ 018Ch ;# 
  1177  018C                     # 3546 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f887.h"
  1178                           EECON2 equ 018Dh ;# 
  1179  018D                     	FNCALL	_main,_clearLCD
  1180                           	FNCALL	_main,_currentKey
  1181                           	FNCALL	_main,_delFIFO
  1182                           	FNCALL	_main,_displayFIFO
  1183                           	FNCALL	_main,_getFIFO
  1184                           	FNCALL	_main,_initKeyboard
  1185                           	FNCALL	_main,_initLCD
  1186                           	FNCALL	_main,_initSerialIO
  1187                           	FNCALL	_main,_keyboardScan
  1188                           	FNCALL	_main,_previousKey
  1189                           	FNCALL	_main,_putFIFO
  1190                           	FNCALL	_main,_serialIOscan
  1191                           	FNCALL	_main,_writeLCD
  1192                           	FNCALL	_writeLCD,_gotoxy
  1193                           	FNCALL	_writeLCD,_putLCD
  1194                           	FNCALL	_gotoxy,_cmdLCD
  1195                           	FNCALL	_serialIOscan,_serialIObyteShift
  1196                           	FNCALL	_serialIOscan,_serialIOload
  1197                           	FNCALL	_initLCD,_cmdLCD
  1198                           	FNCALL	_clearLCD,_cmdLCD
  1199                           	FNROOT	_main
  1200                           	global	_keyboardMatrix
  1201                           psect	strings,class=STRING,delta=2,noexec
  1202                           global __pstrings
  1203                           __pstrings:
  1204  0003                     stringtab:
  1205  0003                     	global    __stringtab
  1206                           __stringtab:
  1207  0003                     ;	String table - string pointers are 1 byte each
  1208                           stringcode:stringdir:
  1209  0003                     movlw high(stringdir)
      + 0003                     stringdir:	
  1210  0003  3000               movwf pclath
  1211  0004  008A               movf fsr,w
  1212  0005  0804               incf fsr
  1213  0006  0A84               	addwf pc
  1214  0007  0782               	global __stringbase
  1215                           __stringbase:
  1216  0008                     	retlw	0
  1217  0008  3400               psect	strings
  1218                           	global    __end_of__stringtab
  1219                           __end_of__stringtab:
  1220  0009                     	file	"keyboard.c"
  1221                           	line	39
  1222                           _keyboardMatrix:
  1223  0009                     	retlw	031h
  1224  0009  3431               	retlw	032h
  1225  000A  3432               	retlw	033h
  1226  000B  3433               	retlw	041h
  1227  000C  3441               	retlw	034h
  1228  000D  3434               	retlw	035h
  1229  000E  3435               	retlw	036h
  1230  000F  3436               	retlw	042h
  1231  0010  3442               	retlw	037h
  1232  0011  3437               	retlw	038h
  1233  0012  3438               	retlw	039h
  1234  0013  3439               	retlw	043h
  1235  0014  3443               	retlw	02Ah
  1236  0015  342A               	retlw	030h
  1237  0016  3430               	retlw	023h
  1238  0017  3423               	retlw	044h
  1239  0018  3444               	global __end_of_keyboardMatrix
  1240                           __end_of_keyboardMatrix:
  1241  0019                     	global	_keyboardMatrix
  1242                           	global	_fifoTail
  1243                           	global	_fifoHead
  1244                           	global	_lenSerialIO
  1245                           	global	_ptrSerialOut
  1246                           	global	_ptrSerialIn
  1247                           	global	_currKey
  1248                           	global	_prevKey
  1249                           	global	_fifo
  1250                           	global	_LCD
  1251                           _LCD	set	8
  1252  0008                     	global	_SERIALIO
  1253                           _SERIALIO	set	9
  1254  0009                     	global	_PORTEbits
  1255                           _PORTEbits	set	0x9
  1256  0009                     	global	_PORTAbits
  1257                           _PORTAbits	set	0x5
  1258  0005                     	global	_PORTB
  1259                           _PORTB	set	0x6
  1260  0006                     	global	_KEYBOARDbits
  1261                           _KEYBOARDbits	set	0x6
  1262  0006                     	global	_TRISD
  1263                           _TRISD	set	0x88
  1264  0088                     	global	_TRISAbits
  1265                           _TRISAbits	set	0x85
  1266  0085                     	global	_TRISEbits
  1267                           _TRISEbits	set	0x89
  1268  0089                     	global	_OPTION_REGbits
  1269                           _OPTION_REGbits	set	0x81
  1270  0081                     	global	_WPUB
  1271                           _WPUB	set	0x95
  1272  0095                     	global	_TRISB
  1273                           _TRISB	set	0x86
  1274  0086                     	global	_ANSELbits
  1275                           _ANSELbits	set	0x188
  1276  0188                     	global	_ANSELH
  1277                           _ANSELH	set	0x189
  1278  0189                     ; #config settings
  1279                           global __CFG_FOSC$INTRC_NOCLKOUT
  1280                           __CFG_FOSC$INTRC_NOCLKOUT equ 0x0
  1281  0000                     global __CFG_WDTE$OFF
  1282                           __CFG_WDTE$OFF equ 0x0
  1283  0000                     global __CFG_MCLRE$OFF
  1284                           __CFG_MCLRE$OFF equ 0x0
  1285  0000                     global __CFG_LVP$OFF
  1286                           __CFG_LVP$OFF equ 0x0
  1287  0000                     	file	"C:\Users\18175218\AppData\Local\Temp\s3r0."
  1288                           	line	#
  1289                           psect cinit,class=CODE,delta=2
  1290                           global start_initialization
  1291                           start_initialization:
  1292  07F1                     
  1293                           global __initialization
  1294                           __initialization:
  1295  07F1                     psect	bssCOMMON,class=COMMON,space=1,noexec
  1296                           global __pbssCOMMON
  1297                           __pbssCOMMON:
  1298  007C                     _fifoTail:
  1299  007C                            ds      1
  1300  007C                     
  1301                           _fifoHead:
  1302  007D                            ds      1
  1303  007D                     
  1304                           psect	bssBANK0,class=BANK0,space=1,noexec
  1305                           global __pbssBANK0
  1306                           __pbssBANK0:
  1307  0020                     _lenSerialIO:
  1308  0020                            ds      1
  1309  0020                     
  1310                           _ptrSerialOut:
  1311  0021                            ds      1
  1312  0021                     
  1313                           _ptrSerialIn:
  1314  0022                            ds      1
  1315  0022                     
  1316                           _currKey:
  1317  0023                            ds      1
  1318  0023                     
  1319                           _prevKey:
  1320  0024                            ds      1
  1321  0024                     
  1322                           _fifo:
  1323  0025                            ds      16
  1324  0025                     
  1325                           	file	"C:\Users\18175218\AppData\Local\Temp\s3r0."
  1326                           	line	#
  1327                           psect clrtext,class=CODE,delta=2
  1328                           global clear_ram0
  1329                           ;	Called with FSR containing the base address, and
  1330                           ;	W with the last address+1
  1331                           clear_ram0:
  1332  012D                     	clrwdt			;clear the watchdog before getting into this loop
  1333  012D  0064               clrloop0:
  1334  012E                     	clrf	indf		;clear RAM location pointed to by FSR
  1335  012E  0180               	incf	fsr,f		;increment pointer
  1336  012F  0A84               	xorwf	fsr,w		;XOR with final address
  1337  0130  0604               	btfsc	status,2	;have we reached the end yet?
  1338  0131  1903               	retlw	0		;all done for this memory range, return
  1339  0132  3400               	xorwf	fsr,w		;XOR again to restore value
  1340  0133  0604               	goto	clrloop0		;do the next byte
  1341  0134  292E               
  1342                           ; Clear objects allocated to COMMON
  1343                           psect cinit,class=CODE,delta=2,merge=1
  1344                           	clrf	((__pbssCOMMON)+0)&07Fh
  1345  07F1  01FC               	clrf	((__pbssCOMMON)+1)&07Fh
  1346  07F2  01FD               ; Clear objects allocated to BANK0
  1347                           psect cinit,class=CODE,delta=2,merge=1
  1348                           	bcf	status, 7	;select IRP bank0
  1349  07F3  1383               	movlw	low(__pbssBANK0)
  1350  07F4  3020               	movwf	fsr
  1351  07F5  0084               	movlw	low((__pbssBANK0)+015h)
  1352  07F6  3035               	fcall	clear_ram0
  1353  07F7  120A  118A  212D  120A  118A  psect cinit,class=CODE,delta=2,merge=1
  1354                           global end_of_initialization,__end_of__initialization
  1355                           
  1356                           ;End of C runtime variable initialization code
  1357                           
  1358                           end_of_initialization:
  1359  07FC                     __end_of__initialization:
  1360  07FC                     clrf status
  1361  07FC  0183               ljmp _main	;jump to C main() function
  1362  07FD  120A  118A  2BB7   psect	cstackCOMMON,class=COMMON,space=1,noexec
  1363                           global __pcstackCOMMON
  1364                           __pcstackCOMMON:
  1365  0070                     ?_displayFIFO:	; 1 bytes @ 0x0
  1366  0070                     ??_displayFIFO:	; 1 bytes @ 0x0
  1367  0070                     ?_initLCD:	; 1 bytes @ 0x0
  1368  0070                     ?_initSerialIO:	; 1 bytes @ 0x0
  1369  0070                     ?_clearLCD:	; 1 bytes @ 0x0
  1370  0070                     ?_serialIOscan:	; 1 bytes @ 0x0
  1371  0070                     ?_cmdLCD:	; 1 bytes @ 0x0
  1372  0070                     ??_cmdLCD:	; 1 bytes @ 0x0
  1373  0070                     ?_putFIFO:	; 1 bytes @ 0x0
  1374  0070                     ??_putFIFO:	; 1 bytes @ 0x0
  1375  0070                     ?_getFIFO:	; 1 bytes @ 0x0
  1376  0070                     ??_getFIFO:	; 1 bytes @ 0x0
  1377  0070                     ?_delFIFO:	; 1 bytes @ 0x0
  1378  0070                     ??_delFIFO:	; 1 bytes @ 0x0
  1379  0070                     ?_previousKey:	; 1 bytes @ 0x0
  1380  0070                     ??_previousKey:	; 1 bytes @ 0x0
  1381  0070                     ?_currentKey:	; 1 bytes @ 0x0
  1382  0070                     ??_currentKey:	; 1 bytes @ 0x0
  1383  0070                     ?_keyboardScan:	; 1 bytes @ 0x0
  1384  0070                     ??_keyboardScan:	; 1 bytes @ 0x0
  1385  0070                     ?_initKeyboard:	; 1 bytes @ 0x0
  1386  0070                     ??_initKeyboard:	; 1 bytes @ 0x0
  1387  0070                     ?_main:	; 1 bytes @ 0x0
  1388  0070                     ?_serialIOload:	; 1 bytes @ 0x0
  1389  0070                     ??_serialIOload:	; 1 bytes @ 0x0
  1390  0070                     ?_serialIObyteShift:	; 1 bytes @ 0x0
  1391  0070                     ??_serialIObyteShift:	; 1 bytes @ 0x0
  1392  0070                     ?_putLCD:	; 1 bytes @ 0x0
  1393  0070                     ??_putLCD:	; 1 bytes @ 0x0
  1394  0070                     	global	initSerialIO@ptrOut
  1395                           initSerialIO@ptrOut:	; 1 bytes @ 0x0
  1396  0070                     	ds	1
  1397  0070                     	global	putFIFO@c
  1398                           putFIFO@c:	; 1 bytes @ 0x1
  1399  0071                     	global	getFIFO@aux
  1400                           getFIFO@aux:	; 1 bytes @ 0x1
  1401  0071                     	global	delFIFO@n
  1402                           delFIFO@n:	; 1 bytes @ 0x1
  1403  0071                     	global	serialIObyteShift@dataIn
  1404                           serialIObyteShift@dataIn:	; 1 bytes @ 0x1
  1405  0071                     	global	initSerialIO@length
  1406                           initSerialIO@length:	; 1 bytes @ 0x1
  1407  0071                     	ds	1
  1408  0071                     ??_initSerialIO:	; 1 bytes @ 0x2
  1409  0072                     	global	delFIFO@ret
  1410                           delFIFO@ret:	; 1 bytes @ 0x2
  1411  0072                     	global	serialIObyteShift@dataOut
  1412                           serialIObyteShift@dataOut:	; 1 bytes @ 0x2
  1413  0072                     	global	cmdLCD@cmd
  1414                           cmdLCD@cmd:	; 1 bytes @ 0x2
  1415  0072                     	global	putLCD@c
  1416                           putLCD@c:	; 1 bytes @ 0x2
  1417  0072                     	ds	1
  1418  0072                     	global	serialIObyteShift@dataBit
  1419                           serialIObyteShift@dataBit:	; 1 bytes @ 0x3
  1420  0073                     	global	initSerialIO@ptrIn
  1421                           initSerialIO@ptrIn:	; 1 bytes @ 0x3
  1422  0073                     	global	cmdLCD@nibble
  1423                           cmdLCD@nibble:	; 1 bytes @ 0x3
  1424  0073                     	global	putLCD@nibble
  1425                           putLCD@nibble:	; 1 bytes @ 0x3
  1426  0073                     	ds	1
  1427  0073                     ??_initLCD:	; 1 bytes @ 0x4
  1428  0074                     ??_clearLCD:	; 1 bytes @ 0x4
  1429  0074                     ??_serialIOscan:	; 1 bytes @ 0x4
  1430  0074                     ?_gotoxy:	; 1 bytes @ 0x4
  1431  0074                     	global	gotoxy@y
  1432                           gotoxy@y:	; 1 bytes @ 0x4
  1433  0074                     	ds	1
  1434  0074                     ??_gotoxy:	; 1 bytes @ 0x5
  1435  0075                     	ds	2
  1436  0075                     	global	serialIOscan@j
  1437                           serialIOscan@j:	; 1 bytes @ 0x7
  1438  0077                     	global	gotoxy@x
  1439                           gotoxy@x:	; 1 bytes @ 0x7
  1440  0077                     	ds	1
  1441  0077                     ?_writeLCD:	; 1 bytes @ 0x8
  1442  0078                     	global	keyboardScan@aux
  1443                           keyboardScan@aux:	; 1 bytes @ 0x8
  1444  0078                     	global	serialIOscan@i
  1445                           serialIOscan@i:	; 1 bytes @ 0x8
  1446  0078                     	global	writeLCD@y
  1447                           writeLCD@y:	; 1 bytes @ 0x8
  1448  0078                     	ds	1
  1449  0078                     	global	keyboardScan@i
  1450                           keyboardScan@i:	; 1 bytes @ 0x9
  1451  0079                     	global	writeLCD@ptr
  1452                           writeLCD@ptr:	; 1 bytes @ 0x9
  1453  0079                     	ds	1
  1454  0079                     ??_writeLCD:	; 1 bytes @ 0xA
  1455  007A                     	global	keyboardScan@j
  1456                           keyboardScan@j:	; 1 bytes @ 0xA
  1457  007A                     	ds	1
  1458  007A                     	global	writeLCD@x
  1459                           writeLCD@x:	; 1 bytes @ 0xB
  1460  007B                     	ds	1
  1461  007B                     psect	cstackBANK0,class=BANK0,space=1,noexec
  1462                           global __pcstackBANK0
  1463                           __pcstackBANK0:
  1464  0035                     ??_main:	; 1 bytes @ 0x0
  1465  0035                     	ds	3
  1466  0035                     	global	main@a
  1467                           main@a:	; 1 bytes @ 0x3
  1468  0038                     	ds	1
  1469  0038                     	global	main@b
  1470                           main@b:	; 1 bytes @ 0x4
  1471  0039                     	ds	1
  1472  0039                     	global	main@c
  1473                           main@c:	; 1 bytes @ 0x5
  1474  003A                     	ds	1
  1475  003A                     	global	main@d
  1476                           main@d:	; 1 bytes @ 0x6
  1477  003B                     	ds	1
  1478  003B                     	global	main@atuador
  1479                           main@atuador:	; 1 bytes @ 0x7
  1480  003C                     	ds	1
  1481  003C                     	global	main@sensor
  1482                           main@sensor:	; 1 bytes @ 0x8
  1483  003D                     	ds	1
  1484  003D                     	global	main@tecla
  1485                           main@tecla:	; 1 bytes @ 0x9
  1486  003E                     	ds	1
  1487  003E                     	global	main@estado
  1488                           main@estado:	; 2 bytes @ 0xA
  1489  003F                     	ds	2
  1490  003F                     	global	main@rest
  1491                           main@rest:	; 1 bytes @ 0xC
  1492  0041                     	ds	1
  1493  0041                     ;!
  1494                           ;!Data Sizes:
  1495                           ;!    Strings     0
  1496                           ;!    Constant    16
  1497                           ;!    Data        0
  1498                           ;!    BSS         23
  1499                           ;!    Persistent  0
  1500                           ;!    Stack       0
  1501                           ;!
  1502                           ;!Auto Spaces:
  1503                           ;!    Space          Size  Autos    Used
  1504                           ;!    COMMON           14     12      14
  1505                           ;!    BANK0            80     13      34
  1506                           ;!    BANK1            80      0       0
  1507                           ;!    BANK3            96      0       0
  1508                           ;!    BANK2            96      0       0
  1509                           
  1510                           ;!
  1511                           ;!Pointer List with Targets:
  1512                           ;!
  1513                           ;!    writeLCD@ptr	PTR const unsigned char  size(1) Largest target is 16
  1514                           ;!		 -> fifo(BANK0[16]), 
  1515                           ;!
  1516                           ;!    initSerialIO@ptrOut	PTR unsigned char  size(1) Largest target is 1
  1517                           ;!		 -> main@atuador(BANK0[1]), 
  1518                           ;!
  1519                           ;!    initSerialIO@ptrIn	PTR unsigned char  size(1) Largest target is 1
  1520                           ;!		 -> main@sensor(BANK0[1]), 
  1521                           ;!
  1522                           ;!    ptrSerialOut	PTR unsigned char  size(1) Largest target is 1
  1523                           ;!		 -> NULL(NULL[0]), main@atuador(BANK0[1]), 
  1524                           ;!
  1525                           ;!    ptrSerialIn	PTR unsigned char  size(1) Largest target is 1
  1526                           ;!		 -> NULL(NULL[0]), main@sensor(BANK0[1]), 
  1527                           ;!
  1528                           ;!    sp__displayFIFO	PTR void  size(1) Largest target is 16
  1529                           ;!		 -> fifo(BANK0[16]), 
  1530                           ;!
  1531                           
  1532                           
  1533                           ;!
  1534                           ;!Critical Paths under _main in COMMON
  1535                           ;!
  1536                           ;!    _main->_writeLCD
  1537                           ;!    _writeLCD->_gotoxy
  1538                           ;!    _gotoxy->_cmdLCD
  1539                           ;!    _serialIOscan->_serialIObyteShift
  1540                           ;!    _initLCD->_cmdLCD
  1541                           ;!    _clearLCD->_cmdLCD
  1542                           ;!
  1543                           ;!Critical Paths under _main in BANK0
  1544                           ;!
  1545                           ;!    None.
  1546                           ;!
  1547                           ;!Critical Paths under _main in BANK1
  1548                           ;!
  1549                           ;!    None.
  1550                           ;!
  1551                           ;!Critical Paths under _main in BANK3
  1552                           ;!
  1553                           ;!    None.
  1554                           ;!
  1555                           ;!Critical Paths under _main in BANK2
  1556                           ;!
  1557                           ;!    None.
  1558                           
  1559 ;;
  1560 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1561 ;;
  1562                           
  1563                           ;!
  1564                           ;!Call Graph Tables:
  1565                           ;!
  1566                           ;! ---------------------------------------------------------------------------------
  1567                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1568                           ;! ---------------------------------------------------------------------------------
  1569                           ;! (0) _main                                                13    13      0    2726
  1570                           ;!                                              0 BANK0     13    13      0
  1571                           ;!                           _clearLCD
  1572                           ;!                         _currentKey
  1573                           ;!                            _delFIFO
  1574                           ;!                        _displayFIFO
  1575                           ;!                            _getFIFO
  1576                           ;!                       _initKeyboard
  1577                           ;!                            _initLCD
  1578                           ;!                       _initSerialIO
  1579                           ;!                       _keyboardScan
  1580                           ;!                        _previousKey
  1581                           ;!                            _putFIFO
  1582                           ;!                       _serialIOscan
  1583                           ;!                           _writeLCD
  1584                           ;! ---------------------------------------------------------------------------------
  1585                           ;! (1) _writeLCD                                             4     2      2     605
  1586                           ;!                                              8 COMMON     4     2      2
  1587                           ;!                        _displayFIFO (ARG)
  1588                           ;!                             _gotoxy
  1589                           ;!                             _putLCD
  1590                           ;! ---------------------------------------------------------------------------------
  1591                           ;! (2) _putLCD                                               4     4      0      67
  1592                           ;!                                              0 COMMON     4     4      0
  1593                           ;! ---------------------------------------------------------------------------------
  1594                           ;! (2) _gotoxy                                               4     3      1     297
  1595                           ;!                                              4 COMMON     4     3      1
  1596                           ;!                             _cmdLCD
  1597                           ;! ---------------------------------------------------------------------------------
  1598                           ;! (1) _serialIOscan                                         5     5      0     205
  1599                           ;!                                              4 COMMON     5     5      0
  1600                           ;!                  _serialIObyteShift
  1601                           ;!                       _serialIOload
  1602                           ;! ---------------------------------------------------------------------------------
  1603                           ;! (2) _serialIOload                                         0     0      0       0
  1604                           ;! ---------------------------------------------------------------------------------
  1605                           ;! (2) _serialIObyteShift                                    4     4      0     114
  1606                           ;!                                              0 COMMON     4     4      0
  1607                           ;! ---------------------------------------------------------------------------------
  1608                           ;! (1) _putFIFO                                              2     2      0      22
  1609                           ;!                                              0 COMMON     2     2      0
  1610                           ;! ---------------------------------------------------------------------------------
  1611                           ;! (1) _previousKey                                          0     0      0       0
  1612                           ;! ---------------------------------------------------------------------------------
  1613                           ;! (2) _keyboardScan                                        11    11      0     210
  1614                           ;!                                              0 COMMON    11    11      0
  1615                           ;! ---------------------------------------------------------------------------------
  1616                           ;! (1) _initSerialIO                                         4     2      2     251
  1617                           ;!                                              0 COMMON     4     2      2
  1618                           ;! ---------------------------------------------------------------------------------
  1619                           ;! (1) _initLCD                                              2     2      0     177
  1620                           ;!                                              4 COMMON     2     2      0
  1621                           ;!                             _cmdLCD
  1622                           ;! ---------------------------------------------------------------------------------
  1623                           ;! (1) _initKeyboard                                         0     0      0       0
  1624                           ;! ---------------------------------------------------------------------------------
  1625                           ;! (1) _getFIFO                                              2     2      0      24
  1626                           ;!                                              0 COMMON     2     2      0
  1627                           ;! ---------------------------------------------------------------------------------
  1628                           ;! (1) _displayFIFO                                          0     0      0       0
  1629                           ;! ---------------------------------------------------------------------------------
  1630                           ;! (1) _delFIFO                                              3     3      0      46
  1631                           ;!                                              0 COMMON     3     3      0
  1632                           ;! ---------------------------------------------------------------------------------
  1633                           ;! (1) _currentKey                                           0     0      0       0
  1634                           ;! ---------------------------------------------------------------------------------
  1635                           ;! (1) _clearLCD                                             0     0      0     177
  1636                           ;!                             _cmdLCD
  1637                           ;! ---------------------------------------------------------------------------------
  1638                           ;! (3) _cmdLCD                                               4     4      0     177
  1639                           ;!                                              0 COMMON     4     4      0
  1640                           ;! ---------------------------------------------------------------------------------
  1641                           ;! Estimated maximum stack depth 3
  1642                           ;! ---------------------------------------------------------------------------------
  1643                           ;!
  1644                           ;! Call Graph Graphs:
  1645                           ;!
  1646                           ;! _main (ROOT)
  1647                           ;!   _clearLCD
  1648                           ;!     _cmdLCD
  1649                           ;!   _currentKey
  1650                           ;!   _delFIFO
  1651                           ;!   _displayFIFO
  1652                           ;!   _getFIFO
  1653                           ;!   _initKeyboard
  1654                           ;!   _initLCD
  1655                           ;!     _cmdLCD
  1656                           ;!   _initSerialIO
  1657                           ;!   _keyboardScan
  1658                           ;!   _previousKey
  1659                           ;!   _putFIFO
  1660                           ;!   _serialIOscan
  1661                           ;!     _serialIObyteShift
  1662                           ;!     _serialIOload
  1663                           ;!   _writeLCD
  1664                           ;!     _displayFIFO (ARG)
  1665                           ;!     _gotoxy (ARG)
  1666                           ;!       _cmdLCD
  1667                           ;!     _putLCD (ARG)
  1668                           ;!
  1669                           
  1670                           ;! Address spaces:
  1671                           
  1672                           ;!Name               Size   Autos  Total    Cost      Usage
  1673                           ;!BITCOMMON            E      0       0       0        0.0%
  1674                           ;!EEDATA             100      0       0       0        0.0%
  1675                           ;!NULL                 0      0       0       0        0.0%
  1676                           ;!CODE                 0      0       0       0        0.0%
  1677                           ;!COMMON               E      C       E       1      100.0%
  1678                           ;!BITSFR0              0      0       0       1        0.0%
  1679                           ;!SFR0                 0      0       0       1        0.0%
  1680                           ;!BITSFR1              0      0       0       2        0.0%
  1681                           ;!SFR1                 0      0       0       2        0.0%
  1682                           ;!STACK                0      0       0       2        0.0%
  1683                           ;!ABS                  0      0      30       3        0.0%
  1684                           ;!BITBANK0            50      0       0       4        0.0%
  1685                           ;!BITSFR3              0      0       0       4        0.0%
  1686                           ;!SFR3                 0      0       0       4        0.0%
  1687                           ;!BANK0               50      D      22       5       42.5%
  1688                           ;!BITSFR2              0      0       0       5        0.0%
  1689                           ;!SFR2                 0      0       0       5        0.0%
  1690                           ;!BITBANK1            50      0       0       6        0.0%
  1691                           ;!BANK1               50      0       0       7        0.0%
  1692                           ;!BITBANK3            60      0       0       8        0.0%
  1693                           ;!BANK3               60      0       0       9        0.0%
  1694                           ;!BITBANK2            60      0       0      10        0.0%
  1695                           ;!BANK2               60      0       0      11        0.0%
  1696                           ;!DATA                 0      0      30      12        0.0%
  1697                           
  1698                           	global	_main
  1699                           
  1700 ;; *************** function _main *****************
  1701 ;; Defined at:
  1702 ;;		line 48 in file "main.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  estado          2   10[BANK0 ] int 
  1707 ;;  rest            1   12[BANK0 ] unsigned char 
  1708 ;;  tecla           1    9[BANK0 ] unsigned char 
  1709 ;;  sensor          1    8[BANK0 ] struct .
  1710 ;;  atuador         1    7[BANK0 ] struct .
  1711 ;;  d               1    6[BANK0 ] unsigned char 
  1712 ;;  c               1    5[BANK0 ] unsigned char 
  1713 ;;  b               1    4[BANK0 ] unsigned char 
  1714 ;;  a               1    3[BANK0 ] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : B00/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1724 ;;      Params:         0       0       0       0       0
  1725 ;;      Locals:         0      10       0       0       0
  1726 ;;      Temps:          0       3       0       0       0
  1727 ;;      Totals:         0      13       0       0       0
  1728 ;;Total ram usage:       13 bytes
  1729 ;; Hardware stack levels required when called:    3
  1730 ;; This function calls:
  1731 ;;		_clearLCD
  1732 ;;		_currentKey
  1733 ;;		_delFIFO
  1734 ;;		_displayFIFO
  1735 ;;		_getFIFO
  1736 ;;		_initKeyboard
  1737 ;;		_initLCD
  1738 ;;		_initSerialIO
  1739 ;;		_keyboardScan
  1740 ;;		_previousKey
  1741 ;;		_putFIFO
  1742 ;;		_serialIOscan
  1743 ;;		_writeLCD
  1744 ;; This function is called by:
  1745 ;;		Startup code after reset
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
  1749                           	file	"main.c"
  1750                           	line	48
  1751                           global __pmaintext
  1752                           __pmaintext:	;psect for function _main
  1753  03B7                     psect	maintext
  1754                           	file	"main.c"
  1755                           	line	48
  1756                           	global	__size_of_main
  1757                           	__size_of_main	equ	__end_of_main-_main
  1758  043A                     	
  1759                           _main:	
  1760  03B7                     ;incstack = 0
  1761                           	opt	stack 5
  1762                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1763                           	line	50
  1764                           	
  1765                           l1724:	
  1766  03B7                     ;main.c: 50:     unsigned char tecla = 0;
  1767                           	bcf	status, 5	;RP0=0, select bank0
  1768  03B7  1283               	bcf	status, 6	;RP1=0, select bank0
  1769  03B8  1303               	clrf	(main@tecla)
  1770  03B9  01BE               	line	51
  1771                           ;main.c: 51:     unsigned char a,b,c,d = 0;
  1772                           	clrf	(main@d)
  1773  03BA  01BB               	line	52
  1774                           ;main.c: 52:     unsigned char rest = 0;
  1775                           	clrf	(main@rest)
  1776  03BB  01C1               	line	55
  1777                           ;main.c: 53:     SENSORESbits_t sensor;;main.c: 54:     ATUADORESbits_t atuador;;main.c:
                                  55:     int estado = 0;
  1778                           	clrf	(main@estado)
  1779  03BC  01BF               	clrf	(main@estado+1)
  1780  03BD  01C0               	line	58
  1781                           	
  1782                           l1726:	
  1783  03BE                     ;main.c: 58:     initLCD();
  1784                           	fcall	_initLCD
  1785  03BE  120A  118A  229A  120A  118A  	line	59
  1786                           	
  1787                           l1728:	
  1788  03C3                     ;main.c: 59:     initKeyboard();
  1789                           	fcall	_initKeyboard
  1790  03C3  120A  118A  2143  120A  118A  	line	60
  1791                           	
  1792                           l1730:	
  1793  03C8                     ;main.c: 60:     initSerialIO( &sensor, &atuador, 1 );
  1794                           	movlw	(low(main@atuador|((0x0)<<8)))&0ffh
  1795  03C8  303C               	bcf	status, 5	;RP0=0, select bank0
  1796  03C9  1283               	bcf	status, 6	;RP1=0, select bank0
  1797  03CA  1303               	movwf	(??_main+0)+0
  1798  03CB  00B5               	movf	(??_main+0)+0,w
  1799  03CC  0835               	movwf	(initSerialIO@ptrOut)
  1800  03CD  00F0               	clrf	(initSerialIO@length)
  1801  03CE  01F1               	incf	(initSerialIO@length),f
  1802  03CF  0AF1               	movlw	(low(main@sensor|((0x0)<<8)))&0ffh
  1803  03D0  303D               	fcall	_initSerialIO
  1804  03D1  120A  118A  21F5  120A  118A  	goto	l1732
  1805  03D6  2BD7               	line	62
  1806                           ;main.c: 62:     while( 1 )
  1807                           	
  1808                           l95:	
  1809  03D7                     	line	64
  1810                           	
  1811                           l1732:	
  1812  03D7                     ;main.c: 63:     {;main.c: 64:         keyboardScan();
  1813                           	fcall	_keyboardScan
  1814  03D7  120A  118A  2338  120A  118A  	line	65
  1815                           ;main.c: 65:         switch( estado )
  1816                           	goto	l1874
  1817  03DC  2E25               	line	67
  1818                           ;main.c: 66:         {;main.c: 67:             case 0:
  1819                           	
  1820                           l97:	
  1821  03DD                     	line	69
  1822                           ;main.c: 69:                     break;
  1823                           	goto	l1876
  1824  03DD  2E9F               	line	70
  1825                           ;main.c: 70:             case 10:
  1826                           	
  1827                           l99:	
  1828  03DE                     	line	71
  1829                           	
  1830                           l1734:	
  1831  03DE                     ;main.c: 71:                     rest = getFIFO();
  1832                           	fcall	_getFIFO
  1833  03DE  120A  118A  2156  120A  118A  	bcf	status, 5	;RP0=0, select bank0
  1834  03E3  1283               	bcf	status, 6	;RP1=0, select bank0
  1835  03E4  1303               	movwf	(??_main+0)+0
  1836  03E5  00B5               	movf	(??_main+0)+0,w
  1837  03E6  0835               	movwf	(main@rest)
  1838  03E7  00C1               	line	72
  1839                           	
  1840                           l1736:	
  1841  03E8                     ;main.c: 72:                     if( rest == 'A' )
  1842                           		movlw	65
  1843  03E8  3041               	xorwf	((main@rest)),w
  1844  03E9  0641               	btfss	status,2
  1845  03EA  1D03               	goto	u761
  1846  03EB  2BED               	goto	u760
  1847  03EC  2BEE               u761:
  1848  03ED                     	goto	l1740
  1849  03ED  2BF3               u760:
  1850  03EE                     	line	73
  1851                           	
  1852                           l1738:	
  1853  03EE                     ;main.c: 73:                         estado = 100;
  1854                           	movlw	064h
  1855  03EE  3064               	movwf	(main@estado)
  1856  03EF  00BF               	movlw	0
  1857  03F0  3000               	movwf	((main@estado))+1
  1858  03F1  00C0               	goto	l1876
  1859  03F2  2E9F               	line	74
  1860                           ;main.c: 74:                     else if( rest == 'B' )
  1861                           	
  1862                           l100:	
  1863  03F3                     	
  1864                           l1740:	
  1865  03F3                     		movlw	66
  1866  03F3  3042               	xorwf	((main@rest)),w
  1867  03F4  0641               	btfss	status,2
  1868  03F5  1D03               	goto	u771
  1869  03F6  2BF8               	goto	u770
  1870  03F7  2BF9               u771:
  1871  03F8                     	goto	l1744
  1872  03F8  2BFE               u770:
  1873  03F9                     	line	75
  1874                           	
  1875                           l1742:	
  1876  03F9                     ;main.c: 75:                         estado = 110;
  1877                           	movlw	06Eh
  1878  03F9  306E               	movwf	(main@estado)
  1879  03FA  00BF               	movlw	0
  1880  03FB  3000               	movwf	((main@estado))+1
  1881  03FC  00C0               	goto	l1876
  1882  03FD  2E9F               	line	76
  1883                           ;main.c: 76:                     else if( rest == 'C' )
  1884                           	
  1885                           l102:	
  1886  03FE                     	
  1887                           l1744:	
  1888  03FE                     		movlw	67
  1889  03FE  3043               	xorwf	((main@rest)),w
  1890  03FF  0641               	btfss	status,2
  1891  0400  1D03               	goto	u781
  1892  0401  2C03               	goto	u780
  1893  0402  2C04               u781:
  1894  0403                     	goto	l1748
  1895  0403  2C09               u780:
  1896  0404                     	line	77
  1897                           	
  1898                           l1746:	
  1899  0404                     ;main.c: 77:                         estado = 120;
  1900                           	movlw	078h
  1901  0404  3078               	movwf	(main@estado)
  1902  0405  00BF               	movlw	0
  1903  0406  3000               	movwf	((main@estado))+1
  1904  0407  00C0               	goto	l1876
  1905  0408  2E9F               	line	78
  1906                           ;main.c: 78:                     else if( rest == 'D' )
  1907                           	
  1908                           l104:	
  1909  0409                     	
  1910                           l1748:	
  1911  0409                     		movlw	68
  1912  0409  3044               	xorwf	((main@rest)),w
  1913  040A  0641               	btfss	status,2
  1914  040B  1D03               	goto	u791
  1915  040C  2C0E               	goto	u790
  1916  040D  2C0F               u791:
  1917  040E                     	goto	l1752
  1918  040E  2C14               u790:
  1919  040F                     	line	79
  1920                           	
  1921                           l1750:	
  1922  040F                     ;main.c: 79:                         estado = 130;
  1923                           	movlw	082h
  1924  040F  3082               	movwf	(main@estado)
  1925  0410  00BF               	movlw	0
  1926  0411  3000               	movwf	((main@estado))+1
  1927  0412  00C0               	goto	l1876
  1928  0413  2E9F               	line	80
  1929                           ;main.c: 80:                     else if( rest == '1' )
  1930                           	
  1931                           l106:	
  1932  0414                     	
  1933                           l1752:	
  1934  0414                     		movlw	49
  1935  0414  3031               	xorwf	((main@rest)),w
  1936  0415  0641               	btfss	status,2
  1937  0416  1D03               	goto	u801
  1938  0417  2C19               	goto	u800
  1939  0418  2C1A               u801:
  1940  0419                     	goto	l1756
  1941  0419  2C1F               u800:
  1942  041A                     	line	81
  1943                           	
  1944                           l1754:	
  1945  041A                     ;main.c: 81:                         estado = 140;
  1946                           	movlw	08Ch
  1947  041A  308C               	movwf	(main@estado)
  1948  041B  00BF               	movlw	0
  1949  041C  3000               	movwf	((main@estado))+1
  1950  041D  00C0               	goto	l1876
  1951  041E  2E9F               	line	82
  1952                           ;main.c: 82:                     else if( rest == '2' )
  1953                           	
  1954                           l108:	
  1955  041F                     	
  1956                           l1756:	
  1957  041F                     		movlw	50
  1958  041F  3032               	xorwf	((main@rest)),w
  1959  0420  0641               	btfss	status,2
  1960  0421  1D03               	goto	u811
  1961  0422  2C24               	goto	u810
  1962  0423  2C25               u811:
  1963  0424                     	goto	l1760
  1964  0424  2C2A               u810:
  1965  0425                     	line	83
  1966                           	
  1967                           l1758:	
  1968  0425                     ;main.c: 83:                         estado = 150;
  1969                           	movlw	096h
  1970  0425  3096               	movwf	(main@estado)
  1971  0426  00BF               	movlw	0
  1972  0427  3000               	movwf	((main@estado))+1
  1973  0428  00C0               	goto	l1876
  1974  0429  2E9F               	line	84
  1975                           ;main.c: 84:                     else if( rest == '3' )
  1976                           	
  1977                           l110:	
  1978  042A                     	
  1979                           l1760:	
  1980  042A                     		movlw	51
  1981  042A  3033               	xorwf	((main@rest)),w
  1982  042B  0641               	btfss	status,2
  1983  042C  1D03               	goto	u821
  1984  042D  2C2F               	goto	u820
  1985  042E  2C30               u821:
  1986  042F                     	goto	l1764
  1987  042F  2C35               u820:
  1988  0430                     	line	85
  1989                           	
  1990                           l1762:	
  1991  0430                     ;main.c: 85:                         estado = 160;
  1992                           	movlw	0A0h
  1993  0430  30A0               	movwf	(main@estado)
  1994  0431  00BF               	movlw	0
  1995  0432  3000               	movwf	((main@estado))+1
  1996  0433  00C0               	goto	l1876
  1997  0434  2E9F               	line	86
  1998                           ;main.c: 86:                     else if( rest == '4' )
  1999                           	
  2000                           l112:	
  2001  0435                     	
  2002                           l1764:	
  2003  0435                     		movlw	52
  2004  0435  3034               	xorwf	((main@rest)),w
  2005  0436  0641               	btfss	status,2
  2006  0437  1D03               	goto	u831
  2007  0438  2C3A               	goto	u830
  2008  0439  2C3B               u831:
  2009  043A                     	goto	l1768
  2010  043A  2C40               u830:
  2011  043B                     	line	87
  2012                           	
  2013                           l1766:	
  2014  043B                     ;main.c: 87:                         estado = 170;
  2015                           	movlw	0AAh
  2016  043B  30AA               	movwf	(main@estado)
  2017  043C  00BF               	movlw	0
  2018  043D  3000               	movwf	((main@estado))+1
  2019  043E  00C0               	goto	l1876
  2020  043F  2E9F               	line	88
  2021                           ;main.c: 88:                     else if( rest == '5' )
  2022                           	
  2023                           l114:	
  2024  0440                     	
  2025                           l1768:	
  2026  0440                     		movlw	53
  2027  0440  3035               	xorwf	((main@rest)),w
  2028  0441  0641               	btfss	status,2
  2029  0442  1D03               	goto	u841
  2030  0443  2C45               	goto	u840
  2031  0444  2C46               u841:
  2032  0445                     	goto	l1772
  2033  0445  2C4B               u840:
  2034  0446                     	line	89
  2035                           	
  2036                           l1770:	
  2037  0446                     ;main.c: 89:                         estado = 180;
  2038                           	movlw	0B4h
  2039  0446  30B4               	movwf	(main@estado)
  2040  0447  00BF               	movlw	0
  2041  0448  3000               	movwf	((main@estado))+1
  2042  0449  00C0               	goto	l1876
  2043  044A  2E9F               	line	90
  2044                           ;main.c: 90:                     else if( rest == '6' )
  2045                           	
  2046                           l116:	
  2047  044B                     	
  2048                           l1772:	
  2049  044B                     		movlw	54
  2050  044B  3036               	xorwf	((main@rest)),w
  2051  044C  0641               	btfss	status,2
  2052  044D  1D03               	goto	u851
  2053  044E  2C50               	goto	u850
  2054  044F  2C51               u851:
  2055  0450                     	goto	l1776
  2056  0450  2C56               u850:
  2057  0451                     	line	91
  2058                           	
  2059                           l1774:	
  2060  0451                     ;main.c: 91:                         estado = 190;
  2061                           	movlw	0BEh
  2062  0451  30BE               	movwf	(main@estado)
  2063  0452  00BF               	movlw	0
  2064  0453  3000               	movwf	((main@estado))+1
  2065  0454  00C0               	goto	l1876
  2066  0455  2E9F               	line	92
  2067                           ;main.c: 92:                     else if( rest == '7' )
  2068                           	
  2069                           l118:	
  2070  0456                     	
  2071                           l1776:	
  2072  0456                     		movlw	55
  2073  0456  3037               	xorwf	((main@rest)),w
  2074  0457  0641               	btfss	status,2
  2075  0458  1D03               	goto	u861
  2076  0459  2C5B               	goto	u860
  2077  045A  2C5C               u861:
  2078  045B                     	goto	l1780
  2079  045B  2C61               u860:
  2080  045C                     	line	93
  2081                           	
  2082                           l1778:	
  2083  045C                     ;main.c: 93:                         estado = 200;
  2084                           	movlw	0C8h
  2085  045C  30C8               	movwf	(main@estado)
  2086  045D  00BF               	movlw	0
  2087  045E  3000               	movwf	((main@estado))+1
  2088  045F  00C0               	goto	l1876
  2089  0460  2E9F               	line	94
  2090                           ;main.c: 94:                     else if( rest == '8' )
  2091                           	
  2092                           l120:	
  2093  0461                     	
  2094                           l1780:	
  2095  0461                     		movlw	56
  2096  0461  3038               	xorwf	((main@rest)),w
  2097  0462  0641               	btfss	status,2
  2098  0463  1D03               	goto	u871
  2099  0464  2C66               	goto	u870
  2100  0465  2C67               u871:
  2101  0466                     	goto	l1784
  2102  0466  2C6C               u870:
  2103  0467                     	line	95
  2104                           	
  2105                           l1782:	
  2106  0467                     ;main.c: 95:                         estado = 210;
  2107                           	movlw	0D2h
  2108  0467  30D2               	movwf	(main@estado)
  2109  0468  00BF               	movlw	0
  2110  0469  3000               	movwf	((main@estado))+1
  2111  046A  00C0               	goto	l1876
  2112  046B  2E9F               	line	96
  2113                           ;main.c: 96:                     else if( rest == '9' )
  2114                           	
  2115                           l122:	
  2116  046C                     	
  2117                           l1784:	
  2118  046C                     		movlw	57
  2119  046C  3039               	xorwf	((main@rest)),w
  2120  046D  0641               	btfss	status,2
  2121  046E  1D03               	goto	u881
  2122  046F  2C71               	goto	u880
  2123  0470  2C72               u881:
  2124  0471                     	goto	l1788
  2125  0471  2C77               u880:
  2126  0472                     	line	97
  2127                           	
  2128                           l1786:	
  2129  0472                     ;main.c: 97:                         estado = 220;
  2130                           	movlw	0DCh
  2131  0472  30DC               	movwf	(main@estado)
  2132  0473  00BF               	movlw	0
  2133  0474  3000               	movwf	((main@estado))+1
  2134  0475  00C0               	goto	l1876
  2135  0476  2E9F               	line	98
  2136                           ;main.c: 98:                     else if( rest == 'a' )
  2137                           	
  2138                           l124:	
  2139  0477                     	
  2140                           l1788:	
  2141  0477                     		movlw	97
  2142  0477  3061               	xorwf	((main@rest)),w
  2143  0478  0641               	btfss	status,2
  2144  0479  1D03               	goto	u891
  2145  047A  2C7C               	goto	u890
  2146  047B  2C7D               u891:
  2147  047C                     	goto	l1792
  2148  047C  2C82               u890:
  2149  047D                     	line	99
  2150                           	
  2151                           l1790:	
  2152  047D                     ;main.c: 99:                         estado = 230;
  2153                           	movlw	0E6h
  2154  047D  30E6               	movwf	(main@estado)
  2155  047E  00BF               	movlw	0
  2156  047F  3000               	movwf	((main@estado))+1
  2157  0480  00C0               	goto	l1876
  2158  0481  2E9F               	line	100
  2159                           ;main.c: 100:                     else if( rest == 'b' )
  2160                           	
  2161                           l126:	
  2162  0482                     	
  2163                           l1792:	
  2164  0482                     		movlw	98
  2165  0482  3062               	xorwf	((main@rest)),w
  2166  0483  0641               	btfss	status,2
  2167  0484  1D03               	goto	u901
  2168  0485  2C87               	goto	u900
  2169  0486  2C88               u901:
  2170  0487                     	goto	l1796
  2171  0487  2C8D               u900:
  2172  0488                     	line	101
  2173                           	
  2174                           l1794:	
  2175  0488                     ;main.c: 101:                         estado = 240;
  2176                           	movlw	0F0h
  2177  0488  30F0               	movwf	(main@estado)
  2178  0489  00BF               	movlw	0
  2179  048A  3000               	movwf	((main@estado))+1
  2180  048B  00C0               	goto	l1876
  2181  048C  2E9F               	line	102
  2182                           ;main.c: 102:                     else if( rest == 'c' )
  2183                           	
  2184                           l128:	
  2185  048D                     	
  2186                           l1796:	
  2187  048D                     		movlw	99
  2188  048D  3063               	xorwf	((main@rest)),w
  2189  048E  0641               	btfss	status,2
  2190  048F  1D03               	goto	u911
  2191  0490  2C92               	goto	u910
  2192  0491  2C93               u911:
  2193  0492                     	goto	l1800
  2194  0492  2C98               u910:
  2195  0493                     	line	103
  2196                           	
  2197                           l1798:	
  2198  0493                     ;main.c: 103:                         estado = 250;
  2199                           	movlw	0FAh
  2200  0493  30FA               	movwf	(main@estado)
  2201  0494  00BF               	movlw	0
  2202  0495  3000               	movwf	((main@estado))+1
  2203  0496  00C0               	goto	l1876
  2204  0497  2E9F               	line	104
  2205                           ;main.c: 104:                     else if( rest == 'd' )
  2206                           	
  2207                           l130:	
  2208  0498                     	
  2209                           l1800:	
  2210  0498                     		movlw	100
  2211  0498  3064               	xorwf	((main@rest)),w
  2212  0499  0641               	btfss	status,2
  2213  049A  1D03               	goto	u921
  2214  049B  2C9D               	goto	u920
  2215  049C  2C9E               u921:
  2216  049D                     	goto	l1876
  2217  049D  2E9F               u920:
  2218  049E                     	line	105
  2219                           	
  2220                           l1802:	
  2221  049E                     ;main.c: 105:                         estado = 260;
  2222                           	movlw	04h
  2223  049E  3004               	movwf	(main@estado)
  2224  049F  00BF               	movlw	01h
  2225  04A0  3001               	movwf	((main@estado))+1
  2226  04A1  00C0               	goto	l1876
  2227  04A2  2E9F               	
  2228                           l132:	
  2229  04A3                     	goto	l1876
  2230  04A3  2E9F               	
  2231                           l131:	
  2232  04A4                     	goto	l1876
  2233  04A4  2E9F               	
  2234                           l129:	
  2235  04A5                     	goto	l1876
  2236  04A5  2E9F               	
  2237                           l127:	
  2238  04A6                     	goto	l1876
  2239  04A6  2E9F               	
  2240                           l125:	
  2241  04A7                     	goto	l1876
  2242  04A7  2E9F               	
  2243                           l123:	
  2244  04A8                     	goto	l1876
  2245  04A8  2E9F               	
  2246                           l121:	
  2247  04A9                     	goto	l1876
  2248  04A9  2E9F               	
  2249                           l119:	
  2250  04AA                     	goto	l1876
  2251  04AA  2E9F               	
  2252                           l117:	
  2253  04AB                     	goto	l1876
  2254  04AB  2E9F               	
  2255                           l115:	
  2256  04AC                     	goto	l1876
  2257  04AC  2E9F               	
  2258                           l113:	
  2259  04AD                     	goto	l1876
  2260  04AD  2E9F               	
  2261                           l111:	
  2262  04AE                     	goto	l1876
  2263  04AE  2E9F               	
  2264                           l109:	
  2265  04AF                     	goto	l1876
  2266  04AF  2E9F               	
  2267                           l107:	
  2268  04B0                     	goto	l1876
  2269  04B0  2E9F               	
  2270                           l105:	
  2271  04B1                     	goto	l1876
  2272  04B1  2E9F               	
  2273                           l103:	
  2274  04B2                     	goto	l1876
  2275  04B2  2E9F               	
  2276                           l101:	
  2277  04B3                     	line	106
  2278                           ;main.c: 106:                     break;
  2279                           	goto	l1876
  2280  04B3  2E9F               	line	107
  2281                           ;main.c: 107:             case 100:
  2282                           	
  2283                           l133:	
  2284  04B4                     	line	108
  2285                           ;main.c: 108:                     atuador.A = 1;
  2286                           	bsf	(main@atuador),0
  2287  04B4  143C               	line	109
  2288                           	
  2289                           l1804:	
  2290  04B5                     ;main.c: 109:                     estado = 101;
  2291                           	movlw	065h
  2292  04B5  3065               	movwf	(main@estado)
  2293  04B6  00BF               	movlw	0
  2294  04B7  3000               	movwf	((main@estado))+1
  2295  04B8  00C0               	line	110
  2296                           ;main.c: 110:                     break;
  2297                           	goto	l1876
  2298  04B9  2E9F               	line	111
  2299                           ;main.c: 111:             case 101:
  2300                           	
  2301                           l134:	
  2302  04BA                     	line	112
  2303                           ;main.c: 112:                     if( sensor.A1 == 1)
  2304                           	btfss	(main@sensor),1
  2305  04BA  1CBD               	goto	u931
  2306  04BB  2CBD               	goto	u930
  2307  04BC  2CBE               u931:
  2308  04BD                     	goto	l1876
  2309  04BD  2E9F               u930:
  2310  04BE                     	line	113
  2311                           	
  2312                           l1806:	
  2313  04BE                     ;main.c: 113:                         estado = 10;
  2314                           	movlw	0Ah
  2315  04BE  300A               	movwf	(main@estado)
  2316  04BF  00BF               	movlw	0
  2317  04C0  3000               	movwf	((main@estado))+1
  2318  04C1  00C0               	goto	l1876
  2319  04C2  2E9F               	
  2320                           l135:	
  2321  04C3                     	line	114
  2322                           ;main.c: 114:                     break;
  2323                           	goto	l1876
  2324  04C3  2E9F               	line	115
  2325                           ;main.c: 115:             case 110:
  2326                           	
  2327                           l136:	
  2328  04C4                     	line	116
  2329                           ;main.c: 116:                     atuador.B = 1;
  2330                           	bsf	(main@atuador),1
  2331  04C4  14BC               	line	117
  2332                           	
  2333                           l1808:	
  2334  04C5                     ;main.c: 117:                     estado = 111;
  2335                           	movlw	06Fh
  2336  04C5  306F               	movwf	(main@estado)
  2337  04C6  00BF               	movlw	0
  2338  04C7  3000               	movwf	((main@estado))+1
  2339  04C8  00C0               	line	118
  2340                           ;main.c: 118:                     break;
  2341                           	goto	l1876
  2342  04C9  2E9F               	line	119
  2343                           ;main.c: 119:             case 111:
  2344                           	
  2345                           l137:	
  2346  04CA                     	line	120
  2347                           ;main.c: 120:                     if( sensor.B1 == 1)
  2348                           	btfss	(main@sensor),3
  2349  04CA  1DBD               	goto	u941
  2350  04CB  2CCD               	goto	u940
  2351  04CC  2CCE               u941:
  2352  04CD                     	goto	l1876
  2353  04CD  2E9F               u940:
  2354  04CE                     	line	121
  2355                           	
  2356                           l1810:	
  2357  04CE                     ;main.c: 121:                         estado = 10;
  2358                           	movlw	0Ah
  2359  04CE  300A               	movwf	(main@estado)
  2360  04CF  00BF               	movlw	0
  2361  04D0  3000               	movwf	((main@estado))+1
  2362  04D1  00C0               	goto	l1876
  2363  04D2  2E9F               	
  2364                           l138:	
  2365  04D3                     	line	122
  2366                           ;main.c: 122:                     break;
  2367                           	goto	l1876
  2368  04D3  2E9F               	line	123
  2369                           ;main.c: 123:             case 120:
  2370                           	
  2371                           l139:	
  2372  04D4                     	line	124
  2373                           ;main.c: 124:                     atuador.C = 1;
  2374                           	bsf	(main@atuador),2
  2375  04D4  153C               	line	125
  2376                           	
  2377                           l1812:	
  2378  04D5                     ;main.c: 125:                     estado = 121;
  2379                           	movlw	079h
  2380  04D5  3079               	movwf	(main@estado)
  2381  04D6  00BF               	movlw	0
  2382  04D7  3000               	movwf	((main@estado))+1
  2383  04D8  00C0               	line	126
  2384                           ;main.c: 126:                     break;
  2385                           	goto	l1876
  2386  04D9  2E9F               	line	127
  2387                           ;main.c: 127:             case 121:
  2388                           	
  2389                           l140:	
  2390  04DA                     	line	128
  2391                           ;main.c: 128:                     if( sensor.C1 == 1)
  2392                           	btfss	(main@sensor),5
  2393  04DA  1EBD               	goto	u951
  2394  04DB  2CDD               	goto	u950
  2395  04DC  2CDE               u951:
  2396  04DD                     	goto	l1876
  2397  04DD  2E9F               u950:
  2398  04DE                     	line	129
  2399                           	
  2400                           l1814:	
  2401  04DE                     ;main.c: 129:                         estado = 10;
  2402                           	movlw	0Ah
  2403  04DE  300A               	movwf	(main@estado)
  2404  04DF  00BF               	movlw	0
  2405  04E0  3000               	movwf	((main@estado))+1
  2406  04E1  00C0               	goto	l1876
  2407  04E2  2E9F               	
  2408                           l141:	
  2409  04E3                     	line	130
  2410                           ;main.c: 130:                     break;
  2411                           	goto	l1876
  2412  04E3  2E9F               	line	131
  2413                           ;main.c: 131:             case 130:
  2414                           	
  2415                           l142:	
  2416  04E4                     	line	132
  2417                           ;main.c: 132:                     atuador.D = 1;
  2418                           	bsf	(main@atuador),3
  2419  04E4  15BC               	line	133
  2420                           	
  2421                           l1816:	
  2422  04E5                     ;main.c: 133:                     estado = 131;
  2423                           	movlw	083h
  2424  04E5  3083               	movwf	(main@estado)
  2425  04E6  00BF               	movlw	0
  2426  04E7  3000               	movwf	((main@estado))+1
  2427  04E8  00C0               	line	134
  2428                           ;main.c: 134:                     break;
  2429                           	goto	l1876
  2430  04E9  2E9F               	line	135
  2431                           ;main.c: 135:             case 131:
  2432                           	
  2433                           l143:	
  2434  04EA                     	line	136
  2435                           ;main.c: 136:                     if( sensor.D1 == 1)
  2436                           	btfss	(main@sensor),7
  2437  04EA  1FBD               	goto	u961
  2438  04EB  2CED               	goto	u960
  2439  04EC  2CEE               u961:
  2440  04ED                     	goto	l1876
  2441  04ED  2E9F               u960:
  2442  04EE                     	line	137
  2443                           	
  2444                           l1818:	
  2445  04EE                     ;main.c: 137:                         estado = 10;
  2446                           	movlw	0Ah
  2447  04EE  300A               	movwf	(main@estado)
  2448  04EF  00BF               	movlw	0
  2449  04F0  3000               	movwf	((main@estado))+1
  2450  04F1  00C0               	goto	l1876
  2451  04F2  2E9F               	
  2452                           l144:	
  2453  04F3                     	line	138
  2454                           ;main.c: 138:                     break;
  2455                           	goto	l1876
  2456  04F3  2E9F               	line	139
  2457                           ;main.c: 139:             case 140:
  2458                           	
  2459                           l145:	
  2460  04F4                     	line	140
  2461                           	
  2462                           l1820:	
  2463  04F4                     ;main.c: 140:                     _delay((unsigned long)((1000)*(4000000/4000.0)));
  2464                           	opt asmopt_push
  2465                           opt asmopt_off
  2466                           movlw  6
  2467  04F4  3006               	bcf	status, 5	;RP0=0, select bank0
  2468  04F5  1283               	bcf	status, 6	;RP1=0, select bank0
  2469  04F6  1303               movwf	((??_main+0)+0+2),f
  2470  04F7  00B7               movlw	19
  2471  04F8  3013               movwf	((??_main+0)+0+1),f
  2472  04F9  00B6               	movlw	173
  2473  04FA  30AD               movwf	((??_main+0)+0),f
  2474  04FB  00B5               	u1077:
  2475  04FC                     decfsz	((??_main+0)+0),f
  2476  04FC  0BB5               	goto	u1077
  2477  04FD  2CFC               	decfsz	((??_main+0)+0+1),f
  2478  04FE  0BB6               	goto	u1077
  2479  04FF  2CFC               	decfsz	((??_main+0)+0+2),f
  2480  0500  0BB7               	goto	u1077
  2481  0501  2CFC               opt asmopt_pop
  2482                           
  2483                           	line	141
  2484                           ;main.c: 141:                     estado = 141;
  2485                           	movlw	08Dh
  2486  0502  308D               	bcf	status, 5	;RP0=0, select bank0
  2487  0503  1283               	bcf	status, 6	;RP1=0, select bank0
  2488  0504  1303               	movwf	(main@estado)
  2489  0505  00BF               	movlw	0
  2490  0506  3000               	movwf	((main@estado))+1
  2491  0507  00C0               	line	142
  2492                           ;main.c: 142:                     break;
  2493                           	goto	l1876
  2494  0508  2E9F               	line	143
  2495                           ;main.c: 143:             case 141:
  2496                           	
  2497                           l146:	
  2498  0509                     	line	144
  2499                           	
  2500                           l1822:	
  2501  0509                     ;main.c: 144:                     estado = 10;
  2502                           	movlw	0Ah
  2503  0509  300A               	movwf	(main@estado)
  2504  050A  00BF               	movlw	0
  2505  050B  3000               	movwf	((main@estado))+1
  2506  050C  00C0               	line	145
  2507                           ;main.c: 145:                     break;
  2508                           	goto	l1876
  2509  050D  2E9F               	line	146
  2510                           ;main.c: 146:             case 150:
  2511                           	
  2512                           l147:	
  2513  050E                     	line	147
  2514                           	
  2515                           l1824:	
  2516  050E                     ;main.c: 147:                     _delay((unsigned long)((2000)*(4000000/4000.0)));
  2517                           	opt asmopt_push
  2518                           opt asmopt_off
  2519                           movlw  11
  2520  050E  300B               	bcf	status, 5	;RP0=0, select bank0
  2521  050F  1283               	bcf	status, 6	;RP1=0, select bank0
  2522  0510  1303               movwf	((??_main+0)+0+2),f
  2523  0511  00B7               movlw	38
  2524  0512  3026               movwf	((??_main+0)+0+1),f
  2525  0513  00B6               	movlw	93
  2526  0514  305D               movwf	((??_main+0)+0),f
  2527  0515  00B5               	u1087:
  2528  0516                     decfsz	((??_main+0)+0),f
  2529  0516  0BB5               	goto	u1087
  2530  0517  2D16               	decfsz	((??_main+0)+0+1),f
  2531  0518  0BB6               	goto	u1087
  2532  0519  2D16               	decfsz	((??_main+0)+0+2),f
  2533  051A  0BB7               	goto	u1087
  2534  051B  2D16               opt asmopt_pop
  2535                           
  2536                           	line	148
  2537                           ;main.c: 148:                     estado = 151;
  2538                           	movlw	097h
  2539  051C  3097               	bcf	status, 5	;RP0=0, select bank0
  2540  051D  1283               	bcf	status, 6	;RP1=0, select bank0
  2541  051E  1303               	movwf	(main@estado)
  2542  051F  00BF               	movlw	0
  2543  0520  3000               	movwf	((main@estado))+1
  2544  0521  00C0               	line	149
  2545                           ;main.c: 149:                     break;
  2546                           	goto	l1876
  2547  0522  2E9F               	line	150
  2548                           ;main.c: 150:             case 151:
  2549                           	
  2550                           l148:	
  2551  0523                     	line	151
  2552                           	
  2553                           l1826:	
  2554  0523                     ;main.c: 151:                     estado = 10;
  2555                           	movlw	0Ah
  2556  0523  300A               	movwf	(main@estado)
  2557  0524  00BF               	movlw	0
  2558  0525  3000               	movwf	((main@estado))+1
  2559  0526  00C0               	line	152
  2560                           ;main.c: 152:                     break;
  2561                           	goto	l1876
  2562  0527  2E9F               	line	153
  2563                           ;main.c: 153:             case 160:
  2564                           	
  2565                           l149:	
  2566  0528                     	line	154
  2567                           	
  2568                           l1828:	
  2569  0528                     ;main.c: 154:                     _delay((unsigned long)((3000)*(4000000/4000.0)));
  2570                           	opt asmopt_push
  2571                           opt asmopt_off
  2572                           movlw  16
  2573  0528  3010               	bcf	status, 5	;RP0=0, select bank0
  2574  0529  1283               	bcf	status, 6	;RP1=0, select bank0
  2575  052A  1303               movwf	((??_main+0)+0+2),f
  2576  052B  00B7               movlw	57
  2577  052C  3039               movwf	((??_main+0)+0+1),f
  2578  052D  00B6               	movlw	13
  2579  052E  300D               movwf	((??_main+0)+0),f
  2580  052F  00B5               	u1097:
  2581  0530                     decfsz	((??_main+0)+0),f
  2582  0530  0BB5               	goto	u1097
  2583  0531  2D30               	decfsz	((??_main+0)+0+1),f
  2584  0532  0BB6               	goto	u1097
  2585  0533  2D30               	decfsz	((??_main+0)+0+2),f
  2586  0534  0BB7               	goto	u1097
  2587  0535  2D30               opt asmopt_pop
  2588                           
  2589                           	line	155
  2590                           ;main.c: 155:                     estado = 161;
  2591                           	movlw	0A1h
  2592  0536  30A1               	bcf	status, 5	;RP0=0, select bank0
  2593  0537  1283               	bcf	status, 6	;RP1=0, select bank0
  2594  0538  1303               	movwf	(main@estado)
  2595  0539  00BF               	movlw	0
  2596  053A  3000               	movwf	((main@estado))+1
  2597  053B  00C0               	line	156
  2598                           ;main.c: 156:                     break;
  2599                           	goto	l1876
  2600  053C  2E9F               	line	157
  2601                           ;main.c: 157:             case 161:
  2602                           	
  2603                           l150:	
  2604  053D                     	line	158
  2605                           	
  2606                           l1830:	
  2607  053D                     ;main.c: 158:                     estado = 10;
  2608                           	movlw	0Ah
  2609  053D  300A               	movwf	(main@estado)
  2610  053E  00BF               	movlw	0
  2611  053F  3000               	movwf	((main@estado))+1
  2612  0540  00C0               	line	159
  2613                           ;main.c: 159:                     break;
  2614                           	goto	l1876
  2615  0541  2E9F               	line	160
  2616                           ;main.c: 160:             case 170:
  2617                           	
  2618                           l151:	
  2619  0542                     	line	161
  2620                           	
  2621                           l1832:	
  2622  0542                     ;main.c: 161:                     _delay((unsigned long)((4000)*(4000000/4000.0)));
  2623                           	opt asmopt_push
  2624                           opt asmopt_off
  2625                           movlw  21
  2626  0542  3015               	bcf	status, 5	;RP0=0, select bank0
  2627  0543  1283               	bcf	status, 6	;RP1=0, select bank0
  2628  0544  1303               movwf	((??_main+0)+0+2),f
  2629  0545  00B7               movlw	75
  2630  0546  304B               movwf	((??_main+0)+0+1),f
  2631  0547  00B6               	movlw	189
  2632  0548  30BD               movwf	((??_main+0)+0),f
  2633  0549  00B5               	u1107:
  2634  054A                     decfsz	((??_main+0)+0),f
  2635  054A  0BB5               	goto	u1107
  2636  054B  2D4A               	decfsz	((??_main+0)+0+1),f
  2637  054C  0BB6               	goto	u1107
  2638  054D  2D4A               	decfsz	((??_main+0)+0+2),f
  2639  054E  0BB7               	goto	u1107
  2640  054F  2D4A               	nop2
  2641  0550  2D51               opt asmopt_pop
  2642                           
  2643                           	line	162
  2644                           ;main.c: 162:                     estado = 171;
  2645                           	movlw	0ABh
  2646  0551  30AB               	bcf	status, 5	;RP0=0, select bank0
  2647  0552  1283               	bcf	status, 6	;RP1=0, select bank0
  2648  0553  1303               	movwf	(main@estado)
  2649  0554  00BF               	movlw	0
  2650  0555  3000               	movwf	((main@estado))+1
  2651  0556  00C0               	line	163
  2652                           ;main.c: 163:                     break;
  2653                           	goto	l1876
  2654  0557  2E9F               	line	164
  2655                           ;main.c: 164:             case 171:
  2656                           	
  2657                           l152:	
  2658  0558                     	line	165
  2659                           	
  2660                           l1834:	
  2661  0558                     ;main.c: 165:                     estado = 10;
  2662                           	movlw	0Ah
  2663  0558  300A               	movwf	(main@estado)
  2664  0559  00BF               	movlw	0
  2665  055A  3000               	movwf	((main@estado))+1
  2666  055B  00C0               	line	166
  2667                           ;main.c: 166:                     break;
  2668                           	goto	l1876
  2669  055C  2E9F               	line	167
  2670                           ;main.c: 167:             case 180:
  2671                           	
  2672                           l153:	
  2673  055D                     	line	168
  2674                           	
  2675                           l1836:	
  2676  055D                     ;main.c: 168:                     _delay((unsigned long)((5000)*(4000000/4000.0)));
  2677                           	opt asmopt_push
  2678                           opt asmopt_off
  2679                           movlw  26
  2680  055D  301A               	bcf	status, 5	;RP0=0, select bank0
  2681  055E  1283               	bcf	status, 6	;RP1=0, select bank0
  2682  055F  1303               movwf	((??_main+0)+0+2),f
  2683  0560  00B7               movlw	94
  2684  0561  305E               movwf	((??_main+0)+0+1),f
  2685  0562  00B6               	movlw	109
  2686  0563  306D               movwf	((??_main+0)+0),f
  2687  0564  00B5               	u1117:
  2688  0565                     decfsz	((??_main+0)+0),f
  2689  0565  0BB5               	goto	u1117
  2690  0566  2D65               	decfsz	((??_main+0)+0+1),f
  2691  0567  0BB6               	goto	u1117
  2692  0568  2D65               	decfsz	((??_main+0)+0+2),f
  2693  0569  0BB7               	goto	u1117
  2694  056A  2D65               	nop2
  2695  056B  2D6C               opt asmopt_pop
  2696                           
  2697                           	line	169
  2698                           ;main.c: 169:                     estado = 181;
  2699                           	movlw	0B5h
  2700  056C  30B5               	bcf	status, 5	;RP0=0, select bank0
  2701  056D  1283               	bcf	status, 6	;RP1=0, select bank0
  2702  056E  1303               	movwf	(main@estado)
  2703  056F  00BF               	movlw	0
  2704  0570  3000               	movwf	((main@estado))+1
  2705  0571  00C0               	line	170
  2706                           ;main.c: 170:                     break;
  2707                           	goto	l1876
  2708  0572  2E9F               	line	171
  2709                           ;main.c: 171:             case 181:
  2710                           	
  2711                           l154:	
  2712  0573                     	line	172
  2713                           	
  2714                           l1838:	
  2715  0573                     ;main.c: 172:                     estado = 10;
  2716                           	movlw	0Ah
  2717  0573  300A               	movwf	(main@estado)
  2718  0574  00BF               	movlw	0
  2719  0575  3000               	movwf	((main@estado))+1
  2720  0576  00C0               	line	173
  2721                           ;main.c: 173:                     break;
  2722                           	goto	l1876
  2723  0577  2E9F               	line	174
  2724                           ;main.c: 174:             case 190:
  2725                           	
  2726                           l155:	
  2727  0578                     	line	175
  2728                           	
  2729                           l1840:	
  2730  0578                     ;main.c: 175:                     _delay((unsigned long)((6000)*(4000000/4000.0)));
  2731                           	opt asmopt_push
  2732                           opt asmopt_off
  2733                           movlw  31
  2734  0578  301F               	bcf	status, 5	;RP0=0, select bank0
  2735  0579  1283               	bcf	status, 6	;RP1=0, select bank0
  2736  057A  1303               movwf	((??_main+0)+0+2),f
  2737  057B  00B7               movlw	113
  2738  057C  3071               movwf	((??_main+0)+0+1),f
  2739  057D  00B6               	movlw	29
  2740  057E  301D               movwf	((??_main+0)+0),f
  2741  057F  00B5               	u1127:
  2742  0580                     decfsz	((??_main+0)+0),f
  2743  0580  0BB5               	goto	u1127
  2744  0581  2D80               	decfsz	((??_main+0)+0+1),f
  2745  0582  0BB6               	goto	u1127
  2746  0583  2D80               	decfsz	((??_main+0)+0+2),f
  2747  0584  0BB7               	goto	u1127
  2748  0585  2D80               	nop2
  2749  0586  2D87               opt asmopt_pop
  2750                           
  2751                           	line	176
  2752                           ;main.c: 176:                     estado = 191;
  2753                           	movlw	0BFh
  2754  0587  30BF               	bcf	status, 5	;RP0=0, select bank0
  2755  0588  1283               	bcf	status, 6	;RP1=0, select bank0
  2756  0589  1303               	movwf	(main@estado)
  2757  058A  00BF               	movlw	0
  2758  058B  3000               	movwf	((main@estado))+1
  2759  058C  00C0               	line	177
  2760                           ;main.c: 177:                     break;
  2761                           	goto	l1876
  2762  058D  2E9F               	line	178
  2763                           ;main.c: 178:             case 191:
  2764                           	
  2765                           l156:	
  2766  058E                     	line	179
  2767                           	
  2768                           l1842:	
  2769  058E                     ;main.c: 179:                     estado = 10;
  2770                           	movlw	0Ah
  2771  058E  300A               	movwf	(main@estado)
  2772  058F  00BF               	movlw	0
  2773  0590  3000               	movwf	((main@estado))+1
  2774  0591  00C0               	line	180
  2775                           ;main.c: 180:                     break;
  2776                           	goto	l1876
  2777  0592  2E9F               	line	181
  2778                           ;main.c: 181:             case 200:
  2779                           	
  2780                           l157:	
  2781  0593                     	line	182
  2782                           	
  2783                           l1844:	
  2784  0593                     ;main.c: 182:                     _delay((unsigned long)((7000)*(4000000/4000.0)));
  2785                           	opt asmopt_push
  2786                           opt asmopt_off
  2787                           movlw  36
  2788  0593  3024               	bcf	status, 5	;RP0=0, select bank0
  2789  0594  1283               	bcf	status, 6	;RP1=0, select bank0
  2790  0595  1303               movwf	((??_main+0)+0+2),f
  2791  0596  00B7               movlw	131
  2792  0597  3083               movwf	((??_main+0)+0+1),f
  2793  0598  00B6               	movlw	206
  2794  0599  30CE               movwf	((??_main+0)+0),f
  2795  059A  00B5               	u1137:
  2796  059B                     decfsz	((??_main+0)+0),f
  2797  059B  0BB5               	goto	u1137
  2798  059C  2D9B               	decfsz	((??_main+0)+0+1),f
  2799  059D  0BB6               	goto	u1137
  2800  059E  2D9B               	decfsz	((??_main+0)+0+2),f
  2801  059F  0BB7               	goto	u1137
  2802  05A0  2D9B               	nop
  2803  05A1  0000               opt asmopt_pop
  2804                           
  2805                           	line	183
  2806                           ;main.c: 183:                     estado = 201;
  2807                           	movlw	0C9h
  2808  05A2  30C9               	bcf	status, 5	;RP0=0, select bank0
  2809  05A3  1283               	bcf	status, 6	;RP1=0, select bank0
  2810  05A4  1303               	movwf	(main@estado)
  2811  05A5  00BF               	movlw	0
  2812  05A6  3000               	movwf	((main@estado))+1
  2813  05A7  00C0               	line	184
  2814                           ;main.c: 184:                     break;
  2815                           	goto	l1876
  2816  05A8  2E9F               	line	185
  2817                           ;main.c: 185:             case 201:
  2818                           	
  2819                           l158:	
  2820  05A9                     	line	186
  2821                           	
  2822                           l1846:	
  2823  05A9                     ;main.c: 186:                     estado = 10;
  2824                           	movlw	0Ah
  2825  05A9  300A               	movwf	(main@estado)
  2826  05AA  00BF               	movlw	0
  2827  05AB  3000               	movwf	((main@estado))+1
  2828  05AC  00C0               	line	187
  2829                           ;main.c: 187:                     break;
  2830                           	goto	l1876
  2831  05AD  2E9F               	line	188
  2832                           ;main.c: 188:             case 210:
  2833                           	
  2834                           l159:	
  2835  05AE                     	line	189
  2836                           	
  2837                           l1848:	
  2838  05AE                     ;main.c: 189:                     _delay((unsigned long)((8000)*(4000000/4000.0)));
  2839                           	opt asmopt_push
  2840                           opt asmopt_off
  2841                           movlw  41
  2842  05AE  3029               	bcf	status, 5	;RP0=0, select bank0
  2843  05AF  1283               	bcf	status, 6	;RP1=0, select bank0
  2844  05B0  1303               movwf	((??_main+0)+0+2),f
  2845  05B1  00B7               movlw	150
  2846  05B2  3096               movwf	((??_main+0)+0+1),f
  2847  05B3  00B6               	movlw	126
  2848  05B4  307E               movwf	((??_main+0)+0),f
  2849  05B5  00B5               	u1147:
  2850  05B6                     decfsz	((??_main+0)+0),f
  2851  05B6  0BB5               	goto	u1147
  2852  05B7  2DB6               	decfsz	((??_main+0)+0+1),f
  2853  05B8  0BB6               	goto	u1147
  2854  05B9  2DB6               	decfsz	((??_main+0)+0+2),f
  2855  05BA  0BB7               	goto	u1147
  2856  05BB  2DB6               	nop
  2857  05BC  0000               opt asmopt_pop
  2858                           
  2859                           	line	190
  2860                           ;main.c: 190:                     estado = 211;
  2861                           	movlw	0D3h
  2862  05BD  30D3               	bcf	status, 5	;RP0=0, select bank0
  2863  05BE  1283               	bcf	status, 6	;RP1=0, select bank0
  2864  05BF  1303               	movwf	(main@estado)
  2865  05C0  00BF               	movlw	0
  2866  05C1  3000               	movwf	((main@estado))+1
  2867  05C2  00C0               	line	191
  2868                           ;main.c: 191:                     break;
  2869                           	goto	l1876
  2870  05C3  2E9F               	line	192
  2871                           ;main.c: 192:             case 211:
  2872                           	
  2873                           l160:	
  2874  05C4                     	line	193
  2875                           	
  2876                           l1850:	
  2877  05C4                     ;main.c: 193:                     estado = 10;
  2878                           	movlw	0Ah
  2879  05C4  300A               	movwf	(main@estado)
  2880  05C5  00BF               	movlw	0
  2881  05C6  3000               	movwf	((main@estado))+1
  2882  05C7  00C0               	line	194
  2883                           ;main.c: 194:                     break;
  2884                           	goto	l1876
  2885  05C8  2E9F               	line	195
  2886                           ;main.c: 195:             case 220:
  2887                           	
  2888                           l161:	
  2889  05C9                     	line	196
  2890                           	
  2891                           l1852:	
  2892  05C9                     ;main.c: 196:                     _delay((unsigned long)((9000)*(4000000/4000.0)));
  2893                           	opt asmopt_push
  2894                           opt asmopt_off
  2895                           movlw  46
  2896  05C9  302E               	bcf	status, 5	;RP0=0, select bank0
  2897  05CA  1283               	bcf	status, 6	;RP1=0, select bank0
  2898  05CB  1303               movwf	((??_main+0)+0+2),f
  2899  05CC  00B7               movlw	169
  2900  05CD  30A9               movwf	((??_main+0)+0+1),f
  2901  05CE  00B6               	movlw	46
  2902  05CF  302E               movwf	((??_main+0)+0),f
  2903  05D0  00B5               	u1157:
  2904  05D1                     decfsz	((??_main+0)+0),f
  2905  05D1  0BB5               	goto	u1157
  2906  05D2  2DD1               	decfsz	((??_main+0)+0+1),f
  2907  05D3  0BB6               	goto	u1157
  2908  05D4  2DD1               	decfsz	((??_main+0)+0+2),f
  2909  05D5  0BB7               	goto	u1157
  2910  05D6  2DD1               	nop
  2911  05D7  0000               opt asmopt_pop
  2912                           
  2913                           	line	197
  2914                           ;main.c: 197:                     estado = 221;
  2915                           	movlw	0DDh
  2916  05D8  30DD               	bcf	status, 5	;RP0=0, select bank0
  2917  05D9  1283               	bcf	status, 6	;RP1=0, select bank0
  2918  05DA  1303               	movwf	(main@estado)
  2919  05DB  00BF               	movlw	0
  2920  05DC  3000               	movwf	((main@estado))+1
  2921  05DD  00C0               	line	198
  2922                           ;main.c: 198:                     break;
  2923                           	goto	l1876
  2924  05DE  2E9F               	line	199
  2925                           ;main.c: 199:             case 221:
  2926                           	
  2927                           l162:	
  2928  05DF                     	line	200
  2929                           	
  2930                           l1854:	
  2931  05DF                     ;main.c: 200:                     estado = 10;
  2932                           	movlw	0Ah
  2933  05DF  300A               	movwf	(main@estado)
  2934  05E0  00BF               	movlw	0
  2935  05E1  3000               	movwf	((main@estado))+1
  2936  05E2  00C0               	line	201
  2937                           ;main.c: 201:                     break;
  2938                           	goto	l1876
  2939  05E3  2E9F               	line	203
  2940                           ;main.c: 203:             case 230:
  2941                           	
  2942                           l163:	
  2943  05E4                     	line	204
  2944                           ;main.c: 204:                     atuador.A = 0;
  2945                           	bcf	(main@atuador),0
  2946  05E4  103C               	line	205
  2947                           	
  2948                           l1856:	
  2949  05E5                     ;main.c: 205:                     estado = 231;
  2950                           	movlw	0E7h
  2951  05E5  30E7               	movwf	(main@estado)
  2952  05E6  00BF               	movlw	0
  2953  05E7  3000               	movwf	((main@estado))+1
  2954  05E8  00C0               	line	206
  2955                           ;main.c: 206:                     break;
  2956                           	goto	l1876
  2957  05E9  2E9F               	line	207
  2958                           ;main.c: 207:             case 231:
  2959                           	
  2960                           l164:	
  2961  05EA                     	line	208
  2962                           ;main.c: 208:                     if( sensor.A0 == 1)
  2963                           	btfss	(main@sensor),0
  2964  05EA  1C3D               	goto	u971
  2965  05EB  2DED               	goto	u970
  2966  05EC  2DEE               u971:
  2967  05ED                     	goto	l1876
  2968  05ED  2E9F               u970:
  2969  05EE                     	line	209
  2970                           	
  2971                           l1858:	
  2972  05EE                     ;main.c: 209:                         estado = 10;
  2973                           	movlw	0Ah
  2974  05EE  300A               	movwf	(main@estado)
  2975  05EF  00BF               	movlw	0
  2976  05F0  3000               	movwf	((main@estado))+1
  2977  05F1  00C0               	goto	l1876
  2978  05F2  2E9F               	
  2979                           l165:	
  2980  05F3                     	line	210
  2981                           ;main.c: 210:                     break;
  2982                           	goto	l1876
  2983  05F3  2E9F               	line	211
  2984                           ;main.c: 211:             case 240:
  2985                           	
  2986                           l166:	
  2987  05F4                     	line	212
  2988                           ;main.c: 212:                     atuador.B = 0;
  2989                           	bcf	(main@atuador),1
  2990  05F4  10BC               	line	213
  2991                           	
  2992                           l1860:	
  2993  05F5                     ;main.c: 213:                     estado = 241;
  2994                           	movlw	0F1h
  2995  05F5  30F1               	movwf	(main@estado)
  2996  05F6  00BF               	movlw	0
  2997  05F7  3000               	movwf	((main@estado))+1
  2998  05F8  00C0               	line	214
  2999                           ;main.c: 214:                     break;
  3000                           	goto	l1876
  3001  05F9  2E9F               	line	215
  3002                           ;main.c: 215:             case 241:
  3003                           	
  3004                           l167:	
  3005  05FA                     	line	216
  3006                           ;main.c: 216:                     if( sensor.B0 == 1)
  3007                           	btfss	(main@sensor),2
  3008  05FA  1D3D               	goto	u981
  3009  05FB  2DFD               	goto	u980
  3010  05FC  2DFE               u981:
  3011  05FD                     	goto	l1876
  3012  05FD  2E9F               u980:
  3013  05FE                     	line	217
  3014                           	
  3015                           l1862:	
  3016  05FE                     ;main.c: 217:                         estado = 10;
  3017                           	movlw	0Ah
  3018  05FE  300A               	movwf	(main@estado)
  3019  05FF  00BF               	movlw	0
  3020  0600  3000               	movwf	((main@estado))+1
  3021  0601  00C0               	goto	l1876
  3022  0602  2E9F               	
  3023                           l168:	
  3024  0603                     	line	218
  3025                           ;main.c: 218:                     break;
  3026                           	goto	l1876
  3027  0603  2E9F               	line	219
  3028                           ;main.c: 219:             case 250:
  3029                           	
  3030                           l169:	
  3031  0604                     	line	220
  3032                           ;main.c: 220:                     atuador.C = 0;
  3033                           	bcf	(main@atuador),2
  3034  0604  113C               	line	221
  3035                           	
  3036                           l1864:	
  3037  0605                     ;main.c: 221:                     estado = 251;
  3038                           	movlw	0FBh
  3039  0605  30FB               	movwf	(main@estado)
  3040  0606  00BF               	movlw	0
  3041  0607  3000               	movwf	((main@estado))+1
  3042  0608  00C0               	line	222
  3043                           ;main.c: 222:                     break;
  3044                           	goto	l1876
  3045  0609  2E9F               	line	223
  3046                           ;main.c: 223:             case 251:
  3047                           	
  3048                           l170:	
  3049  060A                     	line	224
  3050                           ;main.c: 224:                     if( sensor.C0 == 1)
  3051                           	btfss	(main@sensor),4
  3052  060A  1E3D               	goto	u991
  3053  060B  2E0D               	goto	u990
  3054  060C  2E0E               u991:
  3055  060D                     	goto	l1876
  3056  060D  2E9F               u990:
  3057  060E                     	line	225
  3058                           	
  3059                           l1866:	
  3060  060E                     ;main.c: 225:                         estado = 10;
  3061                           	movlw	0Ah
  3062  060E  300A               	movwf	(main@estado)
  3063  060F  00BF               	movlw	0
  3064  0610  3000               	movwf	((main@estado))+1
  3065  0611  00C0               	goto	l1876
  3066  0612  2E9F               	
  3067                           l171:	
  3068  0613                     	line	226
  3069                           ;main.c: 226:                     break;
  3070                           	goto	l1876
  3071  0613  2E9F               	line	227
  3072                           ;main.c: 227:             case 260:
  3073                           	
  3074                           l172:	
  3075  0614                     	line	228
  3076                           ;main.c: 228:                     atuador.D = 0;
  3077                           	bcf	(main@atuador),3
  3078  0614  11BC               	line	229
  3079                           	
  3080                           l1868:	
  3081  0615                     ;main.c: 229:                     estado = 261;
  3082                           	movlw	05h
  3083  0615  3005               	movwf	(main@estado)
  3084  0616  00BF               	movlw	01h
  3085  0617  3001               	movwf	((main@estado))+1
  3086  0618  00C0               	line	230
  3087                           ;main.c: 230:                     break;
  3088                           	goto	l1876
  3089  0619  2E9F               	line	231
  3090                           ;main.c: 231:             case 261:
  3091                           	
  3092                           l173:	
  3093  061A                     	line	232
  3094                           ;main.c: 232:                     if( sensor.D0 == 1)
  3095                           	btfss	(main@sensor),6
  3096  061A  1F3D               	goto	u1001
  3097  061B  2E1D               	goto	u1000
  3098  061C  2E1E               u1001:
  3099  061D                     	goto	l1876
  3100  061D  2E9F               u1000:
  3101  061E                     	line	233
  3102                           	
  3103                           l1870:	
  3104  061E                     ;main.c: 233:                         estado = 10;
  3105                           	movlw	0Ah
  3106  061E  300A               	movwf	(main@estado)
  3107  061F  00BF               	movlw	0
  3108  0620  3000               	movwf	((main@estado))+1
  3109  0621  00C0               	goto	l1876
  3110  0622  2E9F               	
  3111                           l174:	
  3112  0623                     	line	234
  3113                           ;main.c: 234:                     break;
  3114                           	goto	l1876
  3115  0623  2E9F               	line	236
  3116                           	
  3117                           l1872:	
  3118  0624                     ;main.c: 236:         }
  3119                           	goto	l1876
  3120  0624  2E9F               	
  3121                           l96:	
  3122  0625                     	
  3123                           l1874:	
  3124  0625                     	; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-s
                                 witches
  3125                           ; Switch size 1, requested type "space"
  3126                           ; Number of cases is 2, Range of values is 0 to 1
  3127                           ; switch strategies available:
  3128                           ; Name         Instructions Cycles
  3129                           ; simple_byte            7     4 (average)
  3130                           ; direct_byte           14     8 (fixed)
  3131                           ; jumptable            260     6 (fixed)
  3132                           ;	Chosen strategy is simple_byte
  3133                           
  3134                           	bcf	status, 5	;RP0=0, select bank0
  3135  0625  1283               	bcf	status, 6	;RP1=0, select bank0
  3136  0626  1303               	movf (main@estado+1),w
  3137  0627  0840               	opt asmopt_push
  3138                           	opt asmopt_off
  3139                           	xorlw	0^0	; case 0
  3140  0628  3A00               	skipnz
  3141  0629  1903               	goto	l2088
  3142  062A  2E2F               	xorlw	1^0	; case 1
  3143  062B  3A01               	skipnz
  3144  062C  1903               	goto	l2090
  3145  062D  2E97               	goto	l1876
  3146  062E  2E9F               	opt asmopt_pop
  3147                           	
  3148                           l2088:	
  3149  062F                     ; Switch size 1, requested type "space"
  3150                           ; Number of cases is 34, Range of values is 0 to 251
  3151                           ; switch strategies available:
  3152                           ; Name         Instructions Cycles
  3153                           ; simple_byte          103    52 (average)
  3154                           ; jumptable            260     6 (fixed)
  3155                           ;	Chosen strategy is simple_byte
  3156                           
  3157                           	movf (main@estado),w
  3158  062F  083F               	opt asmopt_push
  3159                           	opt asmopt_off
  3160                           	xorlw	0^0	; case 0
  3161  0630  3A00               	skipnz
  3162  0631  1903               	goto	l1876
  3163  0632  2E9F               	xorlw	10^0	; case 10
  3164  0633  3A0A               	skipnz
  3165  0634  1903               	goto	l1734
  3166  0635  2BDE               	xorlw	100^10	; case 100
  3167  0636  3A6E               	skipnz
  3168  0637  1903               	goto	l133
  3169  0638  2CB4               	xorlw	101^100	; case 101
  3170  0639  3A01               	skipnz
  3171  063A  1903               	goto	l134
  3172  063B  2CBA               	xorlw	110^101	; case 110
  3173  063C  3A0B               	skipnz
  3174  063D  1903               	goto	l136
  3175  063E  2CC4               	xorlw	111^110	; case 111
  3176  063F  3A01               	skipnz
  3177  0640  1903               	goto	l137
  3178  0641  2CCA               	xorlw	120^111	; case 120
  3179  0642  3A17               	skipnz
  3180  0643  1903               	goto	l139
  3181  0644  2CD4               	xorlw	121^120	; case 121
  3182  0645  3A01               	skipnz
  3183  0646  1903               	goto	l140
  3184  0647  2CDA               	xorlw	130^121	; case 130
  3185  0648  3AFB               	skipnz
  3186  0649  1903               	goto	l142
  3187  064A  2CE4               	xorlw	131^130	; case 131
  3188  064B  3A01               	skipnz
  3189  064C  1903               	goto	l143
  3190  064D  2CEA               	xorlw	140^131	; case 140
  3191  064E  3A0F               	skipnz
  3192  064F  1903               	goto	l1820
  3193  0650  2CF4               	xorlw	141^140	; case 141
  3194  0651  3A01               	skipnz
  3195  0652  1903               	goto	l1822
  3196  0653  2D09               	xorlw	150^141	; case 150
  3197  0654  3A1B               	skipnz
  3198  0655  1903               	goto	l1824
  3199  0656  2D0E               	xorlw	151^150	; case 151
  3200  0657  3A01               	skipnz
  3201  0658  1903               	goto	l1826
  3202  0659  2D23               	xorlw	160^151	; case 160
  3203  065A  3A37               	skipnz
  3204  065B  1903               	goto	l1828
  3205  065C  2D28               	xorlw	161^160	; case 161
  3206  065D  3A01               	skipnz
  3207  065E  1903               	goto	l1830
  3208  065F  2D3D               	xorlw	170^161	; case 170
  3209  0660  3A0B               	skipnz
  3210  0661  1903               	goto	l1832
  3211  0662  2D42               	xorlw	171^170	; case 171
  3212  0663  3A01               	skipnz
  3213  0664  1903               	goto	l1834
  3214  0665  2D58               	xorlw	180^171	; case 180
  3215  0666  3A1F               	skipnz
  3216  0667  1903               	goto	l1836
  3217  0668  2D5D               	xorlw	181^180	; case 181
  3218  0669  3A01               	skipnz
  3219  066A  1903               	goto	l1838
  3220  066B  2D73               	xorlw	190^181	; case 190
  3221  066C  3A0B               	skipnz
  3222  066D  1903               	goto	l1840
  3223  066E  2D78               	xorlw	191^190	; case 191
  3224  066F  3A01               	skipnz
  3225  0670  1903               	goto	l1842
  3226  0671  2D8E               	xorlw	200^191	; case 200
  3227  0672  3A77               	skipnz
  3228  0673  1903               	goto	l1844
  3229  0674  2D93               	xorlw	201^200	; case 201
  3230  0675  3A01               	skipnz
  3231  0676  1903               	goto	l1846
  3232  0677  2DA9               	xorlw	210^201	; case 210
  3233  0678  3A1B               	skipnz
  3234  0679  1903               	goto	l1848
  3235  067A  2DAE               	xorlw	211^210	; case 211
  3236  067B  3A01               	skipnz
  3237  067C  1903               	goto	l1850
  3238  067D  2DC4               	xorlw	220^211	; case 220
  3239  067E  3A0F               	skipnz
  3240  067F  1903               	goto	l1852
  3241  0680  2DC9               	xorlw	221^220	; case 221
  3242  0681  3A01               	skipnz
  3243  0682  1903               	goto	l1854
  3244  0683  2DDF               	xorlw	230^221	; case 230
  3245  0684  3A3B               	skipnz
  3246  0685  1903               	goto	l163
  3247  0686  2DE4               	xorlw	231^230	; case 231
  3248  0687  3A01               	skipnz
  3249  0688  1903               	goto	l164
  3250  0689  2DEA               	xorlw	240^231	; case 240
  3251  068A  3A17               	skipnz
  3252  068B  1903               	goto	l166
  3253  068C  2DF4               	xorlw	241^240	; case 241
  3254  068D  3A01               	skipnz
  3255  068E  1903               	goto	l167
  3256  068F  2DFA               	xorlw	250^241	; case 250
  3257  0690  3A0B               	skipnz
  3258  0691  1903               	goto	l169
  3259  0692  2E04               	xorlw	251^250	; case 251
  3260  0693  3A01               	skipnz
  3261  0694  1903               	goto	l170
  3262  0695  2E0A               	goto	l1876
  3263  0696  2E9F               	opt asmopt_pop
  3264                           	
  3265                           l2090:	
  3266  0697                     ; Switch size 1, requested type "space"
  3267                           ; Number of cases is 2, Range of values is 4 to 5
  3268                           ; switch strategies available:
  3269                           ; Name         Instructions Cycles
  3270                           ; simple_byte            7     4 (average)
  3271                           ; direct_byte           17    11 (fixed)
  3272                           ; jumptable            263     9 (fixed)
  3273                           ;	Chosen strategy is simple_byte
  3274                           
  3275                           	movf (main@estado),w
  3276  0697  083F               	opt asmopt_push
  3277                           	opt asmopt_off
  3278                           	xorlw	4^0	; case 4
  3279  0698  3A04               	skipnz
  3280  0699  1903               	goto	l172
  3281  069A  2E14               	xorlw	5^4	; case 5
  3282  069B  3A01               	skipnz
  3283  069C  1903               	goto	l173
  3284  069D  2E1A               	goto	l1876
  3285  069E  2E9F               	opt asmopt_pop
  3286                           
  3287                           	
  3288                           l98:	
  3289  069F                     	line	237
  3290                           	
  3291                           l1876:	
  3292  069F                     ;main.c: 237:         if( currentKey() && !previousKey() )
  3293                           	fcall	_currentKey
  3294  069F  120A  118A  2117  120A  118A  	xorlw	0
  3295  06A4  3A00               	skipnz
  3296  06A5  1903               	goto	u1011
  3297  06A6  2EA8               	goto	u1010
  3298  06A7  2EA9               u1011:
  3299  06A8                     	goto	l175
  3300  06A8  2FE7               u1010:
  3301  06A9                     	
  3302                           l1878:	
  3303  06A9                     	fcall	_previousKey
  3304  06A9  120A  118A  211C  120A  118A  	xorlw	0
  3305  06AE  3A00               	skipz
  3306  06AF  1D03               	goto	u1021
  3307  06B0  2EB2               	goto	u1020
  3308  06B1  2EB3               u1021:
  3309  06B2                     	goto	l175
  3310  06B2  2FE7               u1020:
  3311  06B3                     	line	239
  3312                           	
  3313                           l1880:	
  3314  06B3                     ;main.c: 238:         {;main.c: 239:             tecla = currentKey();
  3315                           	fcall	_currentKey
  3316  06B3  120A  118A  2117  120A  118A  	bcf	status, 5	;RP0=0, select bank0
  3317  06B8  1283               	bcf	status, 6	;RP1=0, select bank0
  3318  06B9  1303               	movwf	(??_main+0)+0
  3319  06BA  00B5               	movf	(??_main+0)+0,w
  3320  06BB  0835               	movwf	(main@tecla)
  3321  06BC  00BE               	line	240
  3322                           ;main.c: 240:             switch(tecla)
  3323                           	goto	l1940
  3324  06BD  2F9C               	line	242
  3325                           ;main.c: 241:             {;main.c: 242:                 case 'A':
  3326                           	
  3327                           l177:	
  3328  06BE                     	line	243
  3329                           	
  3330                           l1882:	
  3331  06BE                     ;main.c: 243:                         ++a;
  3332                           	movlw	low(01h)
  3333  06BE  3001               	movwf	(??_main+0)+0
  3334  06BF  00B5               	movf	(??_main+0)+0,w
  3335  06C0  0835               	addwf	(main@a),f
  3336  06C1  07B8               	line	244
  3337                           	
  3338                           l1884:	
  3339  06C2                     ;main.c: 244:                         if( a % 2 )
  3340                           	btfss	(main@a),(0)&7
  3341  06C2  1C38               	goto	u1031
  3342  06C3  2EC5               	goto	u1030
  3343  06C4  2EC6               u1031:
  3344  06C5                     	goto	l1888
  3345  06C5  2ECD               u1030:
  3346  06C6                     	line	245
  3347                           	
  3348                           l1886:	
  3349  06C6                     ;main.c: 245:                             putFIFO( tecla );
  3350                           	movf	(main@tecla),w
  3351  06C6  083E               	fcall	_putFIFO
  3352  06C7  120A  118A  2135  120A  118A  	goto	l1942
  3353  06CC  2FD6               	line	246
  3354                           ;main.c: 246:                         else
  3355                           	
  3356                           l178:	
  3357  06CD                     	line	247
  3358                           	
  3359                           l1888:	
  3360  06CD                     ;main.c: 247:                             putFIFO( tecla | 0x20 );
  3361                           	bcf	status, 5	;RP0=0, select bank0
  3362  06CD  1283               	bcf	status, 6	;RP1=0, select bank0
  3363  06CE  1303               	movf	(main@tecla),w
  3364  06CF  083E               	iorlw	020h
  3365  06D0  3820               	fcall	_putFIFO
  3366  06D1  120A  118A  2135  120A  118A  	goto	l1942
  3367  06D6  2FD6               	
  3368                           l179:	
  3369  06D7                     	line	248
  3370                           ;main.c: 248:                         break;
  3371                           	goto	l1942
  3372  06D7  2FD6               	line	249
  3373                           ;main.c: 249:                 case 'B':
  3374                           	
  3375                           l181:	
  3376  06D8                     	line	250
  3377                           	
  3378                           l1890:	
  3379  06D8                     ;main.c: 250:                         ++b;
  3380                           	movlw	low(01h)
  3381  06D8  3001               	bcf	status, 5	;RP0=0, select bank0
  3382  06D9  1283               	bcf	status, 6	;RP1=0, select bank0
  3383  06DA  1303               	movwf	(??_main+0)+0
  3384  06DB  00B5               	movf	(??_main+0)+0,w
  3385  06DC  0835               	addwf	(main@b),f
  3386  06DD  07B9               	line	251
  3387                           	
  3388                           l1892:	
  3389  06DE                     ;main.c: 251:                         if( b % 2 )
  3390                           	btfss	(main@b),(0)&7
  3391  06DE  1C39               	goto	u1041
  3392  06DF  2EE1               	goto	u1040
  3393  06E0  2EE2               u1041:
  3394  06E1                     	goto	l1896
  3395  06E1  2EE9               u1040:
  3396  06E2                     	line	252
  3397                           	
  3398                           l1894:	
  3399  06E2                     ;main.c: 252:                             putFIFO( tecla );
  3400                           	movf	(main@tecla),w
  3401  06E2  083E               	fcall	_putFIFO
  3402  06E3  120A  118A  2135  120A  118A  	goto	l1942
  3403  06E8  2FD6               	line	253
  3404                           ;main.c: 253:                         else
  3405                           	
  3406                           l182:	
  3407  06E9                     	line	254
  3408                           	
  3409                           l1896:	
  3410  06E9                     ;main.c: 254:                             putFIFO( tecla | 0x20 );
  3411                           	bcf	status, 5	;RP0=0, select bank0
  3412  06E9  1283               	bcf	status, 6	;RP1=0, select bank0
  3413  06EA  1303               	movf	(main@tecla),w
  3414  06EB  083E               	iorlw	020h
  3415  06EC  3820               	fcall	_putFIFO
  3416  06ED  120A  118A  2135  120A  118A  	goto	l1942
  3417  06F2  2FD6               	
  3418                           l183:	
  3419  06F3                     	line	255
  3420                           ;main.c: 255:                         break;
  3421                           	goto	l1942
  3422  06F3  2FD6               	line	256
  3423                           ;main.c: 256:                 case 'C':
  3424                           	
  3425                           l184:	
  3426  06F4                     	line	257
  3427                           	
  3428                           l1898:	
  3429  06F4                     ;main.c: 257:                         ++c;
  3430                           	movlw	low(01h)
  3431  06F4  3001               	bcf	status, 5	;RP0=0, select bank0
  3432  06F5  1283               	bcf	status, 6	;RP1=0, select bank0
  3433  06F6  1303               	movwf	(??_main+0)+0
  3434  06F7  00B5               	movf	(??_main+0)+0,w
  3435  06F8  0835               	addwf	(main@c),f
  3436  06F9  07BA               	line	258
  3437                           	
  3438                           l1900:	
  3439  06FA                     ;main.c: 258:                         if( c % 2 )
  3440                           	btfss	(main@c),(0)&7
  3441  06FA  1C3A               	goto	u1051
  3442  06FB  2EFD               	goto	u1050
  3443  06FC  2EFE               u1051:
  3444  06FD                     	goto	l1904
  3445  06FD  2F05               u1050:
  3446  06FE                     	line	259
  3447                           	
  3448                           l1902:	
  3449  06FE                     ;main.c: 259:                             putFIFO( tecla );
  3450                           	movf	(main@tecla),w
  3451  06FE  083E               	fcall	_putFIFO
  3452  06FF  120A  118A  2135  120A  118A  	goto	l1942
  3453  0704  2FD6               	line	260
  3454                           ;main.c: 260:                         else
  3455                           	
  3456                           l185:	
  3457  0705                     	line	261
  3458                           	
  3459                           l1904:	
  3460  0705                     ;main.c: 261:                             putFIFO( tecla | 0x20 );
  3461                           	bcf	status, 5	;RP0=0, select bank0
  3462  0705  1283               	bcf	status, 6	;RP1=0, select bank0
  3463  0706  1303               	movf	(main@tecla),w
  3464  0707  083E               	iorlw	020h
  3465  0708  3820               	fcall	_putFIFO
  3466  0709  120A  118A  2135  120A  118A  	goto	l1942
  3467  070E  2FD6               	
  3468                           l186:	
  3469  070F                     	line	262
  3470                           ;main.c: 262:                         break;
  3471                           	goto	l1942
  3472  070F  2FD6               	line	263
  3473                           ;main.c: 263:                 case 'D':
  3474                           	
  3475                           l187:	
  3476  0710                     	line	264
  3477                           	
  3478                           l1906:	
  3479  0710                     ;main.c: 264:                         ++d;
  3480                           	movlw	low(01h)
  3481  0710  3001               	bcf	status, 5	;RP0=0, select bank0
  3482  0711  1283               	bcf	status, 6	;RP1=0, select bank0
  3483  0712  1303               	movwf	(??_main+0)+0
  3484  0713  00B5               	movf	(??_main+0)+0,w
  3485  0714  0835               	addwf	(main@d),f
  3486  0715  07BB               	line	265
  3487                           	
  3488                           l1908:	
  3489  0716                     ;main.c: 265:                         if( d % 2 )
  3490                           	btfss	(main@d),(0)&7
  3491  0716  1C3B               	goto	u1061
  3492  0717  2F19               	goto	u1060
  3493  0718  2F1A               u1061:
  3494  0719                     	goto	l1912
  3495  0719  2F21               u1060:
  3496  071A                     	line	266
  3497                           	
  3498                           l1910:	
  3499  071A                     ;main.c: 266:                             putFIFO( tecla );
  3500                           	movf	(main@tecla),w
  3501  071A  083E               	fcall	_putFIFO
  3502  071B  120A  118A  2135  120A  118A  	goto	l1942
  3503  0720  2FD6               	line	267
  3504                           ;main.c: 267:                         else
  3505                           	
  3506                           l188:	
  3507  0721                     	line	268
  3508                           	
  3509                           l1912:	
  3510  0721                     ;main.c: 268:                             putFIFO( tecla | 0x20 );
  3511                           	bcf	status, 5	;RP0=0, select bank0
  3512  0721  1283               	bcf	status, 6	;RP1=0, select bank0
  3513  0722  1303               	movf	(main@tecla),w
  3514  0723  083E               	iorlw	020h
  3515  0724  3820               	fcall	_putFIFO
  3516  0725  120A  118A  2135  120A  118A  	goto	l1942
  3517  072A  2FD6               	
  3518                           l189:	
  3519  072B                     	line	269
  3520                           ;main.c: 269:                         break;
  3521                           	goto	l1942
  3522  072B  2FD6               	line	270
  3523                           ;main.c: 270:                 case '0':
  3524                           	
  3525                           l190:	
  3526  072C                     	line	271
  3527                           	
  3528                           l1914:	
  3529  072C                     ;main.c: 271:                         delFIFO(16);
  3530                           	movlw	low(010h)
  3531  072C  3010               	fcall	_delFIFO
  3532  072D  120A  118A  2185  120A  118A  	line	272
  3533                           	
  3534                           l1916:	
  3535  0732                     ;main.c: 272:                         clearLCD();
  3536                           	fcall	_clearLCD
  3537  0732  120A  118A  2126  120A  118A  	line	273
  3538                           	
  3539                           l1918:	
  3540  0737                     ;main.c: 273:                         a = b = c = d = 0;
  3541                           	bcf	status, 5	;RP0=0, select bank0
  3542  0737  1283               	bcf	status, 6	;RP1=0, select bank0
  3543  0738  1303               	clrf	(main@d)
  3544  0739  01BB               	clrf	(main@c)
  3545  073A  01BA               	clrf	(main@b)
  3546  073B  01B9               	clrf	(main@a)
  3547  073C  01B8               	line	274
  3548                           ;main.c: 274:                         break;
  3549                           	goto	l1942
  3550  073D  2FD6               	line	275
  3551                           ;main.c: 275:                 case '1':
  3552                           	
  3553                           l191:	
  3554  073E                     	goto	l1920
  3555  073E  2F46               	line	276
  3556                           ;main.c: 276:                 case '2':
  3557                           	
  3558                           l192:	
  3559  073F                     	goto	l1920
  3560  073F  2F46               	line	277
  3561                           ;main.c: 277:                 case '3':
  3562                           	
  3563                           l193:	
  3564  0740                     	goto	l1920
  3565  0740  2F46               	line	278
  3566                           ;main.c: 278:                 case '4':
  3567                           	
  3568                           l194:	
  3569  0741                     	goto	l1920
  3570  0741  2F46               	line	279
  3571                           ;main.c: 279:                 case '5':
  3572                           	
  3573                           l195:	
  3574  0742                     	goto	l1920
  3575  0742  2F46               	line	280
  3576                           ;main.c: 280:                 case '6':
  3577                           	
  3578                           l196:	
  3579  0743                     	goto	l1920
  3580  0743  2F46               	line	281
  3581                           ;main.c: 281:                 case '7':
  3582                           	
  3583                           l197:	
  3584  0744                     	goto	l1920
  3585  0744  2F46               	line	282
  3586                           ;main.c: 282:                 case '8':
  3587                           	
  3588                           l198:	
  3589  0745                     	goto	l1920
  3590  0745  2F46               	line	283
  3591                           ;main.c: 283:                 case '9':
  3592                           	
  3593                           l199:	
  3594  0746                     	line	284
  3595                           	
  3596                           l1920:	
  3597  0746                     ;main.c: 284:                         putFIFO(tecla);
  3598                           	movf	(main@tecla),w
  3599  0746  083E               	fcall	_putFIFO
  3600  0747  120A  118A  2135  120A  118A  	line	285
  3601                           ;main.c: 285:                         break;
  3602                           	goto	l1942
  3603  074C  2FD6               	line	286
  3604                           ;main.c: 286:                 case '*':
  3605                           	
  3606                           l200:	
  3607  074D                     	line	287
  3608                           ;main.c: 287:                         switch( delFIFO(1) )
  3609                           	goto	l1932
  3610  074D  2F65               	line	289
  3611                           ;main.c: 288:                         {;main.c: 289:                             case 'A
                                 ': a = 0; break;
  3612                           	
  3613                           l202:	
  3614  074E                     	
  3615                           l1922:	
  3616  074E                     	bcf	status, 5	;RP0=0, select bank0
  3617  074E  1283               	bcf	status, 6	;RP1=0, select bank0
  3618  074F  1303               	clrf	(main@a)
  3619  0750  01B8               	goto	l1934
  3620  0751  2F8E               	line	290
  3621                           ;main.c: 290:                             case 'a': a = 1; break;
  3622                           	
  3623                           l204:	
  3624  0752                     	clrf	(main@a)
  3625  0752  01B8               	incf	(main@a),f
  3626  0753  0AB8               	goto	l1934
  3627  0754  2F8E               	line	291
  3628                           ;main.c: 291:                             case 'B': b = 0; break;
  3629                           	
  3630                           l205:	
  3631  0755                     	
  3632                           l1924:	
  3633  0755                     	clrf	(main@b)
  3634  0755  01B9               	goto	l1934
  3635  0756  2F8E               	line	292
  3636                           ;main.c: 292:                             case 'b': b = 1; break;
  3637                           	
  3638                           l206:	
  3639  0757                     	clrf	(main@b)
  3640  0757  01B9               	incf	(main@b),f
  3641  0758  0AB9               	goto	l1934
  3642  0759  2F8E               	line	293
  3643                           ;main.c: 293:                             case 'C': c = 0; break;
  3644                           	
  3645                           l207:	
  3646  075A                     	
  3647                           l1926:	
  3648  075A                     	clrf	(main@c)
  3649  075A  01BA               	goto	l1934
  3650  075B  2F8E               	line	294
  3651                           ;main.c: 294:                             case 'c': c = 1; break;
  3652                           	
  3653                           l208:	
  3654  075C                     	clrf	(main@c)
  3655  075C  01BA               	incf	(main@c),f
  3656  075D  0ABA               	goto	l1934
  3657  075E  2F8E               	line	295
  3658                           ;main.c: 295:                             case 'D': d = 0; break;
  3659                           	
  3660                           l209:	
  3661  075F                     	
  3662                           l1928:	
  3663  075F                     	clrf	(main@d)
  3664  075F  01BB               	goto	l1934
  3665  0760  2F8E               	line	296
  3666                           ;main.c: 296:                             case 'd': d = 1; break;
  3667                           	
  3668                           l210:	
  3669  0761                     	clrf	(main@d)
  3670  0761  01BB               	incf	(main@d),f
  3671  0762  0ABB               	goto	l1934
  3672  0763  2F8E               	line	297
  3673                           	
  3674                           l1930:	
  3675  0764                     ;main.c: 297:                         }
  3676                           	goto	l1934
  3677  0764  2F8E               	
  3678                           l201:	
  3679  0765                     	
  3680                           l1932:	
  3681  0765                     	movlw	low(01h)
  3682  0765  3001               	fcall	_delFIFO
  3683  0766  120A  118A  2185  120A  118A  	bcf	status, 5	;RP0=0, select bank0
  3684  076B  1283               	bcf	status, 6	;RP1=0, select bank0
  3685  076C  1303               	movwf	(??_main+0)+0
  3686  076D  00B5               	clrf	(??_main+0)+0+1
  3687  076E  01B6               	; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-s
                                 witches
  3688                           ; Switch size 1, requested type "space"
  3689                           ; Number of cases is 1, Range of values is 0 to 0
  3690                           ; switch strategies available:
  3691                           ; Name         Instructions Cycles
  3692                           ; simple_byte            4     3 (average)
  3693                           ; direct_byte           11     8 (fixed)
  3694                           ; jumptable            260     6 (fixed)
  3695                           ;	Chosen strategy is simple_byte
  3696                           
  3697                           	movf 1+(??_main+0)+0,w
  3698  076F  0836               	opt asmopt_push
  3699                           	opt asmopt_off
  3700                           	xorlw	0^0	; case 0
  3701  0770  3A00               	skipnz
  3702  0771  1903               	goto	l2092
  3703  0772  2F74               	goto	l1934
  3704  0773  2F8E               	opt asmopt_pop
  3705                           	
  3706                           l2092:	
  3707  0774                     ; Switch size 1, requested type "space"
  3708                           ; Number of cases is 8, Range of values is 65 to 100
  3709                           ; switch strategies available:
  3710                           ; Name         Instructions Cycles
  3711                           ; simple_byte           25    13 (average)
  3712                           ; direct_byte          119    11 (fixed)
  3713                           ; jumptable            263     9 (fixed)
  3714                           ;	Chosen strategy is simple_byte
  3715                           
  3716                           	movf 0+(??_main+0)+0,w
  3717  0774  0835               	opt asmopt_push
  3718                           	opt asmopt_off
  3719                           	xorlw	65^0	; case 65
  3720  0775  3A41               	skipnz
  3721  0776  1903               	goto	l1922
  3722  0777  2F4E               	xorlw	66^65	; case 66
  3723  0778  3A03               	skipnz
  3724  0779  1903               	goto	l1924
  3725  077A  2F55               	xorlw	67^66	; case 67
  3726  077B  3A01               	skipnz
  3727  077C  1903               	goto	l1926
  3728  077D  2F5A               	xorlw	68^67	; case 68
  3729  077E  3A07               	skipnz
  3730  077F  1903               	goto	l1928
  3731  0780  2F5F               	xorlw	97^68	; case 97
  3732  0781  3A25               	skipnz
  3733  0782  1903               	goto	l204
  3734  0783  2F52               	xorlw	98^97	; case 98
  3735  0784  3A03               	skipnz
  3736  0785  1903               	goto	l206
  3737  0786  2F57               	xorlw	99^98	; case 99
  3738  0787  3A01               	skipnz
  3739  0788  1903               	goto	l208
  3740  0789  2F5C               	xorlw	100^99	; case 100
  3741  078A  3A07               	skipnz
  3742  078B  1903               	goto	l210
  3743  078C  2F61               	goto	l1934
  3744  078D  2F8E               	opt asmopt_pop
  3745                           
  3746                           	
  3747                           l203:	
  3748  078E                     	line	298
  3749                           	
  3750                           l1934:	
  3751  078E                     ;main.c: 298:                         clearLCD();
  3752                           	fcall	_clearLCD
  3753  078E  120A  118A  2126  120A  118A  	line	299
  3754                           ;main.c: 299:                         break;
  3755                           	goto	l1942
  3756  0793  2FD6               	line	300
  3757                           ;main.c: 300:                 case '#':
  3758                           	
  3759                           l211:	
  3760  0794                     	line	301
  3761                           	
  3762                           l1936:	
  3763  0794                     ;main.c: 301:                         estado = 10;
  3764                           	movlw	0Ah
  3765  0794  300A               	bcf	status, 5	;RP0=0, select bank0
  3766  0795  1283               	bcf	status, 6	;RP1=0, select bank0
  3767  0796  1303               	movwf	(main@estado)
  3768  0797  00BF               	movlw	0
  3769  0798  3000               	movwf	((main@estado))+1
  3770  0799  00C0               	line	302
  3771                           ;main.c: 302:                         break;
  3772                           	goto	l1942
  3773  079A  2FD6               	line	303
  3774                           	
  3775                           l1938:	
  3776  079B                     ;main.c: 303:             }
  3777                           	goto	l1942
  3778  079B  2FD6               	
  3779                           l176:	
  3780  079C                     	
  3781                           l1940:	
  3782  079C                     	movf	(main@tecla),w
  3783  079C  083E               	movwf	(??_main+0)+0
  3784  079D  00B5               	clrf	(??_main+0)+0+1
  3785  079E  01B6               	; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-s
                                 witches
  3786                           ; Switch size 1, requested type "space"
  3787                           ; Number of cases is 1, Range of values is 0 to 0
  3788                           ; switch strategies available:
  3789                           ; Name         Instructions Cycles
  3790                           ; simple_byte            4     3 (average)
  3791                           ; direct_byte           11     8 (fixed)
  3792                           ; jumptable            260     6 (fixed)
  3793                           ;	Chosen strategy is simple_byte
  3794                           
  3795                           	movf 1+(??_main+0)+0,w
  3796  079F  0836               	opt asmopt_push
  3797                           	opt asmopt_off
  3798                           	xorlw	0^0	; case 0
  3799  07A0  3A00               	skipnz
  3800  07A1  1903               	goto	l2094
  3801  07A2  2FA4               	goto	l1942
  3802  07A3  2FD6               	opt asmopt_pop
  3803                           	
  3804                           l2094:	
  3805  07A4                     ; Switch size 1, requested type "space"
  3806                           ; Number of cases is 16, Range of values is 35 to 68
  3807                           ; switch strategies available:
  3808                           ; Name         Instructions Cycles
  3809                           ; simple_byte           49    25 (average)
  3810                           ; direct_byte          113    11 (fixed)
  3811                           ; jumptable            263     9 (fixed)
  3812                           ;	Chosen strategy is simple_byte
  3813                           
  3814                           	movf 0+(??_main+0)+0,w
  3815  07A4  0835               	opt asmopt_push
  3816                           	opt asmopt_off
  3817                           	xorlw	35^0	; case 35
  3818  07A5  3A23               	skipnz
  3819  07A6  1903               	goto	l1936
  3820  07A7  2F94               	xorlw	42^35	; case 42
  3821  07A8  3A09               	skipnz
  3822  07A9  1903               	goto	l1932
  3823  07AA  2F65               	xorlw	48^42	; case 48
  3824  07AB  3A1A               	skipnz
  3825  07AC  1903               	goto	l1914
  3826  07AD  2F2C               	xorlw	49^48	; case 49
  3827  07AE  3A01               	skipnz
  3828  07AF  1903               	goto	l1920
  3829  07B0  2F46               	xorlw	50^49	; case 50
  3830  07B1  3A03               	skipnz
  3831  07B2  1903               	goto	l1920
  3832  07B3  2F46               	xorlw	51^50	; case 51
  3833  07B4  3A01               	skipnz
  3834  07B5  1903               	goto	l1920
  3835  07B6  2F46               	xorlw	52^51	; case 52
  3836  07B7  3A07               	skipnz
  3837  07B8  1903               	goto	l1920
  3838  07B9  2F46               	xorlw	53^52	; case 53
  3839  07BA  3A01               	skipnz
  3840  07BB  1903               	goto	l1920
  3841  07BC  2F46               	xorlw	54^53	; case 54
  3842  07BD  3A03               	skipnz
  3843  07BE  1903               	goto	l1920
  3844  07BF  2F46               	xorlw	55^54	; case 55
  3845  07C0  3A01               	skipnz
  3846  07C1  1903               	goto	l1920
  3847  07C2  2F46               	xorlw	56^55	; case 56
  3848  07C3  3A0F               	skipnz
  3849  07C4  1903               	goto	l1920
  3850  07C5  2F46               	xorlw	57^56	; case 57
  3851  07C6  3A01               	skipnz
  3852  07C7  1903               	goto	l1920
  3853  07C8  2F46               	xorlw	65^57	; case 65
  3854  07C9  3A78               	skipnz
  3855  07CA  1903               	goto	l1882
  3856  07CB  2EBE               	xorlw	66^65	; case 66
  3857  07CC  3A03               	skipnz
  3858  07CD  1903               	goto	l1890
  3859  07CE  2ED8               	xorlw	67^66	; case 67
  3860  07CF  3A01               	skipnz
  3861  07D0  1903               	goto	l1898
  3862  07D1  2EF4               	xorlw	68^67	; case 68
  3863  07D2  3A07               	skipnz
  3864  07D3  1903               	goto	l1906
  3865  07D4  2F10               	goto	l1942
  3866  07D5  2FD6               	opt asmopt_pop
  3867                           
  3868                           	
  3869                           l180:	
  3870  07D6                     	line	304
  3871                           	
  3872                           l1942:	
  3873  07D6                     ;main.c: 304:             writeLCD(0,0, displayFIFO() );
  3874                           	clrf	(writeLCD@y)
  3875  07D6  01F8               	fcall	_displayFIFO
  3876  07D7  120A  118A  2114  120A  118A  	bcf	status, 5	;RP0=0, select bank0
  3877  07DC  1283               	bcf	status, 6	;RP1=0, select bank0
  3878  07DD  1303               	movwf	(??_main+0)+0
  3879  07DE  00B5               	movf	(??_main+0)+0,w
  3880  07DF  0835               	movwf	(writeLCD@ptr)
  3881  07E0  00F9               	movlw	low(0)
  3882  07E1  3000               	fcall	_writeLCD
  3883  07E2  120A  118A  21A6  120A  118A  	line	305
  3884                           ;main.c: 305:         }
  3885                           	
  3886                           l175:	
  3887  07E7                     	line	306
  3888                           ;main.c: 306:         serialIOscan();
  3889                           	fcall	_serialIOscan
  3890  07E7  120A  118A  225D  120A  118A  	goto	l1732
  3891  07EC  2BD7               	line	307
  3892                           ;main.c: 307:     }
  3893                           	
  3894                           l212:	
  3895  07ED                     	goto	l1732
  3896  07ED  2BD7               	
  3897                           l213:	
  3898  07EE                     	line	308
  3899                           	
  3900                           l214:	
  3901  07EE                     	global	start
  3902                           	ljmp	start
  3903  07EE  120A  118A  2800   	opt stack 0
  3904                           GLOBAL	__end_of_main
  3905                           	__end_of_main:
  3906  07F1                     	signat	_main,89
  3907                           	global	_writeLCD
  3908                           
  3909 ;; *************** function _writeLCD *****************
  3910 ;; Defined at:
  3911 ;;		line 82 in file "lcd.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  x               1    wreg     unsigned char 
  3914 ;;  y               1    8[COMMON] unsigned char 
  3915 ;;  ptr             1    9[COMMON] PTR const unsigned char 
  3916 ;;		 -> fifo(16), 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;  x               1   11[COMMON] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3928 ;;      Params:         2       0       0       0       0
  3929 ;;      Locals:         1       0       0       0       0
  3930 ;;      Temps:          1       0       0       0       0
  3931 ;;      Totals:         4       0       0       0       0
  3932 ;;Total ram usage:        4 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    2
  3935 ;; This function calls:
  3936 ;;		_gotoxy
  3937 ;;		_putLCD
  3938 ;; This function is called by:
  3939 ;;		_main
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  3943                           	file	"lcd.c"
  3944                           	line	82
  3945                           global __ptext1
  3946                           __ptext1:	;psect for function _writeLCD
  3947  01A6                     psect	text1
  3948                           	file	"lcd.c"
  3949                           	line	82
  3950                           	global	__size_of_writeLCD
  3951                           	__size_of_writeLCD	equ	__end_of_writeLCD-_writeLCD
  3952  0024                     	
  3953                           _writeLCD:	
  3954  01A6                     ;incstack = 0
  3955                           	opt	stack 5
  3956                           ; Regs used in _writeLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3957                           ;writeLCD@x stored from wreg
  3958                           	movwf	(writeLCD@x)
  3959  01A6  00FB               	line	84
  3960                           	
  3961                           l1702:	
  3962  01A7                     ;lcd.c: 82: void writeLCD( unsigned char x, unsigned char y, const char * ptr );lcd.c: 8
                                 3: {;lcd.c: 84:         gotoxy(x,y);
  3963                           	movf	(writeLCD@y),w
  3964  01A7  0878               	movwf	(??_writeLCD+0)+0
  3965  01A8  00FA               	movf	(??_writeLCD+0)+0,w
  3966  01A9  087A               	movwf	(gotoxy@y)
  3967  01AA  00F4               	movf	(writeLCD@x),w
  3968  01AB  087B               	fcall	_gotoxy
  3969  01AC  120A  118A  216D  120A  118A  	line	85
  3970                           ;lcd.c: 85:         while( *ptr )
  3971                           	goto	l1708
  3972  01B1  29C0               	
  3973                           l286:	
  3974  01B2                     	line	86
  3975                           	
  3976                           l1704:	
  3977  01B2                     ;lcd.c: 86:         putLCD( *ptr++ );
  3978                           	movf	(writeLCD@ptr),w
  3979  01B2  0879               	movwf	fsr0
  3980  01B3  0084               	bcf	status, 7	;select IRP bank0
  3981  01B4  1383               	movf	indf,w
  3982  01B5  0800               	fcall	_putLCD
  3983  01B6  120A  118A  2229  120A  118A  	
  3984                           l1706:	
  3985  01BB                     	movlw	low(01h)
  3986  01BB  3001               	movwf	(??_writeLCD+0)+0
  3987  01BC  00FA               	movf	(??_writeLCD+0)+0,w
  3988  01BD  087A               	addwf	(writeLCD@ptr),f
  3989  01BE  07F9               	goto	l1708
  3990  01BF  29C0               	
  3991                           l285:	
  3992  01C0                     	line	85
  3993                           	
  3994                           l1708:	
  3995  01C0                     ;lcd.c: 85:         while( *ptr )
  3996                           	movf	(writeLCD@ptr),w
  3997  01C0  0879               	movwf	fsr0
  3998  01C1  0084               	bcf	status, 7	;select IRP bank0
  3999  01C2  1383               	movf	(indf),w
  4000  01C3  0800               	btfss	status,2
  4001  01C4  1D03               	goto	u741
  4002  01C5  29C7               	goto	u740
  4003  01C6  29C8               u741:
  4004  01C7                     	goto	l1704
  4005  01C7  29B2               u740:
  4006  01C8                     	goto	l288
  4007  01C8  29C9               	
  4008                           l287:	
  4009  01C9                     	line	87
  4010                           	
  4011                           l288:	
  4012  01C9                     	return
  4013  01C9  0008               	opt stack 0
  4014                           GLOBAL	__end_of_writeLCD
  4015                           	__end_of_writeLCD:
  4016  01CA                     	signat	_writeLCD,12409
  4017                           	global	_putLCD
  4018                           
  4019 ;; *************** function _putLCD *****************
  4020 ;; Defined at:
  4021 ;;		line 61 in file "lcd.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  c               1    wreg     unsigned char 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  c               1    2[COMMON] unsigned char 
  4026 ;;  nibble          1    3[COMMON] volatile struct .
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4036 ;;      Params:         0       0       0       0       0
  4037 ;;      Locals:         2       0       0       0       0
  4038 ;;      Temps:          2       0       0       0       0
  4039 ;;      Totals:         4       0       0       0       0
  4040 ;;Total ram usage:        4 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_writeLCD
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  4049                           	line	61
  4050                           global __ptext2
  4051                           __ptext2:	;psect for function _putLCD
  4052  0229                     psect	text2
  4053                           	file	"lcd.c"
  4054                           	line	61
  4055                           	global	__size_of_putLCD
  4056                           	__size_of_putLCD	equ	__end_of_putLCD-_putLCD
  4057  0034                     	
  4058                           _putLCD:	
  4059  0229                     ;incstack = 0
  4060                           	opt	stack 6
  4061                           ; Regs used in _putLCD: [wreg+status,2+status,0]
  4062                           ;putLCD@c stored from wreg
  4063                           	movwf	(putLCD@c)
  4064  0229  00F2               	line	65
  4065                           	
  4066                           l1540:	
  4067  022A                     ;lcd.c: 61: void putLCD( unsigned char c );lcd.c: 62:  {;lcd.c: 63:         volatile REG
                                 nibble_t nibble;;lcd.c: 65:         nibble.HILO = c;
  4068                           	movf	(putLCD@c),w
  4069  022A  0872               	movwf	(??_putLCD+0)+0
  4070  022B  00F0               	movf	(??_putLCD+0)+0,w
  4071  022C  0870               	movwf	(putLCD@nibble)	;volatile
  4072  022D  00F3               	line	66
  4073                           	
  4074                           l1542:	
  4075  022E                     ;lcd.c: 66:         LCD.RS = 1;
  4076                           	bcf	status, 5	;RP0=0, select bank0
  4077  022E  1283               	bcf	status, 6	;RP1=0, select bank0
  4078  022F  1303               	bsf	(8),4	;volatile
  4079  0230  1608               	line	67
  4080                           	
  4081                           l1544:	
  4082  0231                     ;lcd.c: 67:         LCD.BUS= nibble.HI;
  4083                           	swapf	(putLCD@nibble),w	;volatile
  4084  0231  0E73               	andlw	(1<<4)-1
  4085  0232  390F               	movwf	(??_putLCD+0)+0
  4086  0233  00F0               	movf	(8),w	;volatile
  4087  0234  0808               	xorwf	(??_putLCD+0)+0,w
  4088  0235  0670               	andlw	not ((1<<4)-1)
  4089  0236  39F0               	xorwf	(??_putLCD+0)+0,w
  4090  0237  0670               	movwf	(8)	;volatile
  4091  0238  0088               	line	68
  4092                           	
  4093                           l1546:	
  4094  0239                     ;lcd.c: 68:         LCD.EN = 0;
  4095                           	bcf	(8),5	;volatile
  4096  0239  1288               	line	69
  4097                           	
  4098                           l1548:	
  4099  023A                     ;lcd.c: 69:         _delay((unsigned long)((2)*(4000000/4000.0)));
  4100                           	opt asmopt_push
  4101                           opt asmopt_off
  4102                           movlw	3
  4103  023A  3003               movwf	((??_putLCD+0)+0+1),f
  4104  023B  00F1               	movlw	151
  4105  023C  3097               movwf	((??_putLCD+0)+0),f
  4106  023D  00F0               	u1167:
  4107  023E                     decfsz	((??_putLCD+0)+0),f
  4108  023E  0BF0               	goto	u1167
  4109  023F  2A3E               	decfsz	((??_putLCD+0)+0+1),f
  4110  0240  0BF1               	goto	u1167
  4111  0241  2A3E               	nop2
  4112  0242  2A43               opt asmopt_pop
  4113                           
  4114                           	line	70
  4115                           	
  4116                           l1550:	
  4117  0243                     ;lcd.c: 70:         LCD.EN = 1;
  4118                           	bcf	status, 5	;RP0=0, select bank0
  4119  0243  1283               	bcf	status, 6	;RP1=0, select bank0
  4120  0244  1303               	bsf	(8),5	;volatile
  4121  0245  1688               	line	72
  4122                           	
  4123                           l1552:	
  4124  0246                     ;lcd.c: 72:         LCD.RS = 1;
  4125                           	bsf	(8),4	;volatile
  4126  0246  1608               	line	73
  4127                           ;lcd.c: 73:         LCD.BUS = nibble.LO;
  4128                           	movf	(putLCD@nibble),w	;volatile
  4129  0247  0873               	andlw	(1<<4)-1
  4130  0248  390F               	movwf	(??_putLCD+0)+0
  4131  0249  00F0               	movf	(8),w	;volatile
  4132  024A  0808               	xorwf	(??_putLCD+0)+0,w
  4133  024B  0670               	andlw	not ((1<<4)-1)
  4134  024C  39F0               	xorwf	(??_putLCD+0)+0,w
  4135  024D  0670               	movwf	(8)	;volatile
  4136  024E  0088               	line	74
  4137                           	
  4138                           l1554:	
  4139  024F                     ;lcd.c: 74:         LCD.EN = 0;
  4140                           	bcf	(8),5	;volatile
  4141  024F  1288               	line	75
  4142                           	
  4143                           l1556:	
  4144  0250                     ;lcd.c: 75:         _delay((unsigned long)((2)*(4000000/4000.0)));
  4145                           	opt asmopt_push
  4146                           opt asmopt_off
  4147                           movlw	3
  4148  0250  3003               movwf	((??_putLCD+0)+0+1),f
  4149  0251  00F1               	movlw	151
  4150  0252  3097               movwf	((??_putLCD+0)+0),f
  4151  0253  00F0               	u1177:
  4152  0254                     decfsz	((??_putLCD+0)+0),f
  4153  0254  0BF0               	goto	u1177
  4154  0255  2A54               	decfsz	((??_putLCD+0)+0+1),f
  4155  0256  0BF1               	goto	u1177
  4156  0257  2A54               	nop2
  4157  0258  2A59               opt asmopt_pop
  4158                           
  4159                           	line	76
  4160                           	
  4161                           l1558:	
  4162  0259                     ;lcd.c: 76:         LCD.EN = 1;
  4163                           	bcf	status, 5	;RP0=0, select bank0
  4164  0259  1283               	bcf	status, 6	;RP1=0, select bank0
  4165  025A  1303               	bsf	(8),5	;volatile
  4166  025B  1688               	line	77
  4167                           	
  4168                           l279:	
  4169  025C                     	return
  4170  025C  0008               	opt stack 0
  4171                           GLOBAL	__end_of_putLCD
  4172                           	__end_of_putLCD:
  4173  025D                     	signat	_putLCD,4217
  4174                           	global	_gotoxy
  4175                           
  4176 ;; *************** function _gotoxy *****************
  4177 ;; Defined at:
  4178 ;;		line 78 in file "lcd.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  x               1    wreg     unsigned char 
  4181 ;;  y               1    4[COMMON] unsigned char 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  x               1    7[COMMON] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, pclath, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4193 ;;      Params:         1       0       0       0       0
  4194 ;;      Locals:         1       0       0       0       0
  4195 ;;      Temps:          2       0       0       0       0
  4196 ;;      Totals:         4       0       0       0       0
  4197 ;;Total ram usage:        4 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    1
  4200 ;; This function calls:
  4201 ;;		_cmdLCD
  4202 ;; This function is called by:
  4203 ;;		_writeLCD
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  4207                           	line	78
  4208                           global __ptext3
  4209                           __ptext3:	;psect for function _gotoxy
  4210  016D                     psect	text3
  4211                           	file	"lcd.c"
  4212                           	line	78
  4213                           	global	__size_of_gotoxy
  4214                           	__size_of_gotoxy	equ	__end_of_gotoxy-_gotoxy
  4215  0018                     	
  4216                           _gotoxy:	
  4217  016D                     ;incstack = 0
  4218                           	opt	stack 5
  4219                           ; Regs used in _gotoxy: [wreg+status,2+status,0+pclath+cstack]
  4220                           ;gotoxy@x stored from wreg
  4221                           	movwf	(gotoxy@x)
  4222  016D  00F7               	line	80
  4223                           	
  4224                           l1560:	
  4225  016E                     ;lcd.c: 78: void gotoxy( unsigned char x, unsigned char y );lcd.c: 79: {;lcd.c: 80:     
                                     cmdLCD((0x80 | 0xC0 * y) + (x & 0X3F));
  4226                           	movlw	low(03Fh)
  4227  016E  303F               	andwf	(gotoxy@x),w
  4228  016F  0577               	movwf	(??_gotoxy+0)+0
  4229  0170  00F5               	movf	(gotoxy@y),w
  4230  0171  0874               	movwf	(??_gotoxy+1)+0
  4231  0172  00F6               	movlw	(06h)-1
  4232  0173  3005               u625:
  4233  0174                     	clrc
  4234  0174  1003               	rlf	(??_gotoxy+1)+0,f
  4235  0175  0DF6               	addlw	-1
  4236  0176  3EFF               	skipz
  4237  0177  1D03               	goto	u625
  4238  0178  2974               	clrc
  4239  0179  1003               	rlf	(??_gotoxy+1)+0,w
  4240  017A  0D76               	xorlw	0ffh
  4241  017B  3AFF               	addlw	1
  4242  017C  3E01               	iorlw	080h
  4243  017D  3880               	addwf	0+(??_gotoxy+0)+0,w
  4244  017E  0775               	fcall	_cmdLCD
  4245  017F  120A  118A  22D9  120A  118A  	line	81
  4246                           	
  4247                           l282:	
  4248  0184                     	return
  4249  0184  0008               	opt stack 0
  4250                           GLOBAL	__end_of_gotoxy
  4251                           	__end_of_gotoxy:
  4252  0185                     	signat	_gotoxy,8313
  4253                           	global	_serialIOscan
  4254                           
  4255 ;; *************** function _serialIOscan *****************
  4256 ;; Defined at:
  4257 ;;		line 76 in file "serialIO.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  i               1    8[COMMON] unsigned char 
  4262 ;;  j               1    7[COMMON] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4272 ;;      Params:         0       0       0       0       0
  4273 ;;      Locals:         2       0       0       0       0
  4274 ;;      Temps:          3       0       0       0       0
  4275 ;;      Totals:         5       0       0       0       0
  4276 ;;Total ram usage:        5 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    1
  4279 ;; This function calls:
  4280 ;;		_serialIObyteShift
  4281 ;;		_serialIOload
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  4287                           	file	"serialIO.c"
  4288                           	line	76
  4289                           global __ptext4
  4290                           __ptext4:	;psect for function _serialIOscan
  4291  025D                     psect	text4
  4292                           	file	"serialIO.c"
  4293                           	line	76
  4294                           	global	__size_of_serialIOscan
  4295                           	__size_of_serialIOscan	equ	__end_of_serialIOscan-_serialIOscan
  4296  003D                     	
  4297                           _serialIOscan:	
  4298  025D                     ;incstack = 0
  4299                           	opt	stack 6
  4300                           ; Regs used in _serialIOscan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4301                           	line	79
  4302                           	
  4303                           l1710:	
  4304  025D                     ;serialIO.c: 78:     unsigned char i,j;;serialIO.c: 79:     j = lenSerialIO - 1;
  4305                           	bcf	status, 5	;RP0=0, select bank0
  4306  025D  1283               	bcf	status, 6	;RP1=0, select bank0
  4307  025E  1303               	movf	(_lenSerialIO),w
  4308  025F  0820               	addlw	0FFh
  4309  0260  3EFF               	movwf	(??_serialIOscan+0)+0
  4310  0261  00F4               	movf	(??_serialIOscan+0)+0,w
  4311  0262  0874               	movwf	(serialIOscan@j)
  4312  0263  00F7               	line	80
  4313                           	
  4314                           l1712:	
  4315  0264                     ;serialIO.c: 80:     serialIOload();
  4316                           	fcall	_serialIOload
  4317  0264  120A  118A  2121  120A  118A  	line	81
  4318                           	
  4319                           l1714:	
  4320  0269                     ;serialIO.c: 81:     for( i=0; i<lenSerialIO; i++ )
  4321                           	clrf	(serialIOscan@i)
  4322  0269  01F8               	goto	l1720
  4323  026A  2A8B               	
  4324                           l248:	
  4325  026B                     	line	83
  4326                           	
  4327                           l1716:	
  4328  026B                     ;serialIO.c: 82:     {;serialIO.c: 83:         ptrSerialIn[i] = serialIObyteShift( ptrSe
                                 rialOut[j-i]);
  4329                           	decf	(serialIOscan@i),w
  4330  026B  0378               	xorlw	0ffh
  4331  026C  3AFF               	addwf	(serialIOscan@j),w
  4332  026D  0777               	bcf	status, 5	;RP0=0, select bank0
  4333  026E  1283               	bcf	status, 6	;RP1=0, select bank0
  4334  026F  1303               	addwf	(_ptrSerialOut),w
  4335  0270  0721               	movwf	(??_serialIOscan+0)+0
  4336  0271  00F4               	movf	0+(??_serialIOscan+0)+0,w
  4337  0272  0874               	movwf	fsr0
  4338  0273  0084               	bcf	status, 7	;select IRP bank0
  4339  0274  1383               	movf	indf,w
  4340  0275  0800               	fcall	_serialIObyteShift
  4341  0276  120A  118A  21CA  120A  118A  	movwf	(??_serialIOscan+1)+0
  4342  027B  00F5               	movf	(serialIOscan@i),w
  4343  027C  0878               	bcf	status, 5	;RP0=0, select bank0
  4344  027D  1283               	bcf	status, 6	;RP1=0, select bank0
  4345  027E  1303               	addwf	(_ptrSerialIn),w
  4346  027F  0722               	movwf	(??_serialIOscan+2)+0
  4347  0280  00F6               	movf	0+(??_serialIOscan+2)+0,w
  4348  0281  0876               	movwf	fsr0
  4349  0282  0084               	movf	(??_serialIOscan+1)+0,w
  4350  0283  0875               	bcf	status, 7	;select IRP bank0
  4351  0284  1383               	movwf	indf
  4352  0285  0080               	line	84
  4353                           	
  4354                           l1718:	
  4355  0286                     ;serialIO.c: 84:     }
  4356                           	movlw	low(01h)
  4357  0286  3001               	movwf	(??_serialIOscan+0)+0
  4358  0287  00F4               	movf	(??_serialIOscan+0)+0,w
  4359  0288  0874               	addwf	(serialIOscan@i),f
  4360  0289  07F8               	goto	l1720
  4361  028A  2A8B               	
  4362                           l247:	
  4363  028B                     	
  4364                           l1720:	
  4365  028B                     	bcf	status, 5	;RP0=0, select bank0
  4366  028B  1283               	bcf	status, 6	;RP1=0, select bank0
  4367  028C  1303               	movf	(_lenSerialIO),w
  4368  028D  0820               	subwf	(serialIOscan@i),w
  4369  028E  0278               	skipc
  4370  028F  1C03               	goto	u751
  4371  0290  2A92               	goto	u750
  4372  0291  2A93               u751:
  4373  0292                     	goto	l1716
  4374  0292  2A6B               u750:
  4375  0293                     	goto	l1722
  4376  0293  2A94               	
  4377                           l249:	
  4378  0294                     	line	85
  4379                           	
  4380                           l1722:	
  4381  0294                     ;serialIO.c: 85:     serialIOload();
  4382                           	fcall	_serialIOload
  4383  0294  120A  118A  2121  120A  118A  	line	86
  4384                           	
  4385                           l250:	
  4386  0299                     	return
  4387  0299  0008               	opt stack 0
  4388                           GLOBAL	__end_of_serialIOscan
  4389                           	__end_of_serialIOscan:
  4390  029A                     	signat	_serialIOscan,89
  4391                           	global	_serialIOload
  4392                           
  4393 ;; *************** function _serialIOload *****************
  4394 ;; Defined at:
  4395 ;;		line 45 in file "serialIO.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;		None
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      void 
  4402 ;; Registers used:
  4403 ;;		None
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4409 ;;      Params:         0       0       0       0       0
  4410 ;;      Locals:         0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0
  4412 ;;      Totals:         0       0       0       0       0
  4413 ;;Total ram usage:        0 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_serialIOscan
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  4422                           	line	45
  4423                           global __ptext5
  4424                           __ptext5:	;psect for function _serialIOload
  4425  0121                     psect	text5
  4426                           	file	"serialIO.c"
  4427                           	line	45
  4428                           	global	__size_of_serialIOload
  4429                           	__size_of_serialIOload	equ	__end_of_serialIOload-_serialIOload
  4430  0005                     	
  4431                           _serialIOload:	
  4432  0121                     ;incstack = 0
  4433                           	opt	stack 6
  4434                           ; Regs used in _serialIOload: []
  4435                           	line	47
  4436                           	
  4437                           l1518:	
  4438  0121                     ;serialIO.c: 47:     SERIALIO.SHLD = 0;
  4439                           	bcf	status, 5	;RP0=0, select bank0
  4440  0121  1283               	bcf	status, 6	;RP1=0, select bank0
  4441  0122  1303               	bcf	(9),0	;volatile
  4442  0123  1009               	line	48
  4443                           ;serialIO.c: 48:     SERIALIO.SHLD = 1;
  4444                           	bsf	(9),0	;volatile
  4445  0124  1409               	line	49
  4446                           	
  4447                           l235:	
  4448  0125                     	return
  4449  0125  0008               	opt stack 0
  4450                           GLOBAL	__end_of_serialIOload
  4451                           	__end_of_serialIOload:
  4452  0126                     	signat	_serialIOload,89
  4453                           	global	_serialIObyteShift
  4454                           
  4455 ;; *************** function _serialIObyteShift *****************
  4456 ;; Defined at:
  4457 ;;		line 50 in file "serialIO.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  dataIn          1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  dataIn          1    1[COMMON] unsigned char 
  4462 ;;  dataBit         1    3[COMMON] unsigned char 
  4463 ;;  dataOut         1    2[COMMON] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      unsigned char 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4473 ;;      Params:         0       0       0       0       0
  4474 ;;      Locals:         3       0       0       0       0
  4475 ;;      Temps:          1       0       0       0       0
  4476 ;;      Totals:         4       0       0       0       0
  4477 ;;Total ram usage:        4 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_serialIOscan
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  4486                           	line	50
  4487                           global __ptext6
  4488                           __ptext6:	;psect for function _serialIObyteShift
  4489  01CA                     psect	text6
  4490                           	file	"serialIO.c"
  4491                           	line	50
  4492                           	global	__size_of_serialIObyteShift
  4493                           	__size_of_serialIObyteShift	equ	__end_of_serialIObyteShift-_serialIObyteShift
  4494  002B                     	
  4495                           _serialIObyteShift:	
  4496  01CA                     ;incstack = 0
  4497                           	opt	stack 6
  4498                           ; Regs used in _serialIObyteShift: [wreg+status,2+status,0]
  4499                           ;serialIObyteShift@dataIn stored from wreg
  4500                           	movwf	(serialIObyteShift@dataIn)
  4501  01CA  00F1               	line	55
  4502                           	
  4503                           l1520:	
  4504  01CB                     ;serialIO.c: 50: unsigned char serialIObyteShift( unsigned char dataIn );serialIO.c: 51:
                                  {;serialIO.c: 52:     unsigned char dataBit;;serialIO.c: 53:     unsigned char dataOut;
                                 ;serialIO.c: 55:     dataBit = 0x80;
  4505                           	movlw	low(080h)
  4506  01CB  3080               	movwf	(??_serialIObyteShift+0)+0
  4507  01CC  00F0               	movf	(??_serialIObyteShift+0)+0,w
  4508  01CD  0870               	movwf	(serialIObyteShift@dataBit)
  4509  01CE  00F3               	line	56
  4510                           	
  4511                           l1522:	
  4512  01CF                     ;serialIO.c: 56:     dataOut = 0;
  4513                           	clrf	(serialIObyteShift@dataOut)
  4514  01CF  01F2               	line	58
  4515                           ;serialIO.c: 58:     while( dataBit )
  4516                           	goto	l1534
  4517  01D0  29EA               	
  4518                           l239:	
  4519  01D1                     	line	60
  4520                           ;serialIO.c: 59:     {;serialIO.c: 60:         SERIALIO.CLK = 0;
  4521                           	bcf	status, 5	;RP0=0, select bank0
  4522  01D1  1283               	bcf	status, 6	;RP1=0, select bank0
  4523  01D2  1303               	bcf	(9),1	;volatile
  4524  01D3  1089               	line	61
  4525                           	
  4526                           l1524:	
  4527  01D4                     ;serialIO.c: 61:         if( dataIn & dataBit )
  4528                           	movf	(serialIObyteShift@dataIn),w
  4529  01D4  0871               	andwf	(serialIObyteShift@dataBit),w
  4530  01D5  0573               	btfsc	status,2
  4531  01D6  1903               	goto	u591
  4532  01D7  29D9               	goto	u590
  4533  01D8  29DA               u591:
  4534  01D9                     	goto	l240
  4535  01D9  29DC               u590:
  4536  01DA                     	line	62
  4537                           	
  4538                           l1526:	
  4539  01DA                     ;serialIO.c: 62:             SERIALIO.OUT = 1;
  4540                           	bsf	(9),2	;volatile
  4541  01DA  1509               	goto	l241
  4542  01DB  29DD               	line	63
  4543                           ;serialIO.c: 63:         else
  4544                           	
  4545                           l240:	
  4546  01DC                     	line	64
  4547                           ;serialIO.c: 64:             SERIALIO.OUT = 0;
  4548                           	bcf	(9),2	;volatile
  4549  01DC  1109               	
  4550                           l241:	
  4551  01DD                     	line	66
  4552                           ;serialIO.c: 66:         if( PORTAbits.RA0 )
  4553                           	btfss	(5),0	;volatile
  4554  01DD  1C05               	goto	u601
  4555  01DE  29E0               	goto	u600
  4556  01DF  29E1               u601:
  4557  01E0                     	goto	l1530
  4558  01E0  29E6               u600:
  4559  01E1                     	line	67
  4560                           	
  4561                           l1528:	
  4562  01E1                     ;serialIO.c: 67:             dataOut |= dataBit;
  4563                           	movf	(serialIObyteShift@dataBit),w
  4564  01E1  0873               	movwf	(??_serialIObyteShift+0)+0
  4565  01E2  00F0               	movf	(??_serialIObyteShift+0)+0,w
  4566  01E3  0870               	iorwf	(serialIObyteShift@dataOut),f
  4567  01E4  04F2               	goto	l1530
  4568  01E5  29E6               	
  4569                           l242:	
  4570  01E6                     	line	68
  4571                           	
  4572                           l1530:	
  4573  01E6                     ;serialIO.c: 68:         SERIALIO.CLK = 1;
  4574                           	bsf	(9),1	;volatile
  4575  01E6  1489               	line	69
  4576                           	
  4577                           l1532:	
  4578  01E7                     ;serialIO.c: 69:         dataBit >>= 1;
  4579                           	clrc
  4580  01E7  1003               	rrf	(serialIObyteShift@dataBit),f
  4581  01E8  0CF3               
  4582                           	goto	l1534
  4583  01E9  29EA               	line	70
  4584                           ;serialIO.c: 70:     }
  4585                           	
  4586                           l238:	
  4587  01EA                     	line	58
  4588                           	
  4589                           l1534:	
  4590  01EA                     ;serialIO.c: 58:     while( dataBit )
  4591                           	movf	((serialIObyteShift@dataBit)),w
  4592  01EA  0873               	btfss	status,2
  4593  01EB  1D03               	goto	u611
  4594  01EC  29EE               	goto	u610
  4595  01ED  29EF               u611:
  4596  01EE                     	goto	l239
  4597  01EE  29D1               u610:
  4598  01EF                     	
  4599                           l243:	
  4600  01EF                     	line	71
  4601                           ;serialIO.c: 71:     SERIALIO.CLK = 0;
  4602                           	bcf	status, 5	;RP0=0, select bank0
  4603  01EF  1283               	bcf	status, 6	;RP1=0, select bank0
  4604  01F0  1303               	bcf	(9),1	;volatile
  4605  01F1  1089               	line	72
  4606                           	
  4607                           l1536:	
  4608  01F2                     ;serialIO.c: 72:     return( dataOut );
  4609                           	movf	(serialIObyteShift@dataOut),w
  4610  01F2  0872               	goto	l244
  4611  01F3  29F4               	
  4612                           l1538:	
  4613  01F4                     	line	73
  4614                           	
  4615                           l244:	
  4616  01F4                     	return
  4617  01F4  0008               	opt stack 0
  4618                           GLOBAL	__end_of_serialIObyteShift
  4619                           	__end_of_serialIObyteShift:
  4620  01F5                     	signat	_serialIObyteShift,4217
  4621                           	global	_putFIFO
  4622                           
  4623 ;; *************** function _putFIFO *****************
  4624 ;; Defined at:
  4625 ;;		line 17 in file "fifo.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  c               1    wreg     unsigned char 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  c               1    1[COMMON] unsigned char 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      void 
  4632 ;; Registers used:
  4633 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4639 ;;      Params:         0       0       0       0       0
  4640 ;;      Locals:         1       0       0       0       0
  4641 ;;      Temps:          1       0       0       0       0
  4642 ;;      Totals:         2       0       0       0       0
  4643 ;;Total ram usage:        2 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; This function calls:
  4646 ;;		Nothing
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  4652                           	file	"fifo.c"
  4653                           	line	17
  4654                           global __ptext7
  4655                           __ptext7:	;psect for function _putFIFO
  4656  0135                     psect	text7
  4657                           	file	"fifo.c"
  4658                           	line	17
  4659                           	global	__size_of_putFIFO
  4660                           	__size_of_putFIFO	equ	__end_of_putFIFO-_putFIFO
  4661  000E                     	
  4662                           _putFIFO:	
  4663  0135                     ;incstack = 0
  4664                           	opt	stack 7
  4665                           ; Regs used in _putFIFO: [wreg-fsr0h+status,2+status,0]
  4666                           ;putFIFO@c stored from wreg
  4667                           	movwf	(putFIFO@c)
  4668  0135  00F1               	line	19
  4669                           	
  4670                           l1562:	
  4671  0136                     ;fifo.c: 17: void putFIFO( unsigned char c );fifo.c: 18: {;fifo.c: 19:     fifo[ fifoHea
                                 d ] = c;
  4672                           	movf	(putFIFO@c),w
  4673  0136  0871               	movwf	(??_putFIFO+0)+0
  4674  0137  00F0               	movf	(_fifoHead),w
  4675  0138  087D               	addlw	low(_fifo|((0x0)<<8))&0ffh
  4676  0139  3E25               	movwf	fsr0
  4677  013A  0084               	movf	(??_putFIFO+0)+0,w
  4678  013B  0870               	bcf	status, 7	;select IRP bank0
  4679  013C  1383               	movwf	indf
  4680  013D  0080               	line	20
  4681                           	
  4682                           l1564:	
  4683  013E                     ;fifo.c: 20:     ++fifoHead;
  4684                           	movlw	low(01h)
  4685  013E  3001               	movwf	(??_putFIFO+0)+0
  4686  013F  00F0               	movf	(??_putFIFO+0)+0,w
  4687  0140  0870               	addwf	(_fifoHead),f
  4688  0141  07FD               	line	21
  4689                           	
  4690                           l9:	
  4691  0142                     	return
  4692  0142  0008               	opt stack 0
  4693                           GLOBAL	__end_of_putFIFO
  4694                           	__end_of_putFIFO:
  4695  0143                     	signat	_putFIFO,4217
  4696                           	global	_previousKey
  4697                           
  4698 ;; *************** function _previousKey *****************
  4699 ;; Defined at:
  4700 ;;		line 55 in file "keyboard.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      unsigned char 
  4707 ;; Registers used:
  4708 ;;		wreg
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4714 ;;      Params:         0       0       0       0       0
  4715 ;;      Locals:         0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0
  4717 ;;      Totals:         0       0       0       0       0
  4718 ;;Total ram usage:        0 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_main
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           psect	text8,local,class=CODE,delta=2,merge=1,group=0
  4727                           	file	"keyboard.c"
  4728                           	line	55
  4729                           global __ptext8
  4730                           __ptext8:	;psect for function _previousKey
  4731  011C                     psect	text8
  4732                           	file	"keyboard.c"
  4733                           	line	55
  4734                           	global	__size_of_previousKey
  4735                           	__size_of_previousKey	equ	__end_of_previousKey-_previousKey
  4736  0005                     	
  4737                           _previousKey:	
  4738  011C                     ;incstack = 0
  4739                           	opt	stack 7
  4740                           ; Regs used in _previousKey: [wreg]
  4741                           	line	57
  4742                           	
  4743                           l1596:	
  4744  011C                     ;keyboard.c: 57:     return( prevKey );
  4745                           	bcf	status, 5	;RP0=0, select bank0
  4746  011C  1283               	bcf	status, 6	;RP1=0, select bank0
  4747  011D  1303               	movf	(_prevKey),w
  4748  011E  0824               	goto	l48
  4749  011F  2920               	
  4750                           l1598:	
  4751  0120                     	line	58
  4752                           	
  4753                           l48:	
  4754  0120                     	return
  4755  0120  0008               	opt stack 0
  4756                           GLOBAL	__end_of_previousKey
  4757                           	__end_of_previousKey:
  4758  0121                     	signat	_previousKey,89
  4759                           	global	_keyboardScan
  4760                           
  4761 ;; *************** function _keyboardScan *****************
  4762 ;; Defined at:
  4763 ;;		line 75 in file "keyboard.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  j               1   10[COMMON] unsigned char 
  4768 ;;  i               1    9[COMMON] unsigned char 
  4769 ;;  aux             1    8[COMMON] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      unsigned char 
  4772 ;; Registers used:
  4773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4779 ;;      Params:         0       0       0       0       0
  4780 ;;      Locals:         3       0       0       0       0
  4781 ;;      Temps:          8       0       0       0       0
  4782 ;;      Totals:        11       0       0       0       0
  4783 ;;Total ram usage:       11 bytes
  4784 ;; Hardware stack levels used:    2
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           psect	text9,local,class=CODE,delta=2,merge=1,group=0
  4792                           	line	75
  4793                           global __ptext9
  4794                           __ptext9:	;psect for function _keyboardScan
  4795  0338                     psect	text9
  4796                           	file	"keyboard.c"
  4797                           	line	75
  4798                           	global	__size_of_keyboardScan
  4799                           	__size_of_keyboardScan	equ	__end_of_keyboardScan-_keyboardScan
  4800  007F                     	
  4801                           _keyboardScan:	
  4802  0338                     ;incstack = 0
  4803                           	opt	stack 6
  4804                           ; Regs used in _keyboardScan: [wreg-fsr0h+status,2+status,0+pclath]
  4805                           	line	78
  4806                           	
  4807                           l1604:	
  4808  0338                     ;keyboard.c: 77:     unsigned char i, j;;keyboard.c: 78:     unsigned char aux = 0;
  4809                           	clrf	(keyboardScan@aux)
  4810  0338  01F8               	line	80
  4811                           ;keyboard.c: 80:     for( j=0; j<4; j++ )
  4812                           	clrf	(keyboardScan@j)
  4813  0339  01FA               	
  4814                           l1606:	
  4815  033A                     	movlw	low(04h)
  4816  033A  3004               	subwf	(keyboardScan@j),w
  4817  033B  027A               	skipc
  4818  033C  1C03               	goto	u661
  4819  033D  2B3F               	goto	u660
  4820  033E  2B40               u661:
  4821  033F                     	goto	l1610
  4822  033F  2B42               u660:
  4823  0340                     	goto	l1630
  4824  0340  2BAB               	
  4825                           l1608:	
  4826  0341                     	goto	l1630
  4827  0341  2BAB               	
  4828                           l54:	
  4829  0342                     	line	82
  4830                           	
  4831                           l1610:	
  4832  0342                     ;keyboard.c: 81:     {;keyboard.c: 82:         KEYBOARDbits.cols = ~(0x01<<j);
  4833                           	movlw	low(01h)
  4834  0342  3001               	movwf	(??_keyboardScan+0)+0
  4835  0343  00F0               	incf	(keyboardScan@j),w
  4836  0344  0A7A               	goto	u674
  4837  0345  2B48               u675:
  4838  0346                     	clrc
  4839  0346  1003               	rlf	(??_keyboardScan+0)+0,f
  4840  0347  0DF0               u674:
  4841  0348                     	addlw	-1
  4842  0348  3EFF               	skipz
  4843  0349  1D03               	goto	u675
  4844  034A  2B46               	movf	0+(??_keyboardScan+0)+0,w
  4845  034B  0870               	xorlw	0ffh
  4846  034C  3AFF               	movwf	(??_keyboardScan+1)+0
  4847  034D  00F1               	swapf	(??_keyboardScan+1)+0,f
  4848  034E  0EF1               	bcf	status, 5	;RP0=0, select bank0
  4849  034F  1283               	bcf	status, 6	;RP1=0, select bank0
  4850  0350  1303               	movf	(6),w	;volatile
  4851  0351  0806               	xorwf	(??_keyboardScan+1)+0,w
  4852  0352  0671               	andlw	not (((1<<4)-1)<<4)
  4853  0353  390F               	xorwf	(??_keyboardScan+1)+0,w
  4854  0354  0671               	movwf	(6)	;volatile
  4855  0355  0086               	line	83
  4856                           	
  4857                           l1612:	
  4858  0356                     ;keyboard.c: 83:         for( i=0; i<4; i++ )
  4859                           	clrf	(keyboardScan@i)
  4860  0356  01F9               	
  4861                           l1614:	
  4862  0357                     	movlw	low(04h)
  4863  0357  3004               	subwf	(keyboardScan@i),w
  4864  0358  0279               	skipc
  4865  0359  1C03               	goto	u681
  4866  035A  2B5C               	goto	u680
  4867  035B  2B5D               u681:
  4868  035C                     	goto	l1618
  4869  035C  2B5F               u680:
  4870  035D                     	goto	l1626
  4871  035D  2BA0               	
  4872                           l1616:	
  4873  035E                     	goto	l1626
  4874  035E  2BA0               	
  4875                           l56:	
  4876  035F                     	line	85
  4877                           	
  4878                           l1618:	
  4879  035F                     ;keyboard.c: 84:         {;keyboard.c: 85:             if( ~KEYBOARDbits.rows & (0x01<<i
                                 ) )
  4880                           	movf	(6),w	;volatile
  4881  035F  0806               	andlw	(1<<4)-1
  4882  0360  390F               	movwf	(??_keyboardScan+0)+0
  4883  0361  00F0               	comf	(??_keyboardScan+0)+0,w
  4884  0362  0970               	movwf	(??_keyboardScan+1)+0
  4885  0363  00F1               	clrf	(??_keyboardScan+1)+0+1
  4886  0364  01F2               	comf	(??_keyboardScan+1)+0+1
  4887  0365  09F2               	incf	(keyboardScan@i),w
  4888  0366  0A79               	movwf	(??_keyboardScan+3)+0
  4889  0367  00F3               	movlw	01h
  4890  0368  3001               	movwf	(??_keyboardScan+4)+0
  4891  0369  00F4               	movlw	0
  4892  036A  3000               	movwf	(??_keyboardScan+4)+0+1
  4893  036B  00F5               	goto	u694
  4894  036C  2B70               u695:
  4895  036D                     	clrc
  4896  036D  1003               	rlf	(??_keyboardScan+4)+0,f
  4897  036E  0DF4               	rlf	(??_keyboardScan+4)+1,f
  4898  036F  0DF5               u694:
  4899  0370                     	decfsz	(??_keyboardScan+3)+0,f
  4900  0370  0BF3               	goto	u695
  4901  0371  2B6D               	
  4902                           	movf	0+(??_keyboardScan+1)+0,w
  4903  0372  0871               	andwf	0+(??_keyboardScan+4)+0,w
  4904  0373  0574               	movwf	(??_keyboardScan+6)+0
  4905  0374  00F6               	movf	1+(??_keyboardScan+1)+0,w
  4906  0375  0872               	andwf	1+(??_keyboardScan+4)+0,w
  4907  0376  0575               	movwf	1+(??_keyboardScan+6)+0
  4908  0377  00F7               	movf	((??_keyboardScan+6)+0),w
  4909  0378  0876               iorwf	((??_keyboardScan+6)+1),w
  4910  0379  0477               	btfsc	status,2
  4911  037A  1903               	goto	u701
  4912  037B  2B7D               	goto	u700
  4913  037C  2B7E               u701:
  4914  037D                     	goto	l1622
  4915  037D  2B95               u700:
  4916  037E                     	line	86
  4917                           	
  4918                           l1620:	
  4919  037E                     ;keyboard.c: 86:                 aux = keyboardMatrix[i][j];
  4920                           	movf	(keyboardScan@i),w
  4921  037E  0879               	movwf	(??_keyboardScan+0)+0
  4922  037F  00F0               	movlw	02h
  4923  0380  3002               u715:
  4924  0381                     	clrc
  4925  0381  1003               	rlf	(??_keyboardScan+0)+0,f
  4926  0382  0DF0               	addlw	-1
  4927  0383  3EFF               	skipz
  4928  0384  1D03               	goto	u715
  4929  0385  2B81               	movlw	(low((((_keyboardMatrix)-__stringbase)|8000h)))&0ffh
  4930  0386  3001               	addwf	0+(??_keyboardScan+0)+0,w
  4931  0387  0770               	movwf	(??_keyboardScan+1)+0
  4932  0388  00F1               	movf	(keyboardScan@j),w
  4933  0389  087A               	addwf	0+(??_keyboardScan+1)+0,w
  4934  038A  0771               	movwf	fsr0
  4935  038B  0084               	fcall	stringdir
  4936  038C  120A  118A  2003  120A  118A  	movwf	(??_keyboardScan+2)+0
  4937  0391  00F2               	movf	(??_keyboardScan+2)+0,w
  4938  0392  0872               	movwf	(keyboardScan@aux)
  4939  0393  00F8               	goto	l1622
  4940  0394  2B95               	
  4941                           l58:	
  4942  0395                     	line	87
  4943                           	
  4944                           l1622:	
  4945  0395                     ;keyboard.c: 87:         }
  4946                           	movlw	low(01h)
  4947  0395  3001               	movwf	(??_keyboardScan+0)+0
  4948  0396  00F0               	movf	(??_keyboardScan+0)+0,w
  4949  0397  0870               	addwf	(keyboardScan@i),f
  4950  0398  07F9               	
  4951                           l1624:	
  4952  0399                     	movlw	low(04h)
  4953  0399  3004               	subwf	(keyboardScan@i),w
  4954  039A  0279               	skipc
  4955  039B  1C03               	goto	u721
  4956  039C  2B9E               	goto	u720
  4957  039D  2B9F               u721:
  4958  039E                     	goto	l1618
  4959  039E  2B5F               u720:
  4960  039F                     	goto	l1626
  4961  039F  2BA0               	
  4962                           l57:	
  4963  03A0                     	line	88
  4964                           	
  4965                           l1626:	
  4966  03A0                     ;keyboard.c: 88:     }
  4967                           	movlw	low(01h)
  4968  03A0  3001               	movwf	(??_keyboardScan+0)+0
  4969  03A1  00F0               	movf	(??_keyboardScan+0)+0,w
  4970  03A2  0870               	addwf	(keyboardScan@j),f
  4971  03A3  07FA               	
  4972                           l1628:	
  4973  03A4                     	movlw	low(04h)
  4974  03A4  3004               	subwf	(keyboardScan@j),w
  4975  03A5  027A               	skipc
  4976  03A6  1C03               	goto	u731
  4977  03A7  2BA9               	goto	u730
  4978  03A8  2BAA               u731:
  4979  03A9                     	goto	l1610
  4980  03A9  2B42               u730:
  4981  03AA                     	goto	l1630
  4982  03AA  2BAB               	
  4983                           l55:	
  4984  03AB                     	line	90
  4985                           	
  4986                           l1630:	
  4987  03AB                     ;keyboard.c: 90:     prevKey = currKey;
  4988                           	bcf	status, 5	;RP0=0, select bank0
  4989  03AB  1283               	bcf	status, 6	;RP1=0, select bank0
  4990  03AC  1303               	movf	(_currKey),w
  4991  03AD  0823               	movwf	(??_keyboardScan+0)+0
  4992  03AE  00F0               	movf	(??_keyboardScan+0)+0,w
  4993  03AF  0870               	movwf	(_prevKey)
  4994  03B0  00A4               	line	91
  4995                           ;keyboard.c: 91:     currKey = aux;
  4996                           	movf	(keyboardScan@aux),w
  4997  03B1  0878               	movwf	(??_keyboardScan+0)+0
  4998  03B2  00F0               	movf	(??_keyboardScan+0)+0,w
  4999  03B3  0870               	movwf	(_currKey)
  5000  03B4  00A3               	goto	l59
  5001  03B5  2BB6               	line	93
  5002                           	
  5003                           l1632:	
  5004  03B6                     	line	94
  5005                           ;keyboard.c: 93:     return( aux );;	Return value of _keyboardScan is never used
  5006                           	
  5007                           l59:	
  5008  03B6                     	return
  5009  03B6  0008               	opt stack 0
  5010                           GLOBAL	__end_of_keyboardScan
  5011                           	__end_of_keyboardScan:
  5012  03B7                     	signat	_keyboardScan,89
  5013                           	global	_initSerialIO
  5014                           
  5015 ;; *************** function _initSerialIO *****************
  5016 ;; Defined at:
  5017 ;;		line 89 in file "serialIO.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  ptrIn           1    wreg     PTR unsigned char 
  5020 ;;		 -> main@sensor(1), 
  5021 ;;  ptrOut          1    0[COMMON] PTR unsigned char 
  5022 ;;		 -> main@atuador(1), 
  5023 ;;  length          1    1[COMMON] unsigned char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  ptrIn           1    3[COMMON] PTR unsigned char 
  5026 ;;		 -> main@sensor(1), 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      void 
  5029 ;; Registers used:
  5030 ;;		wreg
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5036 ;;      Params:         2       0       0       0       0
  5037 ;;      Locals:         1       0       0       0       0
  5038 ;;      Temps:          1       0       0       0       0
  5039 ;;      Totals:         4       0       0       0       0
  5040 ;;Total ram usage:        4 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_main
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           psect	text10,local,class=CODE,delta=2,merge=1,group=0
  5049                           	file	"serialIO.c"
  5050                           	line	89
  5051                           global __ptext10
  5052                           __ptext10:	;psect for function _initSerialIO
  5053  01F5                     psect	text10
  5054                           	file	"serialIO.c"
  5055                           	line	89
  5056                           	global	__size_of_initSerialIO
  5057                           	__size_of_initSerialIO	equ	__end_of_initSerialIO-_initSerialIO
  5058  0034                     	
  5059                           _initSerialIO:	
  5060  01F5                     ;incstack = 0
  5061                           	opt	stack 7
  5062                           ; Regs used in _initSerialIO: [wreg]
  5063                           ;initSerialIO@ptrIn stored from wreg
  5064                           	movwf	(initSerialIO@ptrIn)
  5065  01F5  00F3               	line	91
  5066                           	
  5067                           l1670:	
  5068  01F6                     ;serialIO.c: 89: void initSerialIO( unsigned char * ptrIn, unsigned char * ptrOut, unsig
                                 ned char length );serialIO.c: 90: {;serialIO.c: 91:     ptrSerialIn = ptrIn;
  5069                           	movf	(initSerialIO@ptrIn),w
  5070  01F6  0873               	movwf	(??_initSerialIO+0)+0
  5071  01F7  00F2               	movf	(??_initSerialIO+0)+0,w
  5072  01F8  0872               	bcf	status, 5	;RP0=0, select bank0
  5073  01F9  1283               	bcf	status, 6	;RP1=0, select bank0
  5074  01FA  1303               	movwf	(_ptrSerialIn)
  5075  01FB  00A2               	line	92
  5076                           ;serialIO.c: 92:     ptrSerialOut = ptrOut;
  5077                           	movf	(initSerialIO@ptrOut),w
  5078  01FC  0870               	movwf	(??_initSerialIO+0)+0
  5079  01FD  00F2               	movf	(??_initSerialIO+0)+0,w
  5080  01FE  0872               	movwf	(_ptrSerialOut)
  5081  01FF  00A1               	line	93
  5082                           ;serialIO.c: 93:     lenSerialIO = length;
  5083                           	movf	(initSerialIO@length),w
  5084  0200  0871               	movwf	(??_initSerialIO+0)+0
  5085  0201  00F2               	movf	(??_initSerialIO+0)+0,w
  5086  0202  0872               	movwf	(_lenSerialIO)
  5087  0203  00A0               	line	95
  5088                           	
  5089                           l1672:	
  5090  0204                     ;serialIO.c: 95:     PORTEbits.RE0 = 0;
  5091                           	bcf	(9),0	;volatile
  5092  0204  1009               	line	96
  5093                           	
  5094                           l1674:	
  5095  0205                     ;serialIO.c: 96:     ANSELbits.ANS5 = 0;
  5096                           	bsf	status, 5	;RP0=1, select bank3
  5097  0205  1683               	bsf	status, 6	;RP1=1, select bank3
  5098  0206  1703               	bcf	(392)^0180h,5	;volatile
  5099  0207  1288               	line	97
  5100                           	
  5101                           l1676:	
  5102  0208                     ;serialIO.c: 97:     TRISEbits.TRISE0 = 0;
  5103                           	bsf	status, 5	;RP0=1, select bank1
  5104  0208  1683               	bcf	status, 6	;RP1=0, select bank1
  5105  0209  1303               	bcf	(137)^080h,0	;volatile
  5106  020A  1009               	line	100
  5107                           	
  5108                           l1678:	
  5109  020B                     ;serialIO.c: 100:     PORTEbits.RE1 = 0;
  5110                           	bcf	status, 5	;RP0=0, select bank0
  5111  020B  1283               	bcf	status, 6	;RP1=0, select bank0
  5112  020C  1303               	bcf	(9),1	;volatile
  5113  020D  1089               	line	101
  5114                           	
  5115                           l1680:	
  5116  020E                     ;serialIO.c: 101:     ANSELbits.ANS6 = 0;
  5117                           	bsf	status, 5	;RP0=1, select bank3
  5118  020E  1683               	bsf	status, 6	;RP1=1, select bank3
  5119  020F  1703               	bcf	(392)^0180h,6	;volatile
  5120  0210  1308               	line	102
  5121                           	
  5122                           l1682:	
  5123  0211                     ;serialIO.c: 102:     TRISEbits.TRISE1 = 0;
  5124                           	bsf	status, 5	;RP0=1, select bank1
  5125  0211  1683               	bcf	status, 6	;RP1=0, select bank1
  5126  0212  1303               	bcf	(137)^080h,1	;volatile
  5127  0213  1089               	line	105
  5128                           	
  5129                           l1684:	
  5130  0214                     ;serialIO.c: 105:     PORTEbits.RE2 = 0;
  5131                           	bcf	status, 5	;RP0=0, select bank0
  5132  0214  1283               	bcf	status, 6	;RP1=0, select bank0
  5133  0215  1303               	bcf	(9),2	;volatile
  5134  0216  1109               	line	106
  5135                           	
  5136                           l1686:	
  5137  0217                     ;serialIO.c: 106:     ANSELbits.ANS7 = 0;
  5138                           	bsf	status, 5	;RP0=1, select bank3
  5139  0217  1683               	bsf	status, 6	;RP1=1, select bank3
  5140  0218  1703               	bcf	(392)^0180h,7	;volatile
  5141  0219  1388               	line	107
  5142                           	
  5143                           l1688:	
  5144  021A                     ;serialIO.c: 107:     TRISEbits.TRISE2 = 0;
  5145                           	bsf	status, 5	;RP0=1, select bank1
  5146  021A  1683               	bcf	status, 6	;RP1=0, select bank1
  5147  021B  1303               	bcf	(137)^080h,2	;volatile
  5148  021C  1109               	line	112
  5149                           	
  5150                           l1690:	
  5151  021D                     ;serialIO.c: 112:     ANSELbits.ANS0 = 0;
  5152                           	bsf	status, 5	;RP0=1, select bank3
  5153  021D  1683               	bsf	status, 6	;RP1=1, select bank3
  5154  021E  1703               	bcf	(392)^0180h,0	;volatile
  5155  021F  1008               	line	113
  5156                           	
  5157                           l1692:	
  5158  0220                     ;serialIO.c: 113:     TRISAbits.TRISA0 = 1;
  5159                           	bsf	status, 5	;RP0=1, select bank1
  5160  0220  1683               	bcf	status, 6	;RP1=0, select bank1
  5161  0221  1303               	bsf	(133)^080h,0	;volatile
  5162  0222  1405               	line	117
  5163                           	
  5164                           l1694:	
  5165  0223                     ;serialIO.c: 117:     SERIALIO.CLK = 0;
  5166                           	bcf	status, 5	;RP0=0, select bank0
  5167  0223  1283               	bcf	status, 6	;RP1=0, select bank0
  5168  0224  1303               	bcf	(9),1	;volatile
  5169  0225  1089               	line	118
  5170                           	
  5171                           l1696:	
  5172  0226                     ;serialIO.c: 118:     SERIALIO.OUT = 0;
  5173                           	bcf	(9),2	;volatile
  5174  0226  1109               	line	119
  5175                           	
  5176                           l1698:	
  5177  0227                     ;serialIO.c: 119:     SERIALIO.SHLD = 1;
  5178                           	bsf	(9),0	;volatile
  5179  0227  1409               	line	120
  5180                           	
  5181                           l253:	
  5182  0228                     	return
  5183  0228  0008               	opt stack 0
  5184                           GLOBAL	__end_of_initSerialIO
  5185                           	__end_of_initSerialIO:
  5186  0229                     	signat	_initSerialIO,12409
  5187                           	global	_initLCD
  5188                           
  5189 ;; *************** function _initLCD *****************
  5190 ;; Defined at:
  5191 ;;		line 15 in file "lcd.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;		None
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      void 
  5198 ;; Registers used:
  5199 ;;		wreg, status,2, status,0, pclath, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5205 ;;      Params:         0       0       0       0       0
  5206 ;;      Locals:         0       0       0       0       0
  5207 ;;      Temps:          2       0       0       0       0
  5208 ;;      Totals:         2       0       0       0       0
  5209 ;;Total ram usage:        2 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    1
  5212 ;; This function calls:
  5213 ;;		_cmdLCD
  5214 ;; This function is called by:
  5215 ;;		_main
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           psect	text11,local,class=CODE,delta=2,merge=1,group=0
  5219                           	file	"lcd.c"
  5220                           	line	15
  5221                           global __ptext11
  5222                           __ptext11:	;psect for function _initLCD
  5223  029A                     psect	text11
  5224                           	file	"lcd.c"
  5225                           	line	15
  5226                           	global	__size_of_initLCD
  5227                           	__size_of_initLCD	equ	__end_of_initLCD-_initLCD
  5228  003F                     	
  5229                           _initLCD:	
  5230  029A                     ;incstack = 0
  5231                           	opt	stack 6
  5232                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  5233                           	line	17
  5234                           	
  5235                           l1648:	
  5236  029A                     ;lcd.c: 17:         LCD.B0 = 0;
  5237                           	bcf	status, 5	;RP0=0, select bank0
  5238  029A  1283               	bcf	status, 6	;RP1=0, select bank0
  5239  029B  1303               	bcf	(8),6	;volatile
  5240  029C  1308               	line	18
  5241                           ;lcd.c: 18:         LCD.B1 = 0;
  5242                           	bcf	(8),7	;volatile
  5243  029D  1388               	line	19
  5244                           ;lcd.c: 19:         LCD.RS = 0;
  5245                           	bcf	(8),4	;volatile
  5246  029E  1208               	line	20
  5247                           	
  5248                           l1650:	
  5249  029F                     ;lcd.c: 20:         LCD.BUS = 0x3;
  5250                           	movf	(8),w	;volatile
  5251  029F  0808               	andlw	not (((1<<4)-1)<<0)
  5252  02A0  39F0               	iorlw	(03h & ((1<<4)-1))<<0
  5253  02A1  3803               	movwf	(8)	;volatile
  5254  02A2  0088               	line	21
  5255                           	
  5256                           l1652:	
  5257  02A3                     ;lcd.c: 21:         LCD.EN = 1;
  5258                           	bsf	(8),5	;volatile
  5259  02A3  1688               	line	22
  5260                           	
  5261                           l1654:	
  5262  02A4                     ;lcd.c: 22:         TRISD = 0xC0;
  5263                           	movlw	low(0C0h)
  5264  02A4  30C0               	bsf	status, 5	;RP0=1, select bank1
  5265  02A5  1683               	bcf	status, 6	;RP1=0, select bank1
  5266  02A6  1303               	movwf	(136)^080h	;volatile
  5267  02A7  0088               	line	24
  5268                           	
  5269                           l1656:	
  5270  02A8                     ;lcd.c: 24:         _delay((unsigned long)((100)*(4000000/4000.0)));
  5271                           	opt asmopt_push
  5272                           opt asmopt_off
  5273                           movlw	130
  5274  02A8  3082               movwf	((??_initLCD+0)+0+1),f
  5275  02A9  00F5               	movlw	221
  5276  02AA  30DD               movwf	((??_initLCD+0)+0),f
  5277  02AB  00F4               	u1187:
  5278  02AC                     decfsz	((??_initLCD+0)+0),f
  5279  02AC  0BF4               	goto	u1187
  5280  02AD  2AAC               	decfsz	((??_initLCD+0)+0+1),f
  5281  02AE  0BF5               	goto	u1187
  5282  02AF  2AAC               	nop2
  5283  02B0  2AB1               opt asmopt_pop
  5284                           
  5285                           	line	26
  5286                           	
  5287                           l1658:	
  5288  02B1                     ;lcd.c: 26:         cmdLCD(0x20);
  5289                           	movlw	low(020h)
  5290  02B1  3020               	fcall	_cmdLCD
  5291  02B2  120A  118A  22D9  120A  118A  	line	27
  5292                           	
  5293                           l1660:	
  5294  02B7                     ;lcd.c: 27:         cmdLCD(0x28);
  5295                           	movlw	low(028h)
  5296  02B7  3028               	fcall	_cmdLCD
  5297  02B8  120A  118A  22D9  120A  118A  	line	28
  5298                           	
  5299                           l1662:	
  5300  02BD                     ;lcd.c: 28:         cmdLCD(0x0C);
  5301                           	movlw	low(0Ch)
  5302  02BD  300C               	fcall	_cmdLCD
  5303  02BE  120A  118A  22D9  120A  118A  	line	29
  5304                           	
  5305                           l1664:	
  5306  02C3                     ;lcd.c: 29:         cmdLCD(0x01);
  5307                           	movlw	low(01h)
  5308  02C3  3001               	fcall	_cmdLCD
  5309  02C4  120A  118A  22D9  120A  118A  	line	30
  5310                           	
  5311                           l1666:	
  5312  02C9                     ;lcd.c: 30:         cmdLCD(0x02);
  5313                           	movlw	low(02h)
  5314  02C9  3002               	fcall	_cmdLCD
  5315  02CA  120A  118A  22D9  120A  118A  	line	32
  5316                           	
  5317                           l1668:	
  5318  02CF                     ;lcd.c: 32:         _delay((unsigned long)((100)*(4000000/4000.0)));
  5319                           	opt asmopt_push
  5320                           opt asmopt_off
  5321                           movlw	130
  5322  02CF  3082               movwf	((??_initLCD+0)+0+1),f
  5323  02D0  00F5               	movlw	221
  5324  02D1  30DD               movwf	((??_initLCD+0)+0),f
  5325  02D2  00F4               	u1197:
  5326  02D3                     decfsz	((??_initLCD+0)+0),f
  5327  02D3  0BF4               	goto	u1197
  5328  02D4  2AD3               	decfsz	((??_initLCD+0)+0+1),f
  5329  02D5  0BF5               	goto	u1197
  5330  02D6  2AD3               	nop2
  5331  02D7  2AD8               opt asmopt_pop
  5332                           
  5333                           	line	33
  5334                           	
  5335                           l264:	
  5336  02D8                     	return
  5337  02D8  0008               	opt stack 0
  5338                           GLOBAL	__end_of_initLCD
  5339                           	__end_of_initLCD:
  5340  02D9                     	signat	_initLCD,89
  5341                           	global	_initKeyboard
  5342                           
  5343 ;; *************** function _initKeyboard *****************
  5344 ;; Defined at:
  5345 ;;		line 103 in file "keyboard.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, status,2
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5359 ;;      Params:         0       0       0       0       0
  5360 ;;      Locals:         0       0       0       0       0
  5361 ;;      Temps:          0       0       0       0       0
  5362 ;;      Totals:         0       0       0       0       0
  5363 ;;Total ram usage:        0 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           psect	text12,local,class=CODE,delta=2,merge=1,group=0
  5372                           	file	"keyboard.c"
  5373                           	line	103
  5374                           global __ptext12
  5375                           __ptext12:	;psect for function _initKeyboard
  5376  0143                     psect	text12
  5377                           	file	"keyboard.c"
  5378                           	line	103
  5379                           	global	__size_of_initKeyboard
  5380                           	__size_of_initKeyboard	equ	__end_of_initKeyboard-_initKeyboard
  5381  0013                     	
  5382                           _initKeyboard:	
  5383  0143                     ;incstack = 0
  5384                           	opt	stack 7
  5385                           ; Regs used in _initKeyboard: [wreg+status,2]
  5386                           	line	105
  5387                           	
  5388                           l1634:	
  5389  0143                     ;keyboard.c: 105:     PORTB = 0xFF;
  5390                           	movlw	low(0FFh)
  5391  0143  30FF               	bcf	status, 5	;RP0=0, select bank0
  5392  0144  1283               	bcf	status, 6	;RP1=0, select bank0
  5393  0145  1303               	movwf	(6)	;volatile
  5394  0146  0086               	line	106
  5395                           	
  5396                           l1636:	
  5397  0147                     ;keyboard.c: 106:     ANSELH = 0;
  5398                           	bsf	status, 5	;RP0=1, select bank3
  5399  0147  1683               	bsf	status, 6	;RP1=1, select bank3
  5400  0148  1703               	clrf	(393)^0180h	;volatile
  5401  0149  0189               	line	107
  5402                           	
  5403                           l1638:	
  5404  014A                     ;keyboard.c: 107:     TRISB = 0x0F;
  5405                           	movlw	low(0Fh)
  5406  014A  300F               	bsf	status, 5	;RP0=1, select bank1
  5407  014B  1683               	bcf	status, 6	;RP1=0, select bank1
  5408  014C  1303               	movwf	(134)^080h	;volatile
  5409  014D  0086               	line	108
  5410                           	
  5411                           l1640:	
  5412  014E                     ;keyboard.c: 108:     WPUB = 0xFF;
  5413                           	movlw	low(0FFh)
  5414  014E  30FF               	movwf	(149)^080h	;volatile
  5415  014F  0095               	line	109
  5416                           	
  5417                           l1642:	
  5418  0150                     ;keyboard.c: 109:     OPTION_REGbits.nRBPU = 0;
  5419                           	bcf	(129)^080h,7	;volatile
  5420  0150  1381               	line	111
  5421                           	
  5422                           l1644:	
  5423  0151                     ;keyboard.c: 111:     prevKey = 0;
  5424                           	bcf	status, 5	;RP0=0, select bank0
  5425  0151  1283               	bcf	status, 6	;RP1=0, select bank0
  5426  0152  1303               	clrf	(_prevKey)
  5427  0153  01A4               	line	112
  5428                           	
  5429                           l1646:	
  5430  0154                     ;keyboard.c: 112:     currKey = 0;
  5431                           	clrf	(_currKey)
  5432  0154  01A3               	line	113
  5433                           	
  5434                           l62:	
  5435  0155                     	return
  5436  0155  0008               	opt stack 0
  5437                           GLOBAL	__end_of_initKeyboard
  5438                           	__end_of_initKeyboard:
  5439  0156                     	signat	_initKeyboard,89
  5440                           	global	_getFIFO
  5441                           
  5442 ;; *************** function _getFIFO *****************
  5443 ;; Defined at:
  5444 ;;		line 23 in file "fifo.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  aux             1    1[COMMON] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      unsigned char 
  5451 ;; Registers used:
  5452 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5458 ;;      Params:         0       0       0       0       0
  5459 ;;      Locals:         1       0       0       0       0
  5460 ;;      Temps:          1       0       0       0       0
  5461 ;;      Totals:         2       0       0       0       0
  5462 ;;Total ram usage:        2 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; This function calls:
  5465 ;;		Nothing
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           psect	text13,local,class=CODE,delta=2,merge=1,group=0
  5471                           	file	"fifo.c"
  5472                           	line	23
  5473                           global __ptext13
  5474                           __ptext13:	;psect for function _getFIFO
  5475  0156                     psect	text13
  5476                           	file	"fifo.c"
  5477                           	line	23
  5478                           	global	__size_of_getFIFO
  5479                           	__size_of_getFIFO	equ	__end_of_getFIFO-_getFIFO
  5480  0017                     	
  5481                           _getFIFO:	
  5482  0156                     ;incstack = 0
  5483                           	opt	stack 7
  5484                           ; Regs used in _getFIFO: [wreg-fsr0h+status,2+status,0]
  5485                           	line	25
  5486                           	
  5487                           l1566:	
  5488  0156                     ;fifo.c: 25:     unsigned char aux = 0;
  5489                           	clrf	(getFIFO@aux)
  5490  0156  01F1               	line	27
  5491                           	
  5492                           l1568:	
  5493  0157                     ;fifo.c: 27:     if( fifoTail != fifoHead )
  5494                           	movf	(_fifoTail),w
  5495  0157  087C               	xorwf	(_fifoHead),w
  5496  0158  067D               	skipnz
  5497  0159  1903               	goto	u631
  5498  015A  295C               	goto	u630
  5499  015B  295D               u631:
  5500  015C                     	goto	l1574
  5501  015C  296A               u630:
  5502  015D                     	line	29
  5503                           	
  5504                           l1570:	
  5505  015D                     ;fifo.c: 28:     {;fifo.c: 29:         aux = fifo[ fifoTail ];
  5506                           	movf	(_fifoTail),w
  5507  015D  087C               	addlw	low(_fifo|((0x0)<<8))&0ffh
  5508  015E  3E25               	movwf	fsr0
  5509  015F  0084               	bcf	status, 7	;select IRP bank0
  5510  0160  1383               	movf	indf,w
  5511  0161  0800               	movwf	(??_getFIFO+0)+0
  5512  0162  00F0               	movf	(??_getFIFO+0)+0,w
  5513  0163  0870               	movwf	(getFIFO@aux)
  5514  0164  00F1               	line	30
  5515                           	
  5516                           l1572:	
  5517  0165                     ;fifo.c: 30:         ++fifoTail;
  5518                           	movlw	low(01h)
  5519  0165  3001               	movwf	(??_getFIFO+0)+0
  5520  0166  00F0               	movf	(??_getFIFO+0)+0,w
  5521  0167  0870               	addwf	(_fifoTail),f
  5522  0168  07FC               	goto	l1574
  5523  0169  296A               	line	31
  5524                           ;fifo.c: 31:     }
  5525                           	
  5526                           l12:	
  5527  016A                     	line	32
  5528                           	
  5529                           l1574:	
  5530  016A                     ;fifo.c: 32:     return( aux );
  5531                           	movf	(getFIFO@aux),w
  5532  016A  0871               	goto	l13
  5533  016B  296C               	
  5534                           l1576:	
  5535  016C                     	line	33
  5536                           	
  5537                           l13:	
  5538  016C                     	return
  5539  016C  0008               	opt stack 0
  5540                           GLOBAL	__end_of_getFIFO
  5541                           	__end_of_getFIFO:
  5542  016D                     	signat	_getFIFO,89
  5543                           	global	_displayFIFO
  5544                           
  5545 ;; *************** function _displayFIFO *****************
  5546 ;; Defined at:
  5547 ;;		line 40 in file "fifo.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      PTR void 
  5554 ;; Registers used:
  5555 ;;		wreg
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5561 ;;      Params:         0       0       0       0       0
  5562 ;;      Locals:         0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0
  5564 ;;      Totals:         0       0       0       0       0
  5565 ;;Total ram usage:        0 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_main
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           psect	text14,local,class=CODE,delta=2,merge=1,group=0
  5574                           	line	40
  5575                           global __ptext14
  5576                           __ptext14:	;psect for function _displayFIFO
  5577  0114                     psect	text14
  5578                           	file	"fifo.c"
  5579                           	line	40
  5580                           	global	__size_of_displayFIFO
  5581                           	__size_of_displayFIFO	equ	__end_of_displayFIFO-_displayFIFO
  5582  0003                     	
  5583                           _displayFIFO:	
  5584  0114                     ;incstack = 0
  5585                           	opt	stack 7
  5586                           ; Regs used in _displayFIFO: [wreg]
  5587                           	line	42
  5588                           	
  5589                           l1578:	
  5590  0114                     ;fifo.c: 42:     return( fifo );
  5591                           	movlw	(low(_fifo|((0x0)<<8)))&0ffh
  5592  0114  3025               	goto	l19
  5593  0115  2916               	
  5594                           l1580:	
  5595  0116                     	line	43
  5596                           	
  5597                           l19:	
  5598  0116                     	return
  5599  0116  0008               	opt stack 0
  5600                           GLOBAL	__end_of_displayFIFO
  5601                           	__end_of_displayFIFO:
  5602  0117                     	signat	_displayFIFO,89
  5603                           	global	_delFIFO
  5604                           
  5605 ;; *************** function _delFIFO *****************
  5606 ;; Defined at:
  5607 ;;		line 45 in file "fifo.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  n               1    wreg     unsigned char 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  n               1    1[COMMON] unsigned char 
  5612 ;;  ret             1    2[COMMON] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      unsigned char 
  5615 ;; Registers used:
  5616 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5622 ;;      Params:         0       0       0       0       0
  5623 ;;      Locals:         2       0       0       0       0
  5624 ;;      Temps:          1       0       0       0       0
  5625 ;;      Totals:         3       0       0       0       0
  5626 ;;Total ram usage:        3 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_main
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           psect	text15,local,class=CODE,delta=2,merge=1,group=0
  5635                           	line	45
  5636                           global __ptext15
  5637                           __ptext15:	;psect for function _delFIFO
  5638  0185                     psect	text15
  5639                           	file	"fifo.c"
  5640                           	line	45
  5641                           	global	__size_of_delFIFO
  5642                           	__size_of_delFIFO	equ	__end_of_delFIFO-_delFIFO
  5643  0021                     	
  5644                           _delFIFO:	
  5645  0185                     ;incstack = 0
  5646                           	opt	stack 7
  5647                           ; Regs used in _delFIFO: [wreg-fsr0h+status,2+status,0]
  5648                           ;delFIFO@n stored from wreg
  5649                           	movwf	(delFIFO@n)
  5650  0185  00F1               	line	48
  5651                           	
  5652                           l1582:	
  5653  0186                     ;fifo.c: 45: unsigned char delFIFO( unsigned char n );fifo.c: 46: {;fifo.c: 47:     unsi
                                 gned char ret;;fifo.c: 48:     while( n && fifoHead )
  5654                           	goto	l22
  5655  0186  2997               	
  5656                           l23:	
  5657  0187                     	line	50
  5658                           	
  5659                           l1584:	
  5660  0187                     ;fifo.c: 49:     {;fifo.c: 50:         --fifoHead;
  5661                           	movlw	01h
  5662  0187  3001               	subwf	(_fifoHead),f
  5663  0188  02FD               	line	51
  5664                           	
  5665                           l1586:	
  5666  0189                     ;fifo.c: 51:         ret = fifo[fifoHead];
  5667                           	movf	(_fifoHead),w
  5668  0189  087D               	addlw	low(_fifo|((0x0)<<8))&0ffh
  5669  018A  3E25               	movwf	fsr0
  5670  018B  0084               	bcf	status, 7	;select IRP bank0
  5671  018C  1383               	movf	indf,w
  5672  018D  0800               	movwf	(??_delFIFO+0)+0
  5673  018E  00F0               	movf	(??_delFIFO+0)+0,w
  5674  018F  0870               	movwf	(delFIFO@ret)
  5675  0190  00F2               	line	52
  5676                           	
  5677                           l1588:	
  5678  0191                     ;fifo.c: 52:         fifo[ fifoHead ] = 0;
  5679                           	movf	(_fifoHead),w
  5680  0191  087D               	addlw	low(_fifo|((0x0)<<8))&0ffh
  5681  0192  3E25               	movwf	fsr0
  5682  0193  0084               	clrf	indf
  5683  0194  0180               	line	53
  5684                           ;fifo.c: 53:         --n;
  5685                           	movlw	01h
  5686  0195  3001               	subwf	(delFIFO@n),f
  5687  0196  02F1               	line	54
  5688                           ;fifo.c: 54:     }
  5689                           	
  5690                           l22:	
  5691  0197                     	line	48
  5692                           ;fifo.c: 48:     while( n && fifoHead )
  5693                           	movf	((delFIFO@n)),w
  5694  0197  0871               	btfsc	status,2
  5695  0198  1903               	goto	u641
  5696  0199  299B               	goto	u640
  5697  019A  299C               u641:
  5698  019B                     	goto	l1592
  5699  019B  29A3               u640:
  5700  019C                     	
  5701                           l1590:	
  5702  019C                     	movf	((_fifoHead)),w
  5703  019C  087D               	btfss	status,2
  5704  019D  1D03               	goto	u651
  5705  019E  29A0               	goto	u650
  5706  019F  29A1               u651:
  5707  01A0                     	goto	l1584
  5708  01A0  2987               u650:
  5709  01A1                     	goto	l1592
  5710  01A1  29A3               	
  5711                           l25:	
  5712  01A2                     	goto	l1592
  5713  01A2  29A3               	
  5714                           l26:	
  5715  01A3                     	line	55
  5716                           	
  5717                           l1592:	
  5718  01A3                     ;fifo.c: 55:     return( ret );
  5719                           	movf	(delFIFO@ret),w
  5720  01A3  0872               	goto	l27
  5721  01A4  29A5               	
  5722                           l1594:	
  5723  01A5                     	line	56
  5724                           	
  5725                           l27:	
  5726  01A5                     	return
  5727  01A5  0008               	opt stack 0
  5728                           GLOBAL	__end_of_delFIFO
  5729                           	__end_of_delFIFO:
  5730  01A6                     	signat	_delFIFO,4217
  5731                           	global	_currentKey
  5732                           
  5733 ;; *************** function _currentKey *****************
  5734 ;; Defined at:
  5735 ;;		line 65 in file "keyboard.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;		None
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;		None
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      unsigned char 
  5742 ;; Registers used:
  5743 ;;		wreg
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5749 ;;      Params:         0       0       0       0       0
  5750 ;;      Locals:         0       0       0       0       0
  5751 ;;      Temps:          0       0       0       0       0
  5752 ;;      Totals:         0       0       0       0       0
  5753 ;;Total ram usage:        0 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; This function calls:
  5756 ;;		Nothing
  5757 ;; This function is called by:
  5758 ;;		_main
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           psect	text16,local,class=CODE,delta=2,merge=1,group=0
  5762                           	file	"keyboard.c"
  5763                           	line	65
  5764                           global __ptext16
  5765                           __ptext16:	;psect for function _currentKey
  5766  0117                     psect	text16
  5767                           	file	"keyboard.c"
  5768                           	line	65
  5769                           	global	__size_of_currentKey
  5770                           	__size_of_currentKey	equ	__end_of_currentKey-_currentKey
  5771  0005                     	
  5772                           _currentKey:	
  5773  0117                     ;incstack = 0
  5774                           	opt	stack 7
  5775                           ; Regs used in _currentKey: [wreg]
  5776                           	line	67
  5777                           	
  5778                           l1600:	
  5779  0117                     ;keyboard.c: 67:     return( currKey );
  5780                           	bcf	status, 5	;RP0=0, select bank0
  5781  0117  1283               	bcf	status, 6	;RP1=0, select bank0
  5782  0118  1303               	movf	(_currKey),w
  5783  0119  0823               	goto	l51
  5784  011A  291B               	
  5785                           l1602:	
  5786  011B                     	line	68
  5787                           	
  5788                           l51:	
  5789  011B                     	return
  5790  011B  0008               	opt stack 0
  5791                           GLOBAL	__end_of_currentKey
  5792                           	__end_of_currentKey:
  5793  011C                     	signat	_currentKey,89
  5794                           	global	_clearLCD
  5795                           
  5796 ;; *************** function _clearLCD *****************
  5797 ;; Defined at:
  5798 ;;		line 98 in file "lcd.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;		None
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  1    wreg      void 
  5805 ;; Registers used:
  5806 ;;		wreg, status,2, status,0, pclath, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5812 ;;      Params:         0       0       0       0       0
  5813 ;;      Locals:         0       0       0       0       0
  5814 ;;      Temps:          0       0       0       0       0
  5815 ;;      Totals:         0       0       0       0       0
  5816 ;;Total ram usage:        0 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    1
  5819 ;; This function calls:
  5820 ;;		_cmdLCD
  5821 ;; This function is called by:
  5822 ;;		_main
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           psect	text17,local,class=CODE,delta=2,merge=1,group=0
  5826                           	file	"lcd.c"
  5827                           	line	98
  5828                           global __ptext17
  5829                           __ptext17:	;psect for function _clearLCD
  5830  0126                     psect	text17
  5831                           	file	"lcd.c"
  5832                           	line	98
  5833                           	global	__size_of_clearLCD
  5834                           	__size_of_clearLCD	equ	__end_of_clearLCD-_clearLCD
  5835  0007                     	
  5836                           _clearLCD:	
  5837  0126                     ;incstack = 0
  5838                           	opt	stack 6
  5839                           ; Regs used in _clearLCD: [wreg+status,2+status,0+pclath+cstack]
  5840                           	line	100
  5841                           	
  5842                           l1700:	
  5843  0126                     ;lcd.c: 100:     cmdLCD(0x01);
  5844                           	movlw	low(01h)
  5845  0126  3001               	fcall	_cmdLCD
  5846  0127  120A  118A  22D9  120A  118A  	line	101
  5847                           	
  5848                           l297:	
  5849  012C                     	return
  5850  012C  0008               	opt stack 0
  5851                           GLOBAL	__end_of_clearLCD
  5852                           	__end_of_clearLCD:
  5853  012D                     	signat	_clearLCD,89
  5854                           	global	_cmdLCD
  5855                           
  5856 ;; *************** function _cmdLCD *****************
  5857 ;; Defined at:
  5858 ;;		line 35 in file "lcd.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  cmd             1    wreg     unsigned char 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  cmd             1    2[COMMON] unsigned char 
  5863 ;;  nibble          1    3[COMMON] volatile struct .
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5873 ;;      Params:         0       0       0       0       0
  5874 ;;      Locals:         2       0       0       0       0
  5875 ;;      Temps:          2       0       0       0       0
  5876 ;;      Totals:         4       0       0       0       0
  5877 ;;Total ram usage:        4 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_initLCD
  5883 ;;		_gotoxy
  5884 ;;		_clearLCD
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           psect	text18,local,class=CODE,delta=2,merge=1,group=0
  5888                           	line	35
  5889                           global __ptext18
  5890                           __ptext18:	;psect for function _cmdLCD
  5891  02D9                     psect	text18
  5892                           	file	"lcd.c"
  5893                           	line	35
  5894                           	global	__size_of_cmdLCD
  5895                           	__size_of_cmdLCD	equ	__end_of_cmdLCD-_cmdLCD
  5896  005F                     	
  5897                           _cmdLCD:	
  5898  02D9                     ;incstack = 0
  5899                           	opt	stack 5
  5900                           ; Regs used in _cmdLCD: [wreg+status,2+status,0]
  5901                           ;cmdLCD@cmd stored from wreg
  5902                           	movwf	(cmdLCD@cmd)
  5903  02D9  00F2               	line	39
  5904                           	
  5905                           l1484:	
  5906  02DA                     ;lcd.c: 35: void cmdLCD( unsigned char cmd );lcd.c: 36: {;lcd.c: 37:         volatile RE
                                 Gnibble_t nibble;;lcd.c: 39:         nibble.HILO = cmd;
  5907                           	movf	(cmdLCD@cmd),w
  5908  02DA  0872               	movwf	(??_cmdLCD+0)+0
  5909  02DB  00F0               	movf	(??_cmdLCD+0)+0,w
  5910  02DC  0870               	movwf	(cmdLCD@nibble)	;volatile
  5911  02DD  00F3               	line	40
  5912                           	
  5913                           l1486:	
  5914  02DE                     ;lcd.c: 40:         LCD.RS = 0;
  5915                           	bcf	status, 5	;RP0=0, select bank0
  5916  02DE  1283               	bcf	status, 6	;RP1=0, select bank0
  5917  02DF  1303               	bcf	(8),4	;volatile
  5918  02E0  1208               	line	41
  5919                           	
  5920                           l1488:	
  5921  02E1                     ;lcd.c: 41:         LCD.BUS = nibble.HI ;
  5922                           	swapf	(cmdLCD@nibble),w	;volatile
  5923  02E1  0E73               	andlw	(1<<4)-1
  5924  02E2  390F               	movwf	(??_cmdLCD+0)+0
  5925  02E3  00F0               	movf	(8),w	;volatile
  5926  02E4  0808               	xorwf	(??_cmdLCD+0)+0,w
  5927  02E5  0670               	andlw	not ((1<<4)-1)
  5928  02E6  39F0               	xorwf	(??_cmdLCD+0)+0,w
  5929  02E7  0670               	movwf	(8)	;volatile
  5930  02E8  0088               	line	42
  5931                           	
  5932                           l1490:	
  5933  02E9                     ;lcd.c: 42:          LCD.EN = 0;
  5934                           	bcf	(8),5	;volatile
  5935  02E9  1288               	line	43
  5936                           	
  5937                           l1492:	
  5938  02EA                     ;lcd.c: 43:         if( cmd == 0x01 || cmd == 0x02 )
  5939                           		decf	((cmdLCD@cmd)),w
  5940  02EA  0372               	btfsc	status,2
  5941  02EB  1903               	goto	u541
  5942  02EC  2AEE               	goto	u540
  5943  02ED  2AEF               u541:
  5944  02EE                     	goto	l1496
  5945  02EE  2AF6               u540:
  5946  02EF                     	
  5947                           l1494:	
  5948  02EF                     		movlw	2
  5949  02EF  3002               	xorwf	((cmdLCD@cmd)),w
  5950  02F0  0672               	btfss	status,2
  5951  02F1  1D03               	goto	u551
  5952  02F2  2AF4               	goto	u550
  5953  02F3  2AF5               u551:
  5954  02F4                     	goto	l1498
  5955  02F4  2B00               u550:
  5956  02F5                     	goto	l1496
  5957  02F5  2AF6               	
  5958                           l269:	
  5959  02F6                     	line	44
  5960                           	
  5961                           l1496:	
  5962  02F6                     ;lcd.c: 44:         _delay((unsigned long)((2)*(4000000/4000.0)));
  5963                           	opt asmopt_push
  5964                           opt asmopt_off
  5965                           movlw	3
  5966  02F6  3003               movwf	((??_cmdLCD+0)+0+1),f
  5967  02F7  00F1               	movlw	151
  5968  02F8  3097               movwf	((??_cmdLCD+0)+0),f
  5969  02F9  00F0               	u1207:
  5970  02FA                     decfsz	((??_cmdLCD+0)+0),f
  5971  02FA  0BF0               	goto	u1207
  5972  02FB  2AFA               	decfsz	((??_cmdLCD+0)+0+1),f
  5973  02FC  0BF1               	goto	u1207
  5974  02FD  2AFA               	nop2
  5975  02FE  2AFF               opt asmopt_pop
  5976                           
  5977                           	goto	l1500
  5978  02FF  2B05               	line	45
  5979                           ;lcd.c: 45:         else
  5980                           	
  5981                           l267:	
  5982  0300                     	line	46
  5983                           	
  5984                           l1498:	
  5985  0300                     ;lcd.c: 46:         _delay((unsigned long)((40)*(4000000/4000000.0)));
  5986                           	opt asmopt_push
  5987                           opt asmopt_off
  5988                           	movlw	13
  5989  0300  300D               movwf	((??_cmdLCD+0)+0),f
  5990  0301  00F0               	u1217:
  5991  0302                     decfsz	(??_cmdLCD+0)+0,f
  5992  0302  0BF0               	goto	u1217
  5993  0303  2B02               opt asmopt_pop
  5994                           
  5995                           	goto	l1500
  5996  0304  2B05               	
  5997                           l270:	
  5998  0305                     	line	47
  5999                           	
  6000                           l1500:	
  6001  0305                     ;lcd.c: 47:         LCD.EN = 1;
  6002                           	bcf	status, 5	;RP0=0, select bank0
  6003  0305  1283               	bcf	status, 6	;RP1=0, select bank0
  6004  0306  1303               	bsf	(8),5	;volatile
  6005  0307  1688               	line	49
  6006                           	
  6007                           l1502:	
  6008  0308                     ;lcd.c: 49:         if( cmd != (0x20) )
  6009                           		movlw	32
  6010  0308  3020               	xorwf	((cmdLCD@cmd)),w
  6011  0309  0672               	btfsc	status,2
  6012  030A  1903               	goto	u561
  6013  030B  2B0D               	goto	u560
  6014  030C  2B0E               u561:
  6015  030D                     	goto	l276
  6016  030D  2B37               u560:
  6017  030E                     	line	51
  6018                           	
  6019                           l1504:	
  6020  030E                     ;lcd.c: 50:     {;lcd.c: 51:        LCD.RS = 0;
  6021                           	bcf	(8),4	;volatile
  6022  030E  1208               	line	52
  6023                           	
  6024                           l1506:	
  6025  030F                     ;lcd.c: 52:        LCD.BUS = nibble.LO;
  6026                           	movf	(cmdLCD@nibble),w	;volatile
  6027  030F  0873               	andlw	(1<<4)-1
  6028  0310  390F               	movwf	(??_cmdLCD+0)+0
  6029  0311  00F0               	movf	(8),w	;volatile
  6030  0312  0808               	xorwf	(??_cmdLCD+0)+0,w
  6031  0313  0670               	andlw	not ((1<<4)-1)
  6032  0314  39F0               	xorwf	(??_cmdLCD+0)+0,w
  6033  0315  0670               	movwf	(8)	;volatile
  6034  0316  0088               	line	53
  6035                           	
  6036                           l1508:	
  6037  0317                     ;lcd.c: 53:        LCD.EN = 0;
  6038                           	bcf	(8),5	;volatile
  6039  0317  1288               	line	54
  6040                           ;lcd.c: 54:        if( cmd == 0x01 || cmd == 0x02 )
  6041                           		decf	((cmdLCD@cmd)),w
  6042  0318  0372               	btfsc	status,2
  6043  0319  1903               	goto	u571
  6044  031A  2B1C               	goto	u570
  6045  031B  2B1D               u571:
  6046  031C                     	goto	l1512
  6047  031C  2B24               u570:
  6048  031D                     	
  6049                           l1510:	
  6050  031D                     		movlw	2
  6051  031D  3002               	xorwf	((cmdLCD@cmd)),w
  6052  031E  0672               	btfss	status,2
  6053  031F  1D03               	goto	u581
  6054  0320  2B22               	goto	u580
  6055  0321  2B23               u581:
  6056  0322                     	goto	l1514
  6057  0322  2B2E               u580:
  6058  0323                     	goto	l1512
  6059  0323  2B24               	
  6060                           l274:	
  6061  0324                     	line	55
  6062                           	
  6063                           l1512:	
  6064  0324                     ;lcd.c: 55:             _delay((unsigned long)((2)*(4000000/4000.0)));
  6065                           	opt asmopt_push
  6066                           opt asmopt_off
  6067                           movlw	3
  6068  0324  3003               movwf	((??_cmdLCD+0)+0+1),f
  6069  0325  00F1               	movlw	151
  6070  0326  3097               movwf	((??_cmdLCD+0)+0),f
  6071  0327  00F0               	u1227:
  6072  0328                     decfsz	((??_cmdLCD+0)+0),f
  6073  0328  0BF0               	goto	u1227
  6074  0329  2B28               	decfsz	((??_cmdLCD+0)+0+1),f
  6075  032A  0BF1               	goto	u1227
  6076  032B  2B28               	nop2
  6077  032C  2B2D               opt asmopt_pop
  6078                           
  6079                           	goto	l1516
  6080  032D  2B33               	line	56
  6081                           ;lcd.c: 56:        else
  6082                           	
  6083                           l272:	
  6084  032E                     	line	57
  6085                           	
  6086                           l1514:	
  6087  032E                     ;lcd.c: 57:             _delay((unsigned long)((40)*(4000000/4000000.0)));
  6088                           	opt asmopt_push
  6089                           opt asmopt_off
  6090                           	movlw	13
  6091  032E  300D               movwf	((??_cmdLCD+0)+0),f
  6092  032F  00F0               	u1237:
  6093  0330                     decfsz	(??_cmdLCD+0)+0,f
  6094  0330  0BF0               	goto	u1237
  6095  0331  2B30               opt asmopt_pop
  6096                           
  6097                           	goto	l1516
  6098  0332  2B33               	
  6099                           l275:	
  6100  0333                     	line	58
  6101                           	
  6102                           l1516:	
  6103  0333                     ;lcd.c: 58:        LCD.EN = 1;
  6104                           	bcf	status, 5	;RP0=0, select bank0
  6105  0333  1283               	bcf	status, 6	;RP1=0, select bank0
  6106  0334  1303               	bsf	(8),5	;volatile
  6107  0335  1688               	goto	l276
  6108  0336  2B37               	line	59
  6109                           ;lcd.c: 59:     }
  6110                           	
  6111                           l271:	
  6112  0337                     	line	60
  6113                           	
  6114                           l276:	
  6115  0337                     	return
  6116  0337  0008               	opt stack 0
  6117                           GLOBAL	__end_of_cmdLCD
  6118                           	__end_of_cmdLCD:
  6119  0338                     	signat	_cmdLCD,4217
  6120                           global	___latbits
  6121                           ___latbits	equ	2
  6122  0002                     	global	btemp
  6123                           	btemp set 07Eh
  6124  007E                     
  6125                           	DABS	1,126,2	;btemp
  6126                           	global	wtemp0
  6127                           	wtemp0 set btemp+0
  6128  007E                     	end


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     13      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    writeLCD@ptr	PTR const unsigned char  size(1) Largest target is 16
		 -> fifo(BANK0[16]), 

    initSerialIO@ptrOut	PTR unsigned char  size(1) Largest target is 1
		 -> main@atuador(BANK0[1]), 

    initSerialIO@ptrIn	PTR unsigned char  size(1) Largest target is 1
		 -> main@sensor(BANK0[1]), 

    ptrSerialOut	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@atuador(BANK0[1]), 

    ptrSerialIn	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), main@sensor(BANK0[1]), 

    sp__displayFIFO	PTR void  size(1) Largest target is 16
		 -> fifo(BANK0[16]), 


Critical Paths under _main in COMMON

    _main->_writeLCD
    _writeLCD->_gotoxy
    _gotoxy->_cmdLCD
    _serialIOscan->_serialIObyteShift
    _initLCD->_cmdLCD
    _clearLCD->_cmdLCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0    2726
                                              0 BANK0     13    13      0
                           _clearLCD
                         _currentKey
                            _delFIFO
                        _displayFIFO
                            _getFIFO
                       _initKeyboard
                            _initLCD
                       _initSerialIO
                       _keyboardScan
                        _previousKey
                            _putFIFO
                       _serialIOscan
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             4     2      2     605
                                              8 COMMON     4     2      2
                        _displayFIFO (ARG)
                             _gotoxy
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               4     4      0      67
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _gotoxy                                               4     3      1     297
                                              4 COMMON     4     3      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _serialIOscan                                         5     5      0     205
                                              4 COMMON     5     5      0
                  _serialIObyteShift
                       _serialIOload
 ---------------------------------------------------------------------------------
 (2) _serialIOload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialIObyteShift                                    4     4      0     114
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _putFIFO                                              2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _previousKey                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyboardScan                                        11    11      0     210
                                              0 COMMON    11    11      0
 ---------------------------------------------------------------------------------
 (1) _initSerialIO                                         4     2      2     251
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     177
                                              4 COMMON     2     2      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _initKeyboard                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getFIFO                                              2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayFIFO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delFIFO                                              3     3      0      46
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _currentKey                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             0     0      0     177
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               4     4      0     177
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearLCD
     _cmdLCD
   _currentKey
   _delFIFO
   _displayFIFO
   _getFIFO
   _initKeyboard
   _initLCD
     _cmdLCD
   _initSerialIO
   _keyboardScan
   _previousKey
   _putFIFO
   _serialIOscan
     _serialIObyteShift
     _serialIOload
   _writeLCD
     _displayFIFO (ARG)
     _gotoxy (ARG)
       _cmdLCD
     _putLCD (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      30       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      D      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      30      12        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Nov 11 13:59:17 2019

              ?_displayFIFO 0070                           l9 0142                           pc 0002  
                        l12 016A                          l13 016C                          l22 0197  
                        l23 0187                          l25 01A2                          l26 01A3  
                        l51 011B                          l27 01A5                          l19 0116  
                        l62 0155                          l54 0342                          l55 03AB  
                        l56 035F                          l48 0120                          l57 03A0  
                        l58 0395                          l59 03B6                          l95 03D7  
                        l96 0625                          l97 03DD                          l98 069F  
                        l99 03DE                          fsr 0004                         l100 03F3  
                       l101 04B3                         l110 042A                         l102 03FE  
                       l103 04B2                         l111 04AE                         l200 074D  
                       l120 0461                         l112 0435                         l104 0409  
                       l201 0765                         l105 04B1                         l113 04AD  
                       l121 04A9                         l210 0761                         l202 074E  
                       l130 0498                         l122 046C                         l114 0440  
                       l106 0414                         l211 0794                         l203 078E  
                       l107 04B0                         l115 04AC                         l123 04A8  
                       l131 04A4                         l212 07ED                         l204 0752  
                       l140 04DA                         l132 04A3                         l124 0477  
                       l116 044B                         l108 041F                         l213 07EE  
                       l205 0755                         l141 04E3                         l133 04B4  
                       l109 04AF                         l117 04AB                         l125 04A7  
                       l214 07EE                         l206 0757                         l150 053D  
                       l142 04E4                         l134 04BA                         l126 0482  
                       l118 0456                         l207 075A                         l151 0542  
                       l143 04EA                         l135 04C3                         l119 04AA  
                       l127 04A6                         l240 01DC                         l208 075C  
                       l160 05C4                         l152 0558                         l144 04F3  
                       l136 04C4                         l128 048D                         l241 01DD  
                       l209 075F                         l161 05C9                         l153 055D  
                       l145 04F4                         l137 04CA                         l129 04A5  
                       l242 01E6                         l250 0299                         l170 060A  
                       l162 05DF                         l154 0573                         l146 0509  
                       l138 04D3                         l243 01EF                         l235 0125  
                       l171 0613                         l163 05E4                         l155 0578  
                       l147 050E                         l139 04D4                         l244 01F4  
                       l180 07D6                         l172 0614                         l164 05EA  
                       l156 058E                         l148 0523                         l253 0228  
                       l181 06D8                         l173 061A                         l165 05F3  
                       l157 0593                         l149 0528                         l270 0305  
                       l238 01EA                         l190 072C                         l182 06E9  
                       l174 0623                         l166 05F4                         l158 05A9  
                       l271 0337                         l239 01D1                         l247 028B  
                       l191 073E                         l183 06F3                         l175 07E7  
                       l167 05FA                         l159 05AE                         l272 032E  
                       l264 02D8                         l248 026B                         l176 079C  
                       l192 073F                         l184 06F4                         l168 0603  
                       l249 0294                         l193 0740                         l185 0705  
                       l177 06BE                         l169 0604                         l274 0324  
                       l282 0184                         l194 0741                         l186 070F  
                       l178 06CD                         l275 0333                         l267 0300  
                       l195 0742                         l187 0710                         l179 06D7  
                       l276 0337                         l196 0743                         l188 0721  
                       l269 02F6                         l285 01C0                         l197 0744  
                       l189 072B                         l286 01B2                         l198 0745  
                       l279 025C                         l287 01C9                         l199 0746  
                       l288 01C9                         l297 012C                         _LCD 0008  
                       u600 01E1                         u601 01E0                         u610 01EF  
                       u611 01EE                         u540 02EF                         u700 037E  
                       u541 02EE                         u701 037D                         u550 02F5  
                       u630 015D                         u551 02F4                         u631 015C  
                       u560 030E                         u640 019C                         u720 039F  
                       u800 041A                         u561 030D                         u641 019B  
                       u721 039E                         u625 0174                         u801 0419  
                       u570 031D                         u650 01A1                         u730 03AA  
                       u810 0425                         u571 031C                         u651 01A0  
                       u731 03A9                         u715 0381                         u811 0424  
                       u580 0323                         u660 0340                         u740 01C8  
                       u900 0488                         u820 0430                         u581 0322  
                       u661 033F                         u741 01C7                         u901 0487  
                       u821 042F                         u590 01DA                         u750 0293  
                       u910 0493                         u830 043B                         u591 01D9  
                       u751 0292                         u911 0492                         u831 043A  
                       u680 035D                         u920 049E                         u840 0446  
                       u760 03EE                         u681 035C                         u921 049D  
                       u841 0445                         u761 03ED                         u674 0348  
                       u930 04BE                         u850 0451                         u770 03F9  
                       u675 0346                         u931 04BD                         u851 0450  
                       u771 03F8                         u940 04CE                         u860 045C  
                       u780 0404                         u941 04CD                         u861 045B  
                       u781 0403                         u694 0370                         u950 04DE  
                       u870 0467                         u790 040F                         u695 036D  
                       u951 04DD                         u871 0466                         u791 040E  
                       u960 04EE                         u880 0472                         u961 04ED  
                       u881 0471                         u970 05EE                         u890 047D  
                       u971 05ED                         u891 047C                         u980 05FE  
                       u981 05FD                         u990 060E                         u991 060D  
                       fsr0 0004                         indf 0000                __CFG_LVP$OFF 0000  
                      l1500 0305                        l1510 031D                        l1502 0308  
                      l1512 0324                        l1504 030E                        l1600 0117  
                      l1520 01CB                        l1514 032E                        l1506 030F  
                      l1602 011B                        l1610 0342                        l1530 01E6  
                      l1522 01CF                        l2090 0697                        l1516 0333  
                      l1508 0317                        l1700 0126                        l1620 037E  
                      l1612 0356                        l1604 0338                        l1532 01E7  
                      l1524 01D4                        l1540 022A                        l2092 0774  
                      l1622 0395                        l1614 0357                        l1630 03AB  
                      l1606 033A                        l1526 01DA                        l1534 01EA  
                      l1518 0121                        l1710 025D                        l1550 0243  
                      l1542 022E                        l1702 01A7                        l2094 07A4  
                      l1640 014E                        l1632 03B6                        l1624 0399  
                      l1616 035E                        l1608 0341                        l1536 01F2  
                      l1528 01E1                        l1720 028B                        l1712 0264  
                      l1560 016E                        l1552 0246                        l1544 0231  
                      l1704 01B2                        l2088 062F                        l1800 0498  
                      l1490 02E9                        l1570 015D                        l1642 0150  
                      l1634 0143                        l1650 029F                        l1626 03A0  
                      l1618 035F                        l1562 0136                        l1538 01F4  
                      l1722 0294                        l1714 0269                        l1554 024F  
                      l1546 0239                        l1706 01BB                        l1810 04CE  
                      l1802 049E                        l1730 03C8                        l1492 02EA  
                      l1484 02DA                        l1580 0116                        l1572 0165  
                      l1644 0151                        l1636 0147                        l1660 02B7  
                      l1652 02A3                        l1628 03A4                        l1564 013E  
                      l1716 026B                        l1556 0250                        l1548 023A  
                      l1708 01C0                        l1900 06FA                        l1820 04F4  
                      l1812 04D5                        l1804 04B5                        l1740 03F3  
                      l1732 03D7                        l1724 03B7                        l1494 02EF  
                      l1486 02DE                        l1590 019C                        l1582 0186  
                      l1574 016A                        l1566 0156                        l1646 0154  
                      l1638 014A                        l1662 02BD                        l1654 02A4  
                      l1670 01F6                        l1718 0286                        l1558 0259  
                      l1910 071A                        l1902 06FE                        l1830 053D  
                      l1822 0509                        l1814 04DE                        l1806 04BE  
                      l1750 040F                        l1742 03F9                        l1734 03DE  
                      l1726 03BE                        l1496 02F6                        l1488 02E1  
                      l1592 01A3                        l1584 0187                        l1576 016C  
                      l1568 0157                        l1664 02C3                        l1656 02A8  
                      l1648 029A                        l1680 020E                        l1672 0204  
                      l1920 0746                        l1912 0721                        l1904 0705  
                      l1840 0578                        l1832 0542                        l1824 050E  
                      l1816 04E5                        l1808 04C5                        l1760 042A  
                      l1752 0414                        l1744 03FE                        l1736 03E8  
                      l1728 03C3                        l1498 0300                        l1594 01A5  
                      l1586 0189                        l1578 0114                        l1666 02C9  
                      l1658 02B1                        l1690 021D                        l1682 0211  
                      l1674 0205                        l1930 0764                        l1922 074E  
                      l1914 072C                        l1906 0710                        l1850 05C4  
                      l1842 058E                        l1834 0558                        l1826 0523  
                      l1818 04EE                        l1770 0446                        l1762 0430  
                      l1754 041A                        l1746 0404                        l1738 03EE  
                      l1588 0191                        l1668 02CF                        l1692 0220  
                      l1684 0214                        l1676 0208                        l1596 011C  
                      l1924 0755                        l1932 0765                        l1916 0732  
                      l1908 0716                        l1940 079C                        l1860 05F5  
                      l1852 05C9                        l1844 0593                        l1836 055D  
                      l1828 0528                        l1780 0461                        l1772 044B  
                      l1764 0435                        l1756 041F                        l1748 0409  
                      l1694 0223                        l1686 0217                        l1678 020B  
                      l1598 0120                        l1926 075A                        l1934 078E  
                      l1918 0737                        l1942 07D6                        l1870 061E  
                      l1862 05FE                        l1854 05DF                        l1846 05A9  
                      l1838 0573                        l1790 047D                        l1782 0467  
                      l1774 0451                        l1766 043B                        l1758 0425  
                      l1696 0226                        l1688 021A                        l1936 0794  
                      l1928 075F                        l1880 06B3                        l1872 0624  
                      l1864 0605                        l1856 05E5                        l1848 05AE  
                      l1792 0482                        l1784 046C                        l1776 0456  
                      l1768 0440                        l1698 0227                        l1938 079B  
                      l1890 06D8                        l1882 06BE                        l1866 060E  
                      l1858 05EE                        l1794 0488                        l1786 0472  
                      l1778 045C                        l1874 0625                        l1892 06DE  
                      l1884 06C2                        l1868 0615                        l1796 048D  
                      l1788 0477                        l1876 069F                        l1894 06E2  
                      l1886 06C6                        l1878 06A9                        l1798 0493  
                      l1896 06E9                        l1888 06CD                        l1898 06F4  
               main@atuador 003C                        u1000 061E                        u1001 061D  
                      u1010 06A9                        u1011 06A8                        u1020 06B3  
                      u1021 06B2                        u1030 06C6                        u1031 06C5  
                      u1040 06E2                        u1041 06E1                        u1050 06FE  
                      u1051 06FD                        u1107 054A                        u1060 071A  
                      u1061 0719                        u1117 0565                        u1207 02FA  
                      u1127 0580                        u1217 0302                        u1137 059B  
                      u1227 0328                        u1147 05B6                        u1237 0330  
                      u1157 05D1                        u1077 04FC                        u1167 023E  
                      u1087 0516                        u1177 0254                        u1097 0530  
                      u1187 02AC                        u1197 02D3                        _WPUB 0095  
                      _fifo 0025                        _main 03B7                        btemp 007E  
                      start 0000                       ?_main 0070               __CFG_WDTE$OFF 0000  
           __end_of_delFIFO 01A6                       _PORTB 0006             __end_of_getFIFO 016D  
                     _TRISB 0086                       _TRISD 0088             __end_of_initLCD 02D9  
                     main@a 0038                       main@b 0039                       main@c 003A  
                     main@d 003B             __end_of_putFIFO 0143                       pclath 000A  
                     status 0003                       wtemp0 007E              __CFG_MCLRE$OFF 0000  
           __initialization 07F1                __end_of_main 07F1               ?_initKeyboard 0070  
                    ??_main 0035               ?_initSerialIO 0070                      _ANSELH 0189  
             ?_keyboardScan 0070            __end_of_clearLCD 012D                      _cmdLCD 02D9  
            ??_initKeyboard 0070                   ??_delFIFO 0070                   ??_getFIFO 0070  
      __size_of_displayFIFO 0003                      _gotoxy 016D                      _putLCD 0229  
            ??_initSerialIO 0072                   ??_initLCD 0074                   ??_putFIFO 0070  
          __end_of_writeLCD 01CA              ??_keyboardScan 0070                ?_previousKey 0070  
   __end_of__initialization 07FC           _serialIObyteShift 01CA          ?_serialIObyteShift 0070  
            __pcstackCOMMON 0070         ??_serialIObyteShift 0070              _OPTION_REGbits 0081  
         initSerialIO@ptrIn 0073                  delFIFO@ret 0072                  __pbssBANK0 0020  
 __end_of_serialIObyteShift 01F5                  __pmaintext 03B7                cmdLCD@nibble 0073  
                   ?_cmdLCD 0070                     ?_gotoxy 0074                     ?_putLCD 0070  
   serialIObyteShift@dataIn 0071                   ?_clearLCD 0070        __end_of_initKeyboard 0156  
                __stringtab 0003               ?_serialIOload 0070               ?_serialIOscan 0070  
      __end_of_initSerialIO 0229                  getFIFO@aux 0071             __size_of_cmdLCD 005F  
                   _delFIFO 0185                  _currentKey 0117                     _getFIFO 0156  
                 _ANSELbits 0188        __end_of_keyboardScan 03B7             __size_of_gotoxy 0018  
                 ?_writeLCD 0078             __size_of_putLCD 0034                     __ptext1 01A6  
                   __ptext2 0229                     __ptext3 016D                     __ptext4 025D  
                   __ptext5 0121                     __ptext6 01CA                     __ptext7 0135  
                   __ptext8 011C                     __ptext9 0338                     _initLCD 029A  
                   _currKey 0023                  ??_clearLCD 0074                     _putFIFO 0135  
                   _prevKey 0024                     clrloop0 012E        end_of_initialization 07FC  
            ??_serialIOload 0070              ??_serialIOscan 0074  __size_of_serialIObyteShift 002B  
                   gotoxy@x 0077                     gotoxy@y 0074        __size_of_previousKey 0005  
                   putLCD@c 0072                  ??_writeLCD 007A                   _PORTAbits 0005  
                 _PORTEbits 0009                _KEYBOARDbits 0006                   _TRISAbits 0085  
                 _TRISEbits 0089             keyboardScan@aux 0078                  main@estado 003F  
                main@sensor 003D               ??_displayFIFO 0070              __end_of_cmdLCD 0338  
               ?_currentKey 0070              __end_of_gotoxy 0185              __end_of_putLCD 025D  
       start_initialization 07F1       __size_of_initKeyboard 0013       __size_of_initSerialIO 0034  
        initSerialIO@length 0071          initSerialIO@ptrOut 0070    __CFG_FOSC$INTRC_NOCLKOUT 0000  
     __size_of_keyboardScan 007F                    ??_cmdLCD 0070              _keyboardMatrix 0009  
              _initKeyboard 0143                    ??_gotoxy 0075                    ??_putLCD 0070  
      __end_of_serialIOload 0126        __end_of_serialIOscan 029A         __end_of_displayFIFO 0117  
              _initSerialIO 01F5                 __pbssCOMMON 007C                   ___latbits 0002  
             __pcstackBANK0 0035           __size_of_clearLCD 0007         __size_of_currentKey 0005  
              _keyboardScan 0338      __end_of_keyboardMatrix 0019                   cmdLCD@cmd 0072  
                  ?_delFIFO 0070               serialIOscan@i 0078               serialIOscan@j 0077  
                  ?_getFIFO 0070                   __pstrings 0003                    ?_initLCD 0070  
         __size_of_writeLCD 0024                    ?_putFIFO 0070    serialIObyteShift@dataBit 0073  
  serialIObyteShift@dataOut 0072                 writeLCD@ptr 0079                   clear_ram0 012D  
                  _SERIALIO 0009                 _displayFIFO 0114                 __stringbase 0008  
              putLCD@nibble 0073                 _lenSerialIO 0020                   main@tecla 003E  
             ??_previousKey 0070       __size_of_serialIOload 0005       __size_of_serialIOscan 003D  
              ??_currentKey 0070            __size_of_delFIFO 0021            __size_of_getFIFO 0017  
        __end_of__stringtab 0009                    delFIFO@n 0071            __size_of_initLCD 003F  
                  _clearLCD 0126                    _fifoHead 007D            __size_of_putFIFO 000E  
                  _fifoTail 007C                    __ptext10 01F5                    __ptext11 029A  
                  __ptext12 0143                    __ptext13 0156                    __ptext14 0114  
                  __ptext15 0185                    __ptext16 0117                    __ptext17 0126  
                  __ptext18 02D9                _serialIOload 0121                _serialIOscan 025D  
             __size_of_main 043A          __end_of_currentKey 011C         __end_of_previousKey 0121  
             keyboardScan@i 0079               keyboardScan@j 007A                    main@rest 0041  
                  _writeLCD 01A6                    putFIFO@c 0071                   writeLCD@x 007B  
                 writeLCD@y 0078                   stringcode 0003                _ptrSerialOut 0021  
                  stringdir 0003                    stringtab 0003                 _ptrSerialIn 0022  
               _previousKey 011C  
